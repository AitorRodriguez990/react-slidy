{"dependencies":[{"name":"/Users/miguelangel.duran/Dev/react-slidy/package.json","includedInParent":true,"mtime":1521562679188},{"name":"/Users/miguelangel.duran/Dev/react-slidy/node_modules/js-beautify/package.json","includedInParent":true,"mtime":1520272391086}],"generated":{"js":"var global = (1,eval)(\"this\");\n/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n\n JS Beautifier\n---------------\n\n\n  Written by Einar Lielmanis, <einar@jsbeautifier.org>\n      http://jsbeautifier.org/\n\n  Originally converted to javascript by Vital, <vital76@gmail.com>\n  \"End braces on own line\" added by Chris J. Shull, <chrisjshull@gmail.com>\n  Parsing improvements for brace-less statements by Liam Newman <bitwiseman@gmail.com>\n\n\n  Usage:\n    js_beautify(js_source_text);\n    js_beautify(js_source_text, options);\n\n  The options are:\n    indent_size (default 4)          - indentation size,\n    indent_char (default space)      - character to indent with,\n    preserve_newlines (default true) - whether existing line breaks should be preserved,\n    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk,\n\n    jslint_happy (default false) - if true, then jslint-stricter mode is enforced.\n\n            jslint_happy        !jslint_happy\n            ---------------------------------\n            function ()         function()\n\n            switch () {         switch() {\n            case 1:               case 1:\n              break;                break;\n            }                   }\n\n    space_after_anon_function (default false) - should the space before an anonymous function's parens be added, \"function()\" vs \"function ()\",\n          NOTE: This option is overriden by jslint_happy (i.e. if jslint_happy is true, space_after_anon_function is true by design)\n\n    brace_style (default \"collapse\") - \"collapse\" | \"expand\" | \"end-expand\" | \"none\" | any of the former + \",preserve-inline\"\n            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.\n            preserve-inline will try to preserve inline blocks of curly braces\n\n    space_before_conditional (default true) - should the space before conditional statement be added, \"if(true)\" vs \"if (true)\",\n\n    unescape_strings (default false) - should printable characters in strings encoded in \\xNN notation be unescaped, \"example\" vs \"\\x65\\x78\\x61\\x6d\\x70\\x6c\\x65\"\n\n    wrap_line_length (default unlimited) - lines should wrap at next opportunity after this number of characters.\n          NOTE: This is not a hard limit. Lines will continue until a point where a newline would\n                be preserved if it were present.\n\n    end_with_newline (default false)  - end output with a newline\n\n\n    e.g\n\n    js_beautify(js_source_text, {\n      'indent_size': 1,\n      'indent_char': '\\t'\n    });\n\n*/\n\n// Object.values polyfill found here:\n// http://tokenposts.blogspot.com.au/2012/04/javascript-objectkeys-browser.html\nif (!Object.values) {\n    Object.values = function(o) {\n        if (o !== Object(o)) {\n            throw new TypeError('Object.values called on a non-object');\n        }\n        var k = [],\n            p;\n        for (p in o) {\n            if (Object.prototype.hasOwnProperty.call(o, p)) {\n                k.push(o[p]);\n            }\n        }\n        return k;\n    };\n}\n\n(function() {\n\n    function mergeOpts(allOptions, targetType) {\n        var finalOpts = {};\n        var name;\n\n        for (name in allOptions) {\n            if (name !== targetType) {\n                finalOpts[name] = allOptions[name];\n            }\n        }\n\n        //merge in the per type settings for the targetType\n        if (targetType in allOptions) {\n            for (name in allOptions[targetType]) {\n                finalOpts[name] = allOptions[targetType][name];\n            }\n        }\n        return finalOpts;\n    }\n\n    function js_beautify(js_source_text, options) {\n\n        var acorn = {};\n        (function(exports) {\n            /* jshint curly: false */\n            // This section of code is taken from acorn.\n            //\n            // Acorn was written by Marijn Haverbeke and released under an MIT\n            // license. The Unicode regexps (for identifiers and whitespace) were\n            // taken from [Esprima](http://esprima.org) by Ariya Hidayat.\n            //\n            // Git repositories for Acorn are available at\n            //\n            //     http://marijnhaverbeke.nl/git/acorn\n            //     https://github.com/marijnh/acorn.git\n\n            // ## Character categories\n\n            // Big ugly regular expressions that match characters in the\n            // whitespace, identifier, and identifier-start categories. These\n            // are only applied when a character is found to actually have a\n            // code point above 128.\n\n            var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/; // jshint ignore:line\n            var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n            var nonASCIIidentifierChars = \"\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n            var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n            var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\n            // Whether a single character denotes a newline.\n\n            exports.newline = /[\\n\\r\\u2028\\u2029]/;\n\n            // Matches a whole line break (where CRLF is considered a single\n            // line break). Used to count lines.\n\n            // in javascript, these two differ\n            // in python they are the same, different methods are called on them\n            exports.lineBreak = new RegExp('\\r\\n|' + exports.newline.source);\n            exports.allLineBreaks = new RegExp(exports.lineBreak.source, 'g');\n\n\n            // Test whether a given character code starts an identifier.\n\n            exports.isIdentifierStart = function(code) {\n                // permit $ (36) and @ (64). @ is used in ES7 decorators.\n                if (code < 65) return code === 36 || code === 64;\n                // 65 through 91 are uppercase letters.\n                if (code < 91) return true;\n                // permit _ (95).\n                if (code < 97) return code === 95;\n                // 97 through 123 are lowercase letters.\n                if (code < 123) return true;\n                return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n            };\n\n            // Test whether a given character is part of an identifier.\n\n            exports.isIdentifierChar = function(code) {\n                if (code < 48) return code === 36;\n                if (code < 58) return true;\n                if (code < 65) return false;\n                if (code < 91) return true;\n                if (code < 97) return code === 95;\n                if (code < 123) return true;\n                return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n            };\n        })(acorn);\n        /* jshint curly: true */\n\n        function in_array(what, arr) {\n            for (var i = 0; i < arr.length; i += 1) {\n                if (arr[i] === what) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        function trim(s) {\n            return s.replace(/^\\s+|\\s+$/g, '');\n        }\n\n        function ltrim(s) {\n            return s.replace(/^\\s+/g, '');\n        }\n\n        // function rtrim(s) {\n        //     return s.replace(/\\s+$/g, '');\n        // }\n\n        function sanitizeOperatorPosition(opPosition) {\n            opPosition = opPosition || OPERATOR_POSITION.before_newline;\n\n            var validPositionValues = Object.values(OPERATOR_POSITION);\n\n            if (!in_array(opPosition, validPositionValues)) {\n                throw new Error(\"Invalid Option Value: The option 'operator_position' must be one of the following values\\n\" +\n                    validPositionValues +\n                    \"\\nYou passed in: '\" + opPosition + \"'\");\n            }\n\n            return opPosition;\n        }\n\n        var OPERATOR_POSITION = {\n            before_newline: 'before-newline',\n            after_newline: 'after-newline',\n            preserve_newline: 'preserve-newline',\n        };\n\n        var OPERATOR_POSITION_BEFORE_OR_PRESERVE = [OPERATOR_POSITION.before_newline, OPERATOR_POSITION.preserve_newline];\n\n        var MODE = {\n            BlockStatement: 'BlockStatement', // 'BLOCK'\n            Statement: 'Statement', // 'STATEMENT'\n            ObjectLiteral: 'ObjectLiteral', // 'OBJECT',\n            ArrayLiteral: 'ArrayLiteral', //'[EXPRESSION]',\n            ForInitializer: 'ForInitializer', //'(FOR-EXPRESSION)',\n            Conditional: 'Conditional', //'(COND-EXPRESSION)',\n            Expression: 'Expression' //'(EXPRESSION)'\n        };\n\n        function Beautifier(js_source_text, options) {\n            \"use strict\";\n            var output;\n            var tokens = [],\n                token_pos;\n            var Tokenizer;\n            var current_token;\n            var last_type, last_last_text, indent_string;\n            var flags, previous_flags, flag_store;\n            var prefix;\n\n            var handlers, opt;\n            var baseIndentString = '';\n\n            handlers = {\n                'TK_START_EXPR': handle_start_expr,\n                'TK_END_EXPR': handle_end_expr,\n                'TK_START_BLOCK': handle_start_block,\n                'TK_END_BLOCK': handle_end_block,\n                'TK_WORD': handle_word,\n                'TK_RESERVED': handle_word,\n                'TK_SEMICOLON': handle_semicolon,\n                'TK_STRING': handle_string,\n                'TK_EQUALS': handle_equals,\n                'TK_OPERATOR': handle_operator,\n                'TK_COMMA': handle_comma,\n                'TK_BLOCK_COMMENT': handle_block_comment,\n                'TK_COMMENT': handle_comment,\n                'TK_DOT': handle_dot,\n                'TK_UNKNOWN': handle_unknown,\n                'TK_EOF': handle_eof\n            };\n\n            function create_flags(flags_base, mode) {\n                var next_indent_level = 0;\n                if (flags_base) {\n                    next_indent_level = flags_base.indentation_level;\n                    if (!output.just_added_newline() &&\n                        flags_base.line_indent_level > next_indent_level) {\n                        next_indent_level = flags_base.line_indent_level;\n                    }\n                }\n\n                var next_flags = {\n                    mode: mode,\n                    parent: flags_base,\n                    last_text: flags_base ? flags_base.last_text : '', // last token text\n                    last_word: flags_base ? flags_base.last_word : '', // last 'TK_WORD' passed\n                    declaration_statement: false,\n                    declaration_assignment: false,\n                    multiline_frame: false,\n                    inline_frame: false,\n                    if_block: false,\n                    else_block: false,\n                    do_block: false,\n                    do_while: false,\n                    import_block: false,\n                    in_case_statement: false, // switch(..){ INSIDE HERE }\n                    in_case: false, // we're on the exact line with \"case 0:\"\n                    case_body: false, // the indented case-action block\n                    indentation_level: next_indent_level,\n                    line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,\n                    start_line_index: output.get_line_number(),\n                    ternary_depth: 0\n                };\n                return next_flags;\n            }\n\n            // Some interpreters have unexpected results with foo = baz || bar;\n            options = options ? options : {};\n\n            // Allow the setting of language/file-type specific options\n            // with inheritance of overall settings\n            options = mergeOpts(options, 'js');\n\n            opt = {};\n\n            // compatibility, re\n            if (options.brace_style === \"expand-strict\") { //graceful handling of deprecated option\n                options.brace_style = \"expand\";\n            } else if (options.brace_style === \"collapse-preserve-inline\") { //graceful handling of deprecated option\n                options.brace_style = \"collapse,preserve-inline\";\n            } else if (options.braces_on_own_line !== undefined) { //graceful handling of deprecated option\n                options.brace_style = options.braces_on_own_line ? \"expand\" : \"collapse\";\n            } else if (!options.brace_style) //Nothing exists to set it\n            {\n                options.brace_style = \"collapse\";\n            }\n\n\n            var brace_style_split = options.brace_style.split(/[^a-zA-Z0-9_\\-]+/);\n            opt.brace_style = brace_style_split[0];\n            opt.brace_preserve_inline = brace_style_split[1] ? brace_style_split[1] : false;\n\n            opt.indent_size = options.indent_size ? parseInt(options.indent_size, 10) : 4;\n            opt.indent_char = options.indent_char ? options.indent_char : ' ';\n            opt.eol = options.eol ? options.eol : 'auto';\n            opt.preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;\n            opt.break_chained_methods = (options.break_chained_methods === undefined) ? false : options.break_chained_methods;\n            opt.max_preserve_newlines = (options.max_preserve_newlines === undefined) ? 0 : parseInt(options.max_preserve_newlines, 10);\n            opt.space_in_paren = (options.space_in_paren === undefined) ? false : options.space_in_paren;\n            opt.space_in_empty_paren = (options.space_in_empty_paren === undefined) ? false : options.space_in_empty_paren;\n            opt.jslint_happy = (options.jslint_happy === undefined) ? false : options.jslint_happy;\n            opt.space_after_anon_function = (options.space_after_anon_function === undefined) ? false : options.space_after_anon_function;\n            opt.keep_array_indentation = (options.keep_array_indentation === undefined) ? false : options.keep_array_indentation;\n            opt.space_before_conditional = (options.space_before_conditional === undefined) ? true : options.space_before_conditional;\n            opt.unescape_strings = (options.unescape_strings === undefined) ? false : options.unescape_strings;\n            opt.wrap_line_length = (options.wrap_line_length === undefined) ? 0 : parseInt(options.wrap_line_length, 10);\n            opt.e4x = (options.e4x === undefined) ? false : options.e4x;\n            opt.end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;\n            opt.comma_first = (options.comma_first === undefined) ? false : options.comma_first;\n            opt.operator_position = sanitizeOperatorPosition(options.operator_position);\n\n            // For testing of beautify ignore:start directive\n            opt.test_output_raw = (options.test_output_raw === undefined) ? false : options.test_output_raw;\n\n            // force opt.space_after_anon_function to true if opt.jslint_happy\n            if (opt.jslint_happy) {\n                opt.space_after_anon_function = true;\n            }\n\n            if (options.indent_with_tabs) {\n                opt.indent_char = '\\t';\n                opt.indent_size = 1;\n            }\n\n            if (opt.eol === 'auto') {\n                opt.eol = '\\n';\n                if (js_source_text && acorn.lineBreak.test(js_source_text || '')) {\n                    opt.eol = js_source_text.match(acorn.lineBreak)[0];\n                }\n            }\n\n            opt.eol = opt.eol.replace(/\\\\r/, '\\r').replace(/\\\\n/, '\\n');\n\n            //----------------------------------\n            indent_string = '';\n            while (opt.indent_size > 0) {\n                indent_string += opt.indent_char;\n                opt.indent_size -= 1;\n            }\n\n            var preindent_index = 0;\n            if (js_source_text && js_source_text.length) {\n                while ((js_source_text.charAt(preindent_index) === ' ' ||\n                        js_source_text.charAt(preindent_index) === '\\t')) {\n                    baseIndentString += js_source_text.charAt(preindent_index);\n                    preindent_index += 1;\n                }\n                js_source_text = js_source_text.substring(preindent_index);\n            }\n\n            last_type = 'TK_START_BLOCK'; // last token type\n            last_last_text = ''; // pre-last token text\n            output = new Output(indent_string, baseIndentString);\n\n            // If testing the ignore directive, start with output disable set to true\n            output.raw = opt.test_output_raw;\n\n\n            // Stack of parsing/formatting states, including MODE.\n            // We tokenize, parse, and output in an almost purely a forward-only stream of token input\n            // and formatted output.  This makes the beautifier less accurate than full parsers\n            // but also far more tolerant of syntax errors.\n            //\n            // For example, the default mode is MODE.BlockStatement. If we see a '{' we push a new frame of type\n            // MODE.BlockStatement on the the stack, even though it could be object literal.  If we later\n            // encounter a \":\", we'll switch to to MODE.ObjectLiteral.  If we then see a \";\",\n            // most full parsers would die, but the beautifier gracefully falls back to\n            // MODE.BlockStatement and continues on.\n            flag_store = [];\n            set_mode(MODE.BlockStatement);\n\n            this.beautify = function() {\n\n                /*jshint onevar:true */\n                var sweet_code;\n                Tokenizer = new tokenizer(js_source_text, opt, indent_string);\n                tokens = Tokenizer.tokenize();\n                token_pos = 0;\n\n                current_token = get_token();\n                while (current_token) {\n                    handlers[current_token.type]();\n\n                    last_last_text = flags.last_text;\n                    last_type = current_token.type;\n                    flags.last_text = current_token.text;\n\n                    token_pos += 1;\n                    current_token = get_token();\n                }\n\n                sweet_code = output.get_code();\n                if (opt.end_with_newline) {\n                    sweet_code += '\\n';\n                }\n\n                if (opt.eol !== '\\n') {\n                    sweet_code = sweet_code.replace(/[\\n]/g, opt.eol);\n                }\n\n                return sweet_code;\n            };\n\n            function handle_whitespace_and_comments(local_token, preserve_statement_flags) {\n                var newlines = local_token.newlines;\n                var keep_whitespace = opt.keep_array_indentation && is_array(flags.mode);\n                var temp_token = current_token;\n\n                for (var h = 0; h < local_token.comments_before.length; h++) {\n                    // The cleanest handling of inline comments is to treat them as though they aren't there.\n                    // Just continue formatting and the behavior should be logical.\n                    // Also ignore unknown tokens.  Again, this should result in better behavior.\n                    current_token = local_token.comments_before[h];\n                    handle_whitespace_and_comments(current_token, preserve_statement_flags);\n                    handlers[current_token.type](preserve_statement_flags);\n                }\n                current_token = temp_token;\n\n                if (keep_whitespace) {\n                    for (var i = 0; i < newlines; i += 1) {\n                        print_newline(i > 0, preserve_statement_flags);\n                    }\n                } else {\n                    if (opt.max_preserve_newlines && newlines > opt.max_preserve_newlines) {\n                        newlines = opt.max_preserve_newlines;\n                    }\n\n                    if (opt.preserve_newlines) {\n                        if (local_token.newlines > 1) {\n                            print_newline(false, preserve_statement_flags);\n                            for (var j = 1; j < newlines; j += 1) {\n                                print_newline(true, preserve_statement_flags);\n                            }\n                        }\n                    }\n                }\n\n            }\n\n            // we could use just string.split, but\n            // IE doesn't like returning empty strings\n            function split_linebreaks(s) {\n                //return s.split(/\\x0d\\x0a|\\x0a/);\n\n                s = s.replace(acorn.allLineBreaks, '\\n');\n                var out = [],\n                    idx = s.indexOf(\"\\n\");\n                while (idx !== -1) {\n                    out.push(s.substring(0, idx));\n                    s = s.substring(idx + 1);\n                    idx = s.indexOf(\"\\n\");\n                }\n                if (s.length) {\n                    out.push(s);\n                }\n                return out;\n            }\n\n            var newline_restricted_tokens = ['break', 'continue', 'return', 'throw'];\n\n            function allow_wrap_or_preserved_newline(force_linewrap) {\n                force_linewrap = (force_linewrap === undefined) ? false : force_linewrap;\n\n                // Never wrap the first token on a line\n                if (output.just_added_newline()) {\n                    return;\n                }\n\n                var shouldPreserveOrForce = (opt.preserve_newlines && current_token.wanted_newline) || force_linewrap;\n                var operatorLogicApplies = in_array(flags.last_text, Tokenizer.positionable_operators) || in_array(current_token.text, Tokenizer.positionable_operators);\n\n                if (operatorLogicApplies) {\n                    var shouldPrintOperatorNewline = (\n                            in_array(flags.last_text, Tokenizer.positionable_operators) &&\n                            in_array(opt.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)\n                        ) ||\n                        in_array(current_token.text, Tokenizer.positionable_operators);\n                    shouldPreserveOrForce = shouldPreserveOrForce && shouldPrintOperatorNewline;\n                }\n\n                if (shouldPreserveOrForce) {\n                    print_newline(false, true);\n                } else if (opt.wrap_line_length) {\n                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, newline_restricted_tokens)) {\n                        // These tokens should never have a newline inserted\n                        // between them and the following expression.\n                        return;\n                    }\n                    var proposed_line_length = output.current_line.get_character_count() + current_token.text.length +\n                        (output.space_before_token ? 1 : 0);\n                    if (proposed_line_length >= opt.wrap_line_length) {\n                        print_newline(false, true);\n                    }\n                }\n            }\n\n            function print_newline(force_newline, preserve_statement_flags) {\n                if (!preserve_statement_flags) {\n                    if (flags.last_text !== ';' && flags.last_text !== ',' && flags.last_text !== '=' && last_type !== 'TK_OPERATOR') {\n                        var next_token = get_token(1);\n                        while (flags.mode === MODE.Statement &&\n                            !(flags.if_block && next_token && next_token.type === 'TK_RESERVED' && next_token.text === 'else') &&\n                            !flags.do_block) {\n                            restore_mode();\n                        }\n                    }\n                }\n\n                if (output.add_new_line(force_newline)) {\n                    flags.multiline_frame = true;\n                }\n            }\n\n            function print_token_line_indentation() {\n                if (output.just_added_newline()) {\n                    if (opt.keep_array_indentation && is_array(flags.mode) && current_token.wanted_newline) {\n                        output.current_line.push(current_token.whitespace_before);\n                        output.space_before_token = false;\n                    } else if (output.set_indent(flags.indentation_level)) {\n                        flags.line_indent_level = flags.indentation_level;\n                    }\n                }\n            }\n\n            function print_token(printable_token) {\n                if (output.raw) {\n                    output.add_raw_token(current_token);\n                    return;\n                }\n\n                if (opt.comma_first && last_type === 'TK_COMMA' &&\n                    output.just_added_newline()) {\n                    if (output.previous_line.last() === ',') {\n                        var popped = output.previous_line.pop();\n                        // if the comma was already at the start of the line,\n                        // pull back onto that line and reprint the indentation\n                        if (output.previous_line.is_empty()) {\n                            output.previous_line.push(popped);\n                            output.trim(true);\n                            output.current_line.pop();\n                            output.trim();\n                        }\n\n                        // add the comma in front of the next token\n                        print_token_line_indentation();\n                        output.add_token(',');\n                        output.space_before_token = true;\n                    }\n                }\n\n                printable_token = printable_token || current_token.text;\n                print_token_line_indentation();\n                output.add_token(printable_token);\n            }\n\n            function indent() {\n                flags.indentation_level += 1;\n            }\n\n            function deindent() {\n                if (flags.indentation_level > 0 &&\n                    ((!flags.parent) || flags.indentation_level > flags.parent.indentation_level)) {\n                    flags.indentation_level -= 1;\n\n                }\n            }\n\n            function set_mode(mode) {\n                if (flags) {\n                    flag_store.push(flags);\n                    previous_flags = flags;\n                } else {\n                    previous_flags = create_flags(null, mode);\n                }\n\n                flags = create_flags(previous_flags, mode);\n            }\n\n            function is_array(mode) {\n                return mode === MODE.ArrayLiteral;\n            }\n\n            function is_expression(mode) {\n                return in_array(mode, [MODE.Expression, MODE.ForInitializer, MODE.Conditional]);\n            }\n\n            function restore_mode() {\n                if (flag_store.length > 0) {\n                    previous_flags = flags;\n                    flags = flag_store.pop();\n                    if (previous_flags.mode === MODE.Statement) {\n                        output.remove_redundant_indentation(previous_flags);\n                    }\n                }\n            }\n\n            function start_of_object_property() {\n                return flags.parent.mode === MODE.ObjectLiteral && flags.mode === MODE.Statement && (\n                    (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set'])));\n            }\n\n            function start_of_statement() {\n                if (\n                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') ||\n                    (last_type === 'TK_RESERVED' && flags.last_text === 'do') ||\n                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['return', 'throw']) && !current_token.wanted_newline) ||\n                    (last_type === 'TK_RESERVED' && flags.last_text === 'else' &&\n                        !(current_token.type === 'TK_RESERVED' && current_token.text === 'if' && !current_token.comments_before.length)) ||\n                    (last_type === 'TK_END_EXPR' && (previous_flags.mode === MODE.ForInitializer || previous_flags.mode === MODE.Conditional)) ||\n                    (last_type === 'TK_WORD' && flags.mode === MODE.BlockStatement &&\n                        !flags.in_case &&\n                        !(current_token.text === '--' || current_token.text === '++') &&\n                        last_last_text !== 'function' &&\n                        current_token.type !== 'TK_WORD' && current_token.type !== 'TK_RESERVED') ||\n                    (flags.mode === MODE.ObjectLiteral && (\n                        (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set']))))\n                ) {\n\n                    set_mode(MODE.Statement);\n                    indent();\n\n                    handle_whitespace_and_comments(current_token, true);\n\n                    // Issue #276:\n                    // If starting a new statement with [if, for, while, do], push to a new line.\n                    // if (a) if (b) if(c) d(); else e(); else f();\n                    if (!start_of_object_property()) {\n                        allow_wrap_or_preserved_newline(\n                            current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['do', 'for', 'if', 'while']));\n                    }\n\n                    return true;\n                }\n                return false;\n            }\n\n            function all_lines_start_with(lines, c) {\n                for (var i = 0; i < lines.length; i++) {\n                    var line = trim(lines[i]);\n                    if (line.charAt(0) !== c) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n\n            function each_line_matches_indent(lines, indent) {\n                var i = 0,\n                    len = lines.length,\n                    line;\n                for (; i < len; i++) {\n                    line = lines[i];\n                    // allow empty lines to pass through\n                    if (line && line.indexOf(indent) !== 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n\n            function is_special_word(word) {\n                return in_array(word, ['case', 'return', 'do', 'if', 'throw', 'else']);\n            }\n\n            function get_token(offset) {\n                var index = token_pos + (offset || 0);\n                return (index < 0 || index >= tokens.length) ? null : tokens[index];\n            }\n\n            function handle_start_expr() {\n                // The conditional starts the statement if appropriate.\n                if (!start_of_statement()) {\n                    handle_whitespace_and_comments(current_token);\n                }\n\n                var next_mode = MODE.Expression;\n                if (current_token.text === '[') {\n\n                    if (last_type === 'TK_WORD' || flags.last_text === ')') {\n                        // this is array index specifier, break immediately\n                        // a[x], fn()[x]\n                        if (last_type === 'TK_RESERVED' && in_array(flags.last_text, Tokenizer.line_starters)) {\n                            output.space_before_token = true;\n                        }\n                        set_mode(next_mode);\n                        print_token();\n                        indent();\n                        if (opt.space_in_paren) {\n                            output.space_before_token = true;\n                        }\n                        return;\n                    }\n\n                    next_mode = MODE.ArrayLiteral;\n                    if (is_array(flags.mode)) {\n                        if (flags.last_text === '[' ||\n                            (flags.last_text === ',' && (last_last_text === ']' || last_last_text === '}'))) {\n                            // ], [ goes to new line\n                            // }, [ goes to new line\n                            if (!opt.keep_array_indentation) {\n                                print_newline();\n                            }\n                        }\n                    }\n\n                } else {\n                    if (last_type === 'TK_RESERVED' && flags.last_text === 'for') {\n                        next_mode = MODE.ForInitializer;\n                    } else if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['if', 'while'])) {\n                        next_mode = MODE.Conditional;\n                    } else {\n                        // next_mode = MODE.Expression;\n                    }\n                }\n\n                if (flags.last_text === ';' || last_type === 'TK_START_BLOCK') {\n                    print_newline();\n                } else if (last_type === 'TK_END_EXPR' || last_type === 'TK_START_EXPR' || last_type === 'TK_END_BLOCK' || flags.last_text === '.') {\n                    // TODO: Consider whether forcing this is required.  Review failing tests when removed.\n                    allow_wrap_or_preserved_newline(current_token.wanted_newline);\n                    // do nothing on (( and )( and ][ and ]( and .(\n                } else if (!(last_type === 'TK_RESERVED' && current_token.text === '(') && last_type !== 'TK_WORD' && last_type !== 'TK_OPERATOR') {\n                    output.space_before_token = true;\n                } else if ((last_type === 'TK_RESERVED' && (flags.last_word === 'function' || flags.last_word === 'typeof')) ||\n                    (flags.last_text === '*' &&\n                        (in_array(last_last_text, ['function', 'yield']) ||\n                            (flags.mode === MODE.ObjectLiteral && in_array(last_last_text, ['{', ',']))))) {\n                    // function() vs function ()\n                    // yield*() vs yield* ()\n                    // function*() vs function* ()\n                    if (opt.space_after_anon_function) {\n                        output.space_before_token = true;\n                    }\n                } else if (last_type === 'TK_RESERVED' && (in_array(flags.last_text, Tokenizer.line_starters) || flags.last_text === 'catch')) {\n                    if (opt.space_before_conditional) {\n                        output.space_before_token = true;\n                    }\n                }\n\n                // Should be a space between await and an IIFE\n                if (current_token.text === '(' && last_type === 'TK_RESERVED' && flags.last_word === 'await') {\n                    output.space_before_token = true;\n                }\n\n                // Support of this kind of newline preservation.\n                // a = (b &&\n                //     (c || d));\n                if (current_token.text === '(') {\n                    if (last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {\n                        if (!start_of_object_property()) {\n                            allow_wrap_or_preserved_newline();\n                        }\n                    }\n                }\n\n                // Support preserving wrapped arrow function expressions\n                // a.b('c',\n                //     () => d.e\n                // )\n                if (current_token.text === '(' && last_type !== 'TK_WORD' && last_type !== 'TK_RESERVED') {\n                    allow_wrap_or_preserved_newline();\n                }\n\n                set_mode(next_mode);\n                print_token();\n                if (opt.space_in_paren) {\n                    output.space_before_token = true;\n                }\n\n                // In all cases, if we newline while inside an expression it should be indented.\n                indent();\n            }\n\n            function handle_end_expr() {\n                // statements inside expressions are not valid syntax, but...\n                // statements must all be closed when their container closes\n                while (flags.mode === MODE.Statement) {\n                    restore_mode();\n                }\n\n                handle_whitespace_and_comments(current_token);\n\n                if (flags.multiline_frame) {\n                    allow_wrap_or_preserved_newline(current_token.text === ']' && is_array(flags.mode) && !opt.keep_array_indentation);\n                }\n\n                if (opt.space_in_paren) {\n                    if (last_type === 'TK_START_EXPR' && !opt.space_in_empty_paren) {\n                        // () [] no inner space in empty parens like these, ever, ref #320\n                        output.trim();\n                        output.space_before_token = false;\n                    } else {\n                        output.space_before_token = true;\n                    }\n                }\n                if (current_token.text === ']' && opt.keep_array_indentation) {\n                    print_token();\n                    restore_mode();\n                } else {\n                    restore_mode();\n                    print_token();\n                }\n                output.remove_redundant_indentation(previous_flags);\n\n                // do {} while () // no statement required after\n                if (flags.do_while && previous_flags.mode === MODE.Conditional) {\n                    previous_flags.mode = MODE.Expression;\n                    flags.do_block = false;\n                    flags.do_while = false;\n\n                }\n            }\n\n            function handle_start_block() {\n                handle_whitespace_and_comments(current_token);\n\n                // Check if this is should be treated as a ObjectLiteral\n                var next_token = get_token(1);\n                var second_token = get_token(2);\n                if (second_token && (\n                        (in_array(second_token.text, [':', ',']) && in_array(next_token.type, ['TK_STRING', 'TK_WORD', 'TK_RESERVED'])) ||\n                        (in_array(next_token.text, ['get', 'set', '...']) && in_array(second_token.type, ['TK_WORD', 'TK_RESERVED']))\n                    )) {\n                    // We don't support TypeScript,but we didn't break it for a very long time.\n                    // We'll try to keep not breaking it.\n                    if (!in_array(last_last_text, ['class', 'interface'])) {\n                        set_mode(MODE.ObjectLiteral);\n                    } else {\n                        set_mode(MODE.BlockStatement);\n                    }\n                } else if (last_type === 'TK_OPERATOR' && flags.last_text === '=>') {\n                    // arrow function: (param1, paramN) => { statements }\n                    set_mode(MODE.BlockStatement);\n                } else if (in_array(last_type, ['TK_EQUALS', 'TK_START_EXPR', 'TK_COMMA', 'TK_OPERATOR']) ||\n                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['return', 'throw', 'import', 'default']))\n                ) {\n                    // Detecting shorthand function syntax is difficult by scanning forward,\n                    //     so check the surrounding context.\n                    // If the block is being returned, imported, export default, passed as arg,\n                    //     assigned with = or assigned in a nested object, treat as an ObjectLiteral.\n                    set_mode(MODE.ObjectLiteral);\n                } else {\n                    set_mode(MODE.BlockStatement);\n                }\n\n                var empty_braces = !next_token.comments_before.length && next_token.text === '}';\n                var empty_anonymous_function = empty_braces && flags.last_word === 'function' &&\n                    last_type === 'TK_END_EXPR';\n\n                if (opt.brace_preserve_inline) // check for inline, set inline_frame if so\n                {\n                    // search forward for a newline wanted inside this block\n                    var index = 0;\n                    var check_token = null;\n                    flags.inline_frame = true;\n                    do {\n                        index += 1;\n                        check_token = get_token(index);\n                        if (check_token.wanted_newline) {\n                            flags.inline_frame = false;\n                            break;\n                        }\n                    } while (check_token.type !== 'TK_EOF' &&\n                        !(check_token.type === 'TK_END_BLOCK' && check_token.opened === current_token));\n                }\n\n                if ((opt.brace_style === \"expand\" ||\n                        (opt.brace_style === \"none\" && current_token.wanted_newline)) &&\n                    !flags.inline_frame) {\n                    if (last_type !== 'TK_OPERATOR' &&\n                        (empty_anonymous_function ||\n                            last_type === 'TK_EQUALS' ||\n                            (last_type === 'TK_RESERVED' && is_special_word(flags.last_text) && flags.last_text !== 'else'))) {\n                        output.space_before_token = true;\n                    } else {\n                        print_newline(false, true);\n                    }\n                } else { // collapse || inline_frame\n                    if (is_array(previous_flags.mode) && (last_type === 'TK_START_EXPR' || last_type === 'TK_COMMA')) {\n                        if (last_type === 'TK_COMMA' || opt.space_in_paren) {\n                            output.space_before_token = true;\n                        }\n\n                        if (last_type === 'TK_COMMA' || (last_type === 'TK_START_EXPR' && flags.inline_frame)) {\n                            allow_wrap_or_preserved_newline();\n                            previous_flags.multiline_frame = previous_flags.multiline_frame || flags.multiline_frame;\n                            flags.multiline_frame = false;\n                        }\n                    }\n                    if (last_type !== 'TK_OPERATOR' && last_type !== 'TK_START_EXPR') {\n                        if (last_type === 'TK_START_BLOCK' && !flags.inline_frame) {\n                            print_newline();\n                        } else {\n                            output.space_before_token = true;\n                        }\n                    }\n                }\n                print_token();\n                indent();\n            }\n\n            function handle_end_block() {\n                // statements must all be closed when their container closes\n                handle_whitespace_and_comments(current_token);\n\n                while (flags.mode === MODE.Statement) {\n                    restore_mode();\n                }\n\n                var empty_braces = last_type === 'TK_START_BLOCK';\n\n                if (flags.inline_frame && !empty_braces) { // try inline_frame (only set if opt.braces-preserve-inline) first\n                    output.space_before_token = true;\n                } else if (opt.brace_style === \"expand\") {\n                    if (!empty_braces) {\n                        print_newline();\n                    }\n                } else {\n                    // skip {}\n                    if (!empty_braces) {\n                        if (is_array(flags.mode) && opt.keep_array_indentation) {\n                            // we REALLY need a newline here, but newliner would skip that\n                            opt.keep_array_indentation = false;\n                            print_newline();\n                            opt.keep_array_indentation = true;\n\n                        } else {\n                            print_newline();\n                        }\n                    }\n                }\n                restore_mode();\n                print_token();\n            }\n\n            function handle_word() {\n                if (current_token.type === 'TK_RESERVED') {\n                    if (in_array(current_token.text, ['set', 'get']) && flags.mode !== MODE.ObjectLiteral) {\n                        current_token.type = 'TK_WORD';\n                    } else if (in_array(current_token.text, ['as', 'from']) && !flags.import_block) {\n                        current_token.type = 'TK_WORD';\n                    } else if (flags.mode === MODE.ObjectLiteral) {\n                        var next_token = get_token(1);\n                        if (next_token.text === ':') {\n                            current_token.type = 'TK_WORD';\n                        }\n                    }\n                }\n\n                if (start_of_statement()) {\n                    // The conditional starts the statement if appropriate.\n                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') {\n                        flags.declaration_statement = true;\n                    }\n                } else if (current_token.wanted_newline && !is_expression(flags.mode) &&\n                    (last_type !== 'TK_OPERATOR' || (flags.last_text === '--' || flags.last_text === '++')) &&\n                    last_type !== 'TK_EQUALS' &&\n                    (opt.preserve_newlines || !(last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const', 'set', 'get'])))) {\n                    handle_whitespace_and_comments(current_token);\n                    print_newline();\n                } else {\n                    handle_whitespace_and_comments(current_token);\n                }\n\n                if (flags.do_block && !flags.do_while) {\n                    if (current_token.type === 'TK_RESERVED' && current_token.text === 'while') {\n                        // do {} ## while ()\n                        output.space_before_token = true;\n                        print_token();\n                        output.space_before_token = true;\n                        flags.do_while = true;\n                        return;\n                    } else {\n                        // do {} should always have while as the next word.\n                        // if we don't see the expected while, recover\n                        print_newline();\n                        flags.do_block = false;\n                    }\n                }\n\n                // if may be followed by else, or not\n                // Bare/inline ifs are tricky\n                // Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();\n                if (flags.if_block) {\n                    if (!flags.else_block && (current_token.type === 'TK_RESERVED' && current_token.text === 'else')) {\n                        flags.else_block = true;\n                    } else {\n                        while (flags.mode === MODE.Statement) {\n                            restore_mode();\n                        }\n                        flags.if_block = false;\n                        flags.else_block = false;\n                    }\n                }\n\n                if (current_token.type === 'TK_RESERVED' && (current_token.text === 'case' || (current_token.text === 'default' && flags.in_case_statement))) {\n                    print_newline();\n                    if (flags.case_body || opt.jslint_happy) {\n                        // switch cases following one another\n                        deindent();\n                        flags.case_body = false;\n                    }\n                    print_token();\n                    flags.in_case = true;\n                    flags.in_case_statement = true;\n                    return;\n                }\n\n                if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {\n                    if (!start_of_object_property()) {\n                        allow_wrap_or_preserved_newline();\n                    }\n                }\n\n                if (current_token.type === 'TK_RESERVED' && current_token.text === 'function') {\n                    if (in_array(flags.last_text, ['}', ';']) ||\n                        (output.just_added_newline() && !(in_array(flags.last_text, ['(', '[', '{', ':', '=', ',']) || last_type === 'TK_OPERATOR'))) {\n                        // make sure there is a nice clean space of at least one blank line\n                        // before a new function definition\n                        if (!output.just_added_blankline() && !current_token.comments_before.length) {\n                            print_newline();\n                            print_newline(true);\n                        }\n                    }\n                    if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD') {\n                        if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set', 'new', 'return', 'export', 'async'])) {\n                            output.space_before_token = true;\n                        } else if (last_type === 'TK_RESERVED' && flags.last_text === 'default' && last_last_text === 'export') {\n                            output.space_before_token = true;\n                        } else {\n                            print_newline();\n                        }\n                    } else if (last_type === 'TK_OPERATOR' || flags.last_text === '=') {\n                        // foo = function\n                        output.space_before_token = true;\n                    } else if (!flags.multiline_frame && (is_expression(flags.mode) || is_array(flags.mode))) {\n                        // (function\n                    } else {\n                        print_newline();\n                    }\n\n                    print_token();\n                    flags.last_word = current_token.text;\n                    return;\n                }\n\n                prefix = 'NONE';\n\n                if (last_type === 'TK_END_BLOCK') {\n\n                    if (previous_flags.inline_frame) {\n                        prefix = 'SPACE';\n                    } else if (!(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally', 'from']))) {\n                        prefix = 'NEWLINE';\n                    } else {\n                        if (opt.brace_style === \"expand\" ||\n                            opt.brace_style === \"end-expand\" ||\n                            (opt.brace_style === \"none\" && current_token.wanted_newline)) {\n                            prefix = 'NEWLINE';\n                        } else {\n                            prefix = 'SPACE';\n                            output.space_before_token = true;\n                        }\n                    }\n                } else if (last_type === 'TK_SEMICOLON' && flags.mode === MODE.BlockStatement) {\n                    // TODO: Should this be for STATEMENT as well?\n                    prefix = 'NEWLINE';\n                } else if (last_type === 'TK_SEMICOLON' && is_expression(flags.mode)) {\n                    prefix = 'SPACE';\n                } else if (last_type === 'TK_STRING') {\n                    prefix = 'NEWLINE';\n                } else if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' ||\n                    (flags.last_text === '*' &&\n                        (in_array(last_last_text, ['function', 'yield']) ||\n                            (flags.mode === MODE.ObjectLiteral && in_array(last_last_text, ['{', ',']))))) {\n                    prefix = 'SPACE';\n                } else if (last_type === 'TK_START_BLOCK') {\n                    if (flags.inline_frame) {\n                        prefix = 'SPACE';\n                    } else {\n                        prefix = 'NEWLINE';\n                    }\n                } else if (last_type === 'TK_END_EXPR') {\n                    output.space_before_token = true;\n                    prefix = 'NEWLINE';\n                }\n\n                if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {\n                    if (flags.inline_frame || flags.last_text === 'else' || flags.last_text === 'export') {\n                        prefix = 'SPACE';\n                    } else {\n                        prefix = 'NEWLINE';\n                    }\n\n                }\n\n                if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally'])) {\n                    if ((!(last_type === 'TK_END_BLOCK' && previous_flags.mode === MODE.BlockStatement) ||\n                            opt.brace_style === \"expand\" ||\n                            opt.brace_style === \"end-expand\" ||\n                            (opt.brace_style === \"none\" && current_token.wanted_newline)) &&\n                        !flags.inline_frame) {\n                        print_newline();\n                    } else {\n                        output.trim(true);\n                        var line = output.current_line;\n                        // If we trimmed and there's something other than a close block before us\n                        // put a newline back in.  Handles '} // comment' scenario.\n                        if (line.last() !== '}') {\n                            print_newline();\n                        }\n                        output.space_before_token = true;\n                    }\n                } else if (prefix === 'NEWLINE') {\n                    if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {\n                        // no newline between 'return nnn'\n                        output.space_before_token = true;\n                    } else if (last_type !== 'TK_END_EXPR') {\n                        if ((last_type !== 'TK_START_EXPR' || !(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['var', 'let', 'const']))) && flags.last_text !== ':') {\n                            // no need to force newline on 'var': for (var x = 0...)\n                            if (current_token.type === 'TK_RESERVED' && current_token.text === 'if' && flags.last_text === 'else') {\n                                // no newline for } else if {\n                                output.space_before_token = true;\n                            } else {\n                                print_newline();\n                            }\n                        }\n                    } else if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {\n                        print_newline();\n                    }\n                } else if (flags.multiline_frame && is_array(flags.mode) && flags.last_text === ',' && last_last_text === '}') {\n                    print_newline(); // }, in lists get a newline treatment\n                } else if (prefix === 'SPACE') {\n                    output.space_before_token = true;\n                }\n                print_token();\n                flags.last_word = current_token.text;\n\n                if (current_token.type === 'TK_RESERVED') {\n                    if (current_token.text === 'do') {\n                        flags.do_block = true;\n                    } else if (current_token.text === 'if') {\n                        flags.if_block = true;\n                    } else if (current_token.text === 'import') {\n                        flags.import_block = true;\n                    } else if (flags.import_block && current_token.type === 'TK_RESERVED' && current_token.text === 'from') {\n                        flags.import_block = false;\n                    }\n                }\n            }\n\n            function handle_semicolon() {\n                if (start_of_statement()) {\n                    // The conditional starts the statement if appropriate.\n                    // Semicolon can be the start (and end) of a statement\n                    output.space_before_token = false;\n                } else {\n                    handle_whitespace_and_comments(current_token);\n                }\n\n                var next_token = get_token(1);\n                while (flags.mode === MODE.Statement &&\n                    !(flags.if_block && next_token && next_token.type === 'TK_RESERVED' && next_token.text === 'else') &&\n                    !flags.do_block) {\n                    restore_mode();\n                }\n\n                // hacky but effective for the moment\n                if (flags.import_block) {\n                    flags.import_block = false;\n                }\n                print_token();\n            }\n\n            function handle_string() {\n                if (start_of_statement()) {\n                    // The conditional starts the statement if appropriate.\n                    // One difference - strings want at least a space before\n                    output.space_before_token = true;\n                } else {\n                    handle_whitespace_and_comments(current_token);\n                    if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' || flags.inline_frame) {\n                        output.space_before_token = true;\n                    } else if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {\n                        if (!start_of_object_property()) {\n                            allow_wrap_or_preserved_newline();\n                        }\n                    } else {\n                        print_newline();\n                    }\n                }\n                print_token();\n            }\n\n            function handle_equals() {\n                if (start_of_statement()) {\n                    // The conditional starts the statement if appropriate.\n                } else {\n                    handle_whitespace_and_comments(current_token);\n                }\n\n                if (flags.declaration_statement) {\n                    // just got an '=' in a var-line, different formatting/line-breaking, etc will now be done\n                    flags.declaration_assignment = true;\n                }\n                output.space_before_token = true;\n                print_token();\n                output.space_before_token = true;\n            }\n\n            function handle_comma() {\n                handle_whitespace_and_comments(current_token, true);\n\n                print_token();\n                output.space_before_token = true;\n                if (flags.declaration_statement) {\n                    if (is_expression(flags.parent.mode)) {\n                        // do not break on comma, for(var a = 1, b = 2)\n                        flags.declaration_assignment = false;\n                    }\n\n                    if (flags.declaration_assignment) {\n                        flags.declaration_assignment = false;\n                        print_newline(false, true);\n                    } else if (opt.comma_first) {\n                        // for comma-first, we want to allow a newline before the comma\n                        // to turn into a newline after the comma, which we will fixup later\n                        allow_wrap_or_preserved_newline();\n                    }\n                } else if (flags.mode === MODE.ObjectLiteral ||\n                    (flags.mode === MODE.Statement && flags.parent.mode === MODE.ObjectLiteral)) {\n                    if (flags.mode === MODE.Statement) {\n                        restore_mode();\n                    }\n\n                    if (!flags.inline_frame) {\n                        print_newline();\n                    }\n                } else if (opt.comma_first) {\n                    // EXPR or DO_BLOCK\n                    // for comma-first, we want to allow a newline before the comma\n                    // to turn into a newline after the comma, which we will fixup later\n                    allow_wrap_or_preserved_newline();\n                }\n            }\n\n            function handle_operator() {\n                var isGeneratorAsterisk = current_token.text === '*' &&\n                    ((last_type === 'TK_RESERVED' && in_array(flags.last_text, ['function', 'yield'])) ||\n                        (in_array(last_type, ['TK_START_BLOCK', 'TK_COMMA', 'TK_END_BLOCK', 'TK_SEMICOLON']))\n                    );\n                var isUnary = in_array(current_token.text, ['-', '+']) && (\n                    in_array(last_type, ['TK_START_BLOCK', 'TK_START_EXPR', 'TK_EQUALS', 'TK_OPERATOR']) ||\n                    in_array(flags.last_text, Tokenizer.line_starters) ||\n                    flags.last_text === ','\n                );\n\n                if (start_of_statement()) {\n                    // The conditional starts the statement if appropriate.\n                } else {\n                    var preserve_statement_flags = !isGeneratorAsterisk;\n                    handle_whitespace_and_comments(current_token, preserve_statement_flags);\n                }\n\n                if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {\n                    // \"return\" had a special handling in TK_WORD. Now we need to return the favor\n                    output.space_before_token = true;\n                    print_token();\n                    return;\n                }\n\n                // hack for actionscript's import .*;\n                if (current_token.text === '*' && last_type === 'TK_DOT') {\n                    print_token();\n                    return;\n                }\n\n                if (current_token.text === '::') {\n                    // no spaces around exotic namespacing syntax operator\n                    print_token();\n                    return;\n                }\n\n                // Allow line wrapping between operators when operator_position is\n                //   set to before or preserve\n                if (last_type === 'TK_OPERATOR' && in_array(opt.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)) {\n                    allow_wrap_or_preserved_newline();\n                }\n\n                if (current_token.text === ':' && flags.in_case) {\n                    flags.case_body = true;\n                    indent();\n                    print_token();\n                    print_newline();\n                    flags.in_case = false;\n                    return;\n                }\n\n                var space_before = true;\n                var space_after = true;\n                var in_ternary = false;\n                if (current_token.text === ':') {\n                    if (flags.ternary_depth === 0) {\n                        // Colon is invalid javascript outside of ternary and object, but do our best to guess what was meant.\n                        space_before = false;\n                    } else {\n                        flags.ternary_depth -= 1;\n                        in_ternary = true;\n                    }\n                } else if (current_token.text === '?') {\n                    flags.ternary_depth += 1;\n                }\n\n                // let's handle the operator_position option prior to any conflicting logic\n                if (!isUnary && !isGeneratorAsterisk && opt.preserve_newlines && in_array(current_token.text, Tokenizer.positionable_operators)) {\n                    var isColon = current_token.text === ':';\n                    var isTernaryColon = (isColon && in_ternary);\n                    var isOtherColon = (isColon && !in_ternary);\n\n                    switch (opt.operator_position) {\n                        case OPERATOR_POSITION.before_newline:\n                            // if the current token is : and it's not a ternary statement then we set space_before to false\n                            output.space_before_token = !isOtherColon;\n\n                            print_token();\n\n                            if (!isColon || isTernaryColon) {\n                                allow_wrap_or_preserved_newline();\n                            }\n\n                            output.space_before_token = true;\n                            return;\n\n                        case OPERATOR_POSITION.after_newline:\n                            // if the current token is anything but colon, or (via deduction) it's a colon and in a ternary statement,\n                            //   then print a newline.\n\n                            output.space_before_token = true;\n\n                            if (!isColon || isTernaryColon) {\n                                if (get_token(1).wanted_newline) {\n                                    print_newline(false, true);\n                                } else {\n                                    allow_wrap_or_preserved_newline();\n                                }\n                            } else {\n                                output.space_before_token = false;\n                            }\n\n                            print_token();\n\n                            output.space_before_token = true;\n                            return;\n\n                        case OPERATOR_POSITION.preserve_newline:\n                            if (!isOtherColon) {\n                                allow_wrap_or_preserved_newline();\n                            }\n\n                            // if we just added a newline, or the current token is : and it's not a ternary statement,\n                            //   then we set space_before to false\n                            space_before = !(output.just_added_newline() || isOtherColon);\n\n                            output.space_before_token = space_before;\n                            print_token();\n                            output.space_before_token = true;\n                            return;\n                    }\n                }\n\n                if (isGeneratorAsterisk) {\n                    allow_wrap_or_preserved_newline();\n                    space_before = false;\n                    var next_token = get_token(1);\n                    space_after = next_token && in_array(next_token.type, ['TK_WORD', 'TK_RESERVED']);\n                } else if (current_token.text === '...') {\n                    allow_wrap_or_preserved_newline();\n                    space_before = last_type === 'TK_START_BLOCK';\n                    space_after = false;\n                } else if (in_array(current_token.text, ['--', '++', '!', '~']) || isUnary) {\n                    // unary operators (and binary +/- pretending to be unary) special cases\n\n                    space_before = false;\n                    space_after = false;\n\n                    // http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1\n                    // if there is a newline between -- or ++ and anything else we should preserve it.\n                    if (current_token.wanted_newline && (current_token.text === '--' || current_token.text === '++')) {\n                        print_newline(false, true);\n                    }\n\n                    if (flags.last_text === ';' && is_expression(flags.mode)) {\n                        // for (;; ++i)\n                        //        ^^^\n                        space_before = true;\n                    }\n\n                    if (last_type === 'TK_RESERVED') {\n                        space_before = true;\n                    } else if (last_type === 'TK_END_EXPR') {\n                        space_before = !(flags.last_text === ']' && (current_token.text === '--' || current_token.text === '++'));\n                    } else if (last_type === 'TK_OPERATOR') {\n                        // a++ + ++b;\n                        // a - -b\n                        space_before = in_array(current_token.text, ['--', '-', '++', '+']) && in_array(flags.last_text, ['--', '-', '++', '+']);\n                        // + and - are not unary when preceeded by -- or ++ operator\n                        // a-- + b\n                        // a * +b\n                        // a - -b\n                        if (in_array(current_token.text, ['+', '-']) && in_array(flags.last_text, ['--', '++'])) {\n                            space_after = true;\n                        }\n                    }\n\n\n                    if (((flags.mode === MODE.BlockStatement && !flags.inline_frame) || flags.mode === MODE.Statement) &&\n                        (flags.last_text === '{' || flags.last_text === ';')) {\n                        // { foo; --i }\n                        // foo(); --bar;\n                        print_newline();\n                    }\n                }\n\n                output.space_before_token = output.space_before_token || space_before;\n                print_token();\n                output.space_before_token = space_after;\n            }\n\n            function handle_block_comment(preserve_statement_flags) {\n                if (output.raw) {\n                    output.add_raw_token(current_token);\n                    if (current_token.directives && current_token.directives.preserve === 'end') {\n                        // If we're testing the raw output behavior, do not allow a directive to turn it off.\n                        output.raw = opt.test_output_raw;\n                    }\n                    return;\n                }\n\n                if (current_token.directives) {\n                    print_newline(false, preserve_statement_flags);\n                    print_token();\n                    if (current_token.directives.preserve === 'start') {\n                        output.raw = true;\n                    }\n                    print_newline(false, true);\n                    return;\n                }\n\n                // inline block\n                if (!acorn.newline.test(current_token.text) && !current_token.wanted_newline) {\n                    output.space_before_token = true;\n                    print_token();\n                    output.space_before_token = true;\n                    return;\n                }\n\n                var lines = split_linebreaks(current_token.text);\n                var j; // iterator for this case\n                var javadoc = false;\n                var starless = false;\n                var lastIndent = current_token.whitespace_before;\n                var lastIndentLength = lastIndent.length;\n\n                // block comment starts with a new line\n                print_newline(false, preserve_statement_flags);\n                if (lines.length > 1) {\n                    javadoc = all_lines_start_with(lines.slice(1), '*');\n                    starless = each_line_matches_indent(lines.slice(1), lastIndent);\n                }\n\n                // first line always indented\n                print_token(lines[0]);\n                for (j = 1; j < lines.length; j++) {\n                    print_newline(false, true);\n                    if (javadoc) {\n                        // javadoc: reformat and re-indent\n                        print_token(' ' + ltrim(lines[j]));\n                    } else if (starless && lines[j].length > lastIndentLength) {\n                        // starless: re-indent non-empty content, avoiding trim\n                        print_token(lines[j].substring(lastIndentLength));\n                    } else {\n                        // normal comments output raw\n                        output.add_token(lines[j]);\n                    }\n                }\n\n                // for comments of more than one line, make sure there's a new line after\n                print_newline(false, preserve_statement_flags);\n            }\n\n            function handle_comment(preserve_statement_flags) {\n                if (current_token.wanted_newline) {\n                    print_newline(false, preserve_statement_flags);\n                } else {\n                    output.trim(true);\n                }\n\n                output.space_before_token = true;\n                print_token();\n                print_newline(false, preserve_statement_flags);\n            }\n\n            function handle_dot() {\n                if (start_of_statement()) {\n                    // The conditional starts the statement if appropriate.\n                } else {\n                    handle_whitespace_and_comments(current_token, true);\n                }\n\n                if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {\n                    output.space_before_token = true;\n                } else {\n                    // allow preserved newlines before dots in general\n                    // force newlines on dots after close paren when break_chained - for bar().baz()\n                    allow_wrap_or_preserved_newline(flags.last_text === ')' && opt.break_chained_methods);\n                }\n\n                print_token();\n            }\n\n            function handle_unknown(preserve_statement_flags) {\n                print_token();\n\n                if (current_token.text[current_token.text.length - 1] === '\\n') {\n                    print_newline(false, preserve_statement_flags);\n                }\n            }\n\n            function handle_eof() {\n                // Unwind any open statements\n                while (flags.mode === MODE.Statement) {\n                    restore_mode();\n                }\n                handle_whitespace_and_comments(current_token);\n            }\n        }\n\n\n        function OutputLine(parent) {\n            var _character_count = 0;\n            // use indent_count as a marker for lines that have preserved indentation\n            var _indent_count = -1;\n\n            var _items = [];\n            var _empty = true;\n\n            this.set_indent = function(level) {\n                _character_count = parent.baseIndentLength + level * parent.indent_length;\n                _indent_count = level;\n            };\n\n            this.get_character_count = function() {\n                return _character_count;\n            };\n\n            this.is_empty = function() {\n                return _empty;\n            };\n\n            this.last = function() {\n                if (!this._empty) {\n                    return _items[_items.length - 1];\n                } else {\n                    return null;\n                }\n            };\n\n            this.push = function(input) {\n                _items.push(input);\n                _character_count += input.length;\n                _empty = false;\n            };\n\n            this.pop = function() {\n                var item = null;\n                if (!_empty) {\n                    item = _items.pop();\n                    _character_count -= item.length;\n                    _empty = _items.length === 0;\n                }\n                return item;\n            };\n\n            this.remove_indent = function() {\n                if (_indent_count > 0) {\n                    _indent_count -= 1;\n                    _character_count -= parent.indent_length;\n                }\n            };\n\n            this.trim = function() {\n                while (this.last() === ' ') {\n                    _items.pop();\n                    _character_count -= 1;\n                }\n                _empty = _items.length === 0;\n            };\n\n            this.toString = function() {\n                var result = '';\n                if (!this._empty) {\n                    if (_indent_count >= 0) {\n                        result = parent.indent_cache[_indent_count];\n                    }\n                    result += _items.join('');\n                }\n                return result;\n            };\n        }\n\n        function Output(indent_string, baseIndentString) {\n            baseIndentString = baseIndentString || '';\n            this.indent_cache = [baseIndentString];\n            this.baseIndentLength = baseIndentString.length;\n            this.indent_length = indent_string.length;\n            this.raw = false;\n\n            var lines = [];\n            this.baseIndentString = baseIndentString;\n            this.indent_string = indent_string;\n            this.previous_line = null;\n            this.current_line = null;\n            this.space_before_token = false;\n\n            this.add_outputline = function() {\n                this.previous_line = this.current_line;\n                this.current_line = new OutputLine(this);\n                lines.push(this.current_line);\n            };\n\n            // initialize\n            this.add_outputline();\n\n\n            this.get_line_number = function() {\n                return lines.length;\n            };\n\n            // Using object instead of string to allow for later expansion of info about each line\n            this.add_new_line = function(force_newline) {\n                if (this.get_line_number() === 1 && this.just_added_newline()) {\n                    return false; // no newline on start of file\n                }\n\n                if (force_newline || !this.just_added_newline()) {\n                    if (!this.raw) {\n                        this.add_outputline();\n                    }\n                    return true;\n                }\n\n                return false;\n            };\n\n            this.get_code = function() {\n                var sweet_code = lines.join('\\n').replace(/[\\r\\n\\t ]+$/, '');\n                return sweet_code;\n            };\n\n            this.set_indent = function(level) {\n                // Never indent your first output indent at the start of the file\n                if (lines.length > 1) {\n                    while (level >= this.indent_cache.length) {\n                        this.indent_cache.push(this.indent_cache[this.indent_cache.length - 1] + this.indent_string);\n                    }\n\n                    this.current_line.set_indent(level);\n                    return true;\n                }\n                this.current_line.set_indent(0);\n                return false;\n            };\n\n            this.add_raw_token = function(token) {\n                for (var x = 0; x < token.newlines; x++) {\n                    this.add_outputline();\n                }\n                this.current_line.push(token.whitespace_before);\n                this.current_line.push(token.text);\n                this.space_before_token = false;\n            };\n\n            this.add_token = function(printable_token) {\n                this.add_space_before_token();\n                this.current_line.push(printable_token);\n            };\n\n            this.add_space_before_token = function() {\n                if (this.space_before_token && !this.just_added_newline()) {\n                    this.current_line.push(' ');\n                }\n                this.space_before_token = false;\n            };\n\n            this.remove_redundant_indentation = function(frame) {\n                // This implementation is effective but has some issues:\n                //     - can cause line wrap to happen too soon due to indent removal\n                //           after wrap points are calculated\n                // These issues are minor compared to ugly indentation.\n\n                if (frame.multiline_frame ||\n                    frame.mode === MODE.ForInitializer ||\n                    frame.mode === MODE.Conditional) {\n                    return;\n                }\n\n                // remove one indent from each line inside this section\n                var index = frame.start_line_index;\n\n                var output_length = lines.length;\n                while (index < output_length) {\n                    lines[index].remove_indent();\n                    index++;\n                }\n            };\n\n            this.trim = function(eat_newlines) {\n                eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;\n\n                this.current_line.trim(indent_string, baseIndentString);\n\n                while (eat_newlines && lines.length > 1 &&\n                    this.current_line.is_empty()) {\n                    lines.pop();\n                    this.current_line = lines[lines.length - 1];\n                    this.current_line.trim();\n                }\n\n                this.previous_line = lines.length > 1 ? lines[lines.length - 2] : null;\n            };\n\n            this.just_added_newline = function() {\n                return this.current_line.is_empty();\n            };\n\n            this.just_added_blankline = function() {\n                if (this.just_added_newline()) {\n                    if (lines.length === 1) {\n                        return true; // start of the file and newline = blank\n                    }\n\n                    var line = lines[lines.length - 2];\n                    return line.is_empty();\n                }\n                return false;\n            };\n        }\n\n        var InputScanner = function(input) {\n            var _input = input;\n            var _input_length = _input.length;\n            var _position = 0;\n\n            this.back = function() {\n                _position -= 1;\n            };\n\n            this.hasNext = function() {\n                return _position < _input_length;\n            };\n\n            this.next = function() {\n                var val = null;\n                if (this.hasNext()) {\n                    val = _input.charAt(_position);\n                    _position += 1;\n                }\n                return val;\n            };\n\n            this.peek = function(index) {\n                var val = null;\n                index = index || 0;\n                index += _position;\n                if (index >= 0 && index < _input_length) {\n                    val = _input.charAt(index);\n                }\n                return val;\n            };\n\n            this.peekCharCode = function(index) {\n                var val = 0;\n                index = index || 0;\n                index += _position;\n                if (index >= 0 && index < _input_length) {\n                    val = _input.charCodeAt(index);\n                }\n                return val;\n            };\n\n            this.test = function(pattern, index) {\n                index = index || 0;\n                pattern.lastIndex = _position + index;\n                return pattern.test(_input);\n            };\n\n            this.testChar = function(pattern, index) {\n                var val = this.peek(index);\n                return val !== null && pattern.test(val);\n            };\n\n            this.match = function(pattern) {\n                pattern.lastIndex = _position;\n                var pattern_match = pattern.exec(_input);\n                if (pattern_match && pattern_match.index === _position) {\n                    _position += pattern_match[0].length;\n                } else {\n                    pattern_match = null;\n                }\n                return pattern_match;\n            };\n        };\n\n        var Token = function(type, text, newlines, whitespace_before, parent) {\n            this.type = type;\n            this.text = text;\n\n            // comments_before are\n            // comments that have a new line before them\n            // and may or may not have a newline after\n            // this is a set of comments before\n            this.comments_before = /* inline comment*/ [];\n\n\n            this.comments_after = []; // no new line before and newline after\n            this.newlines = newlines || 0;\n            this.wanted_newline = newlines > 0;\n            this.whitespace_before = whitespace_before || '';\n            this.parent = parent || null;\n            this.opened = null;\n            this.directives = null;\n        };\n\n        function tokenizer(input_string, opts) {\n\n            var whitespace = \"\\n\\r\\t \".split('');\n            var digit = /[0-9]/;\n            var digit_bin = /[01]/;\n            var digit_oct = /[01234567]/;\n            var digit_hex = /[0123456789abcdefABCDEF]/;\n\n            this.positionable_operators = '!= !== % & && * ** + - / : < << <= == === > >= >> >>> ? ^ | ||'.split(' ');\n            var punct = this.positionable_operators.concat(\n                // non-positionable operators - these do not follow operator position settings\n                '! %= &= *= **= ++ += , -- -= /= :: <<= = => >>= >>>= ^= |= ~ ...'.split(' '));\n\n            // words which should always start on new line.\n            this.line_starters = 'continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export'.split(',');\n            var reserved_words = this.line_starters.concat(['do', 'in', 'of', 'else', 'get', 'set', 'new', 'catch', 'finally', 'typeof', 'yield', 'async', 'await', 'from', 'as']);\n\n            //  /* ... */ comment ends with nearest */ or end of file\n            var block_comment_pattern = /([\\s\\S]*?)((?:\\*\\/)|$)/g;\n\n            // comment ends just before nearest linefeed or end of file\n            var comment_pattern = /([^\\n\\r\\u2028\\u2029]*)/g;\n\n            var directives_block_pattern = /\\/\\* beautify( \\w+[:]\\w+)+ \\*\\//g;\n            var directive_pattern = / (\\w+)[:](\\w+)/g;\n            var directives_end_ignore_pattern = /([\\s\\S]*?)((?:\\/\\*\\sbeautify\\signore:end\\s\\*\\/)|$)/g;\n\n            var template_pattern = /((<\\?php|<\\?=)[\\s\\S]*?\\?>)|(<%[\\s\\S]*?%>)/g;\n\n            var n_newlines, whitespace_before_token, in_html_comment, tokens;\n            var input;\n\n            this.tokenize = function() {\n                input = new InputScanner(input_string);\n                in_html_comment = false;\n                tokens = [];\n\n                var next, last;\n                var token_values;\n                var open = null;\n                var open_stack = [];\n                var comments = [];\n\n                while (!(last && last.type === 'TK_EOF')) {\n                    token_values = tokenize_next();\n                    next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);\n                    while (next.type === 'TK_COMMENT' || next.type === 'TK_BLOCK_COMMENT' || next.type === 'TK_UNKNOWN') {\n                        if (next.type === 'TK_BLOCK_COMMENT') {\n                            next.directives = token_values[2];\n                        }\n                        comments.push(next);\n                        token_values = tokenize_next();\n                        next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);\n                    }\n\n                    if (comments.length) {\n                        next.comments_before = comments;\n                        comments = [];\n                    }\n\n                    if (next.type === 'TK_START_BLOCK' || next.type === 'TK_START_EXPR') {\n                        next.parent = last;\n                        open_stack.push(open);\n                        open = next;\n                    } else if ((next.type === 'TK_END_BLOCK' || next.type === 'TK_END_EXPR') &&\n                        (open && (\n                            (next.text === ']' && open.text === '[') ||\n                            (next.text === ')' && open.text === '(') ||\n                            (next.text === '}' && open.text === '{')))) {\n                        next.parent = open.parent;\n                        next.opened = open;\n\n                        open = open_stack.pop();\n                    }\n\n                    tokens.push(next);\n                    last = next;\n                }\n\n                return tokens;\n            };\n\n            function get_directives(text) {\n                if (!text.match(directives_block_pattern)) {\n                    return null;\n                }\n\n                var directives = {};\n                directive_pattern.lastIndex = 0;\n                var directive_match = directive_pattern.exec(text);\n\n                while (directive_match) {\n                    directives[directive_match[1]] = directive_match[2];\n                    directive_match = directive_pattern.exec(text);\n                }\n\n                return directives;\n            }\n\n            function tokenize_next() {\n                var resulting_string;\n                var whitespace_on_this_line = [];\n\n                n_newlines = 0;\n                whitespace_before_token = '';\n\n                var c = input.next();\n\n                if (c === null) {\n                    return ['', 'TK_EOF'];\n                }\n\n                var last_token;\n                if (tokens.length) {\n                    last_token = tokens[tokens.length - 1];\n                } else {\n                    // For the sake of tokenizing we can pretend that there was on open brace to start\n                    last_token = new Token('TK_START_BLOCK', '{');\n                }\n\n                while (in_array(c, whitespace)) {\n\n                    if (acorn.newline.test(c)) {\n                        if (!(c === '\\n' && input.peek(-2) === '\\r')) {\n                            n_newlines += 1;\n                            whitespace_on_this_line = [];\n                        }\n                    } else {\n                        whitespace_on_this_line.push(c);\n                    }\n\n                    c = input.next();\n\n                    if (c === null) {\n                        return ['', 'TK_EOF'];\n                    }\n                }\n\n                if (whitespace_on_this_line.length) {\n                    whitespace_before_token = whitespace_on_this_line.join('');\n                }\n\n                if (digit.test(c) || (c === '.' && input.testChar(digit))) {\n                    var allow_decimal = true;\n                    var allow_e = true;\n                    var local_digit = digit;\n\n                    if (c === '0' && input.testChar(/[XxOoBb]/)) {\n                        // switch to hex/oct/bin number, no decimal or e, just hex/oct/bin digits\n                        allow_decimal = false;\n                        allow_e = false;\n                        if (input.testChar(/[Bb]/)) {\n                            local_digit = digit_bin;\n                        } else if (input.testChar(/[Oo]/)) {\n                            local_digit = digit_oct;\n                        } else {\n                            local_digit = digit_hex;\n                        }\n                        c += input.next();\n                    } else if (c === '.') {\n                        // Already have a decimal for this literal, don't allow another\n                        allow_decimal = false;\n                    } else {\n                        // we know this first loop will run.  It keeps the logic simpler.\n                        c = '';\n                        input.back();\n                    }\n\n                    // Add the digits\n                    while (input.testChar(local_digit)) {\n                        c += input.next();\n\n                        if (allow_decimal && input.peek() === '.') {\n                            c += input.next();\n                            allow_decimal = false;\n                        }\n\n                        // a = 1.e-7 is valid, so we test for . then e in one loop\n                        if (allow_e && input.testChar(/[Ee]/)) {\n                            c += input.next();\n\n                            if (input.testChar(/[+-]/)) {\n                                c += input.next();\n                            }\n\n                            allow_e = false;\n                            allow_decimal = false;\n                        }\n                    }\n\n                    return [c, 'TK_WORD'];\n                }\n\n                if (acorn.isIdentifierStart(input.peekCharCode(-1))) {\n                    if (input.hasNext()) {\n                        while (acorn.isIdentifierChar(input.peekCharCode())) {\n                            c += input.next();\n                            if (!input.hasNext()) {\n                                break;\n                            }\n                        }\n                    }\n\n                    if (!(last_token.type === 'TK_DOT' ||\n                            (last_token.type === 'TK_RESERVED' && in_array(last_token.text, ['set', 'get']))) &&\n                        in_array(c, reserved_words)) {\n                        if (c === 'in' || c === 'of') { // hack for 'in' and 'of' operators\n                            return [c, 'TK_OPERATOR'];\n                        }\n                        return [c, 'TK_RESERVED'];\n                    }\n\n                    return [c, 'TK_WORD'];\n                }\n\n                if (c === '(' || c === '[') {\n                    return [c, 'TK_START_EXPR'];\n                }\n\n                if (c === ')' || c === ']') {\n                    return [c, 'TK_END_EXPR'];\n                }\n\n                if (c === '{') {\n                    return [c, 'TK_START_BLOCK'];\n                }\n\n                if (c === '}') {\n                    return [c, 'TK_END_BLOCK'];\n                }\n\n                if (c === ';') {\n                    return [c, 'TK_SEMICOLON'];\n                }\n\n                if (c === '/') {\n                    var comment = '';\n                    var comment_match;\n                    // peek for comment /* ... */\n                    if (input.peek() === '*') {\n                        input.next();\n                        comment_match = input.match(block_comment_pattern);\n                        comment = '/*' + comment_match[0];\n                        var directives = get_directives(comment);\n                        if (directives && directives.ignore === 'start') {\n                            comment_match = input.match(directives_end_ignore_pattern);\n                            comment += comment_match[0];\n                        }\n                        comment = comment.replace(acorn.allLineBreaks, '\\n');\n                        return [comment, 'TK_BLOCK_COMMENT', directives];\n                    }\n                    // peek for comment // ...\n                    if (input.peek() === '/') {\n                        input.next();\n                        comment_match = input.match(comment_pattern);\n                        comment = '//' + comment_match[0];\n                        return [comment, 'TK_COMMENT'];\n                    }\n\n                }\n\n                var startXmlRegExp = /<()([-a-zA-Z:0-9_.]+|{[\\s\\S]+?}|!\\[CDATA\\[[\\s\\S]*?\\]\\])(\\s+{[\\s\\S]+?}|\\s+[-a-zA-Z:0-9_.]+|\\s+[-a-zA-Z:0-9_.]+\\s*=\\s*('[^']*'|\"[^\"]*\"|{[\\s\\S]+?}))*\\s*(\\/?)\\s*>/g;\n\n                if (c === '`' || c === \"'\" || c === '\"' || // string\n                    (\n                        (c === '/') || // regexp\n                        (opts.e4x && c === \"<\" && input.test(startXmlRegExp, -1)) // xml\n                    ) && ( // regex and xml can only appear in specific locations during parsing\n                        (last_token.type === 'TK_RESERVED' && in_array(last_token.text, ['return', 'case', 'throw', 'else', 'do', 'typeof', 'yield'])) ||\n                        (last_token.type === 'TK_END_EXPR' && last_token.text === ')' &&\n                            last_token.parent && last_token.parent.type === 'TK_RESERVED' && in_array(last_token.parent.text, ['if', 'while', 'for'])) ||\n                        (in_array(last_token.type, ['TK_COMMENT', 'TK_START_EXPR', 'TK_START_BLOCK',\n                            'TK_END_BLOCK', 'TK_OPERATOR', 'TK_EQUALS', 'TK_EOF', 'TK_SEMICOLON', 'TK_COMMA'\n                        ]))\n                    )) {\n\n                    var sep = c,\n                        esc = false,\n                        has_char_escapes = false;\n\n                    resulting_string = c;\n\n                    if (sep === '/') {\n                        //\n                        // handle regexp\n                        //\n                        var in_char_class = false;\n                        while (input.hasNext() &&\n                            ((esc || in_char_class || input.peek() !== sep) &&\n                                !input.testChar(acorn.newline))) {\n                            resulting_string += input.peek();\n                            if (!esc) {\n                                esc = input.peek() === '\\\\';\n                                if (input.peek() === '[') {\n                                    in_char_class = true;\n                                } else if (input.peek() === ']') {\n                                    in_char_class = false;\n                                }\n                            } else {\n                                esc = false;\n                            }\n                            input.next();\n                        }\n                    } else if (opts.e4x && sep === '<') {\n                        //\n                        // handle e4x xml literals\n                        //\n\n                        var xmlRegExp = /[\\s\\S]*?<(\\/?)([-a-zA-Z:0-9_.]+|{[\\s\\S]+?}|!\\[CDATA\\[[\\s\\S]*?\\]\\])(\\s+{[\\s\\S]+?}|\\s+[-a-zA-Z:0-9_.]+|\\s+[-a-zA-Z:0-9_.]+\\s*=\\s*('[^']*'|\"[^\"]*\"|{[\\s\\S]+?}))*\\s*(\\/?)\\s*>/g;\n                        input.back();\n                        var xmlStr = '';\n                        var match = input.match(startXmlRegExp);\n                        if (match) {\n                            // Trim root tag to attempt to\n                            var rootTag = match[2].replace(/^{\\s+/, '{').replace(/\\s+}$/, '}');\n                            var isCurlyRoot = rootTag.indexOf('{') === 0;\n                            var depth = 0;\n                            while (match) {\n                                var isEndTag = !!match[1];\n                                var tagName = match[2];\n                                var isSingletonTag = (!!match[match.length - 1]) || (tagName.slice(0, 8) === \"![CDATA[\");\n                                if (!isSingletonTag &&\n                                    (tagName === rootTag || (isCurlyRoot && tagName.replace(/^{\\s+/, '{').replace(/\\s+}$/, '}')))) {\n                                    if (isEndTag) {\n                                        --depth;\n                                    } else {\n                                        ++depth;\n                                    }\n                                }\n                                xmlStr += match[0];\n                                if (depth <= 0) {\n                                    break;\n                                }\n                                match = input.match(xmlRegExp);\n                            }\n                            // if we didn't close correctly, keep unformatted.\n                            if (!match) {\n                                xmlStr += input.match(/[\\s\\S]*/g)[0];\n                            }\n                            xmlStr = xmlStr.replace(acorn.allLineBreaks, '\\n');\n                            return [xmlStr, \"TK_STRING\"];\n                        }\n                    } else {\n                        //\n                        // handle string\n                        //\n                        var parse_string = function(delimiter, allow_unescaped_newlines, start_sub) {\n                            // Template strings can travers lines without escape characters.\n                            // Other strings cannot\n                            var current_char;\n                            while (input.hasNext()) {\n                                current_char = input.peek();\n                                if (!(esc || (current_char !== delimiter &&\n                                        (allow_unescaped_newlines || !acorn.newline.test(current_char))))) {\n                                    break;\n                                }\n\n                                // Handle \\r\\n linebreaks after escapes or in template strings\n                                if ((esc || allow_unescaped_newlines) && acorn.newline.test(current_char)) {\n                                    if (current_char === '\\r' && input.peek(1) === '\\n') {\n                                        input.next();\n                                        current_char = input.peek();\n                                    }\n                                    resulting_string += '\\n';\n                                } else {\n                                    resulting_string += current_char;\n                                }\n\n                                if (esc) {\n                                    if (current_char === 'x' || current_char === 'u') {\n                                        has_char_escapes = true;\n                                    }\n                                    esc = false;\n                                } else {\n                                    esc = current_char === '\\\\';\n                                }\n\n                                input.next();\n\n                                if (start_sub && resulting_string.indexOf(start_sub, resulting_string.length - start_sub.length) !== -1) {\n                                    if (delimiter === '`') {\n                                        parse_string('}', allow_unescaped_newlines, '`');\n                                    } else {\n                                        parse_string('`', allow_unescaped_newlines, '${');\n                                    }\n\n                                    if (input.hasNext()) {\n                                        resulting_string += input.next();\n                                    }\n                                }\n                            }\n                        };\n\n                        if (sep === '`') {\n                            parse_string('`', true, '${');\n                        } else {\n                            parse_string(sep);\n                        }\n                    }\n\n                    if (has_char_escapes && opts.unescape_strings) {\n                        resulting_string = unescape_string(resulting_string);\n                    }\n\n                    if (input.peek() === sep) {\n                        resulting_string += sep;\n                        input.next();\n\n                        if (sep === '/') {\n                            // regexps may have modifiers /regexp/MOD , so fetch those, too\n                            // Only [gim] are valid, but if the user puts in garbage, do what we can to take it.\n                            while (input.hasNext() && acorn.isIdentifierStart(input.peekCharCode())) {\n                                resulting_string += input.next();\n                            }\n                        }\n                    }\n                    return [resulting_string, 'TK_STRING'];\n                }\n\n                if (c === '#') {\n\n                    if (tokens.length === 0 && input.peek() === '!') {\n                        // shebang\n                        resulting_string = c;\n                        while (input.hasNext() && c !== '\\n') {\n                            c = input.next();\n                            resulting_string += c;\n                        }\n                        return [trim(resulting_string) + '\\n', 'TK_UNKNOWN'];\n                    }\n\n\n\n                    // Spidermonkey-specific sharp variables for circular references\n                    // https://developer.mozilla.org/En/Sharp_variables_in_JavaScript\n                    // http://mxr.mozilla.org/mozilla-central/source/js/src/jsscan.cpp around line 1935\n                    var sharp = '#';\n                    if (input.hasNext() && input.testChar(digit)) {\n                        do {\n                            c = input.next();\n                            sharp += c;\n                        } while (input.hasNext() && c !== '#' && c !== '=');\n                        if (c === '#') {\n                            //\n                        } else if (input.peek() === '[' && input.peek(1) === ']') {\n                            sharp += '[]';\n                            input.next();\n                            input.next();\n                        } else if (input.peek() === '{' && input.peek(1) === '}') {\n                            sharp += '{}';\n                            input.next();\n                            input.next();\n                        }\n                        return [sharp, 'TK_WORD'];\n                    }\n                }\n\n                if (c === '<' && (input.peek() === '?' || input.peek() === '%')) {\n                    input.back();\n                    var template_match = input.match(template_pattern);\n                    if (template_match) {\n                        c = template_match[0];\n                        c = c.replace(acorn.allLineBreaks, '\\n');\n                        return [c, 'TK_STRING'];\n                    }\n                }\n\n                if (c === '<' && input.match(/\\!--/g)) {\n                    c = '<!--';\n                    while (input.hasNext() && !input.testChar(acorn.newline)) {\n                        c += input.next();\n                    }\n                    in_html_comment = true;\n                    return [c, 'TK_COMMENT'];\n                }\n\n                if (c === '-' && in_html_comment && input.match(/->/g)) {\n                    in_html_comment = false;\n                    return ['-->', 'TK_COMMENT'];\n                }\n\n                if (c === '.') {\n                    if (input.peek() === '.' && input.peek(1) === '.') {\n                        c += input.next() + input.next();\n                        return [c, 'TK_OPERATOR'];\n                    }\n                    return [c, 'TK_DOT'];\n                }\n\n                if (in_array(c, punct)) {\n                    while (input.hasNext() && in_array(c + input.peek(), punct)) {\n                        c += input.next();\n                        if (!input.hasNext()) {\n                            break;\n                        }\n                    }\n\n                    if (c === ',') {\n                        return [c, 'TK_COMMA'];\n                    } else if (c === '=') {\n                        return [c, 'TK_EQUALS'];\n                    } else {\n                        return [c, 'TK_OPERATOR'];\n                    }\n                }\n\n                return [c, 'TK_UNKNOWN'];\n            }\n\n\n            function unescape_string(s) {\n                // You think that a regex would work for this\n                // return s.replace(/\\\\x([0-9a-f]{2})/gi, function(match, val) {\n                //         return String.fromCharCode(parseInt(val, 16));\n                //     })\n                // However, dealing with '\\xff', '\\\\xff', '\\\\\\xff' makes this more fun.\n                var out = '',\n                    escaped = 0;\n\n                var input_scan = new InputScanner(s);\n                var matched = null;\n\n                while (input_scan.hasNext()) {\n                    // Keep any whitespace, non-slash characters\n                    // also keep slash pairs.\n                    matched = input_scan.match(/([\\s]|[^\\\\]|\\\\\\\\)+/g);\n\n                    if (matched) {\n                        out += matched[0];\n                    }\n\n                    if (input_scan.peek() === '\\\\') {\n                        input_scan.next();\n                        if (input_scan.peek() === 'x') {\n                            matched = input_scan.match(/x([0-9A-Fa-f]{2})/g);\n                        } else if (input_scan.peek() === 'u') {\n                            matched = input_scan.match(/u([0-9A-Fa-f]{4})/g);\n                        } else {\n                            out += '\\\\';\n                            if (input_scan.hasNext()) {\n                                out += input_scan.next();\n                            }\n                            continue;\n                        }\n\n                        // If there's some error decoding, return the original string\n                        if (!matched) {\n                            return s;\n                        }\n\n                        escaped = parseInt(matched[1], 16);\n\n                        if (escaped > 0x7e && escaped <= 0xff && matched[0].indexOf('x') === 0) {\n                            // we bail out on \\x7f..\\xff,\n                            // leaving whole string escaped,\n                            // as it's probably completely binary\n                            return s;\n                        } else if (escaped >= 0x00 && escaped < 0x20) {\n                            // leave 0x00...0x1f escaped\n                            out += '\\\\' + matched[0];\n                            continue;\n                        } else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {\n                            // single-quote, apostrophe, backslash - escape these\n                            out += '\\\\' + String.fromCharCode(escaped);\n                        } else {\n                            out += String.fromCharCode(escaped);\n                        }\n                    }\n                }\n\n                return out;\n            }\n        }\n\n        var beautifier = new Beautifier(js_source_text, options);\n        return beautifier.beautify();\n\n    }\n\n    if (typeof define === \"function\" && define.amd) {\n        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )\n        define([], function() {\n            return { js_beautify: js_beautify };\n        });\n    } else if (typeof exports !== \"undefined\") {\n        // Add support for CommonJS. Just put this file somewhere on your require.paths\n        // and you will be able to `var js_beautify = require(\"beautify\").js_beautify`.\n        exports.js_beautify = js_beautify;\n    } else if (typeof window !== \"undefined\") {\n        // If we're running a web page and don't have either of the above, add our one global\n        window.js_beautify = js_beautify;\n    } else if (typeof global !== \"undefined\") {\n        // If we don't even have window, try global.\n        global.js_beautify = js_beautify;\n    }\n\n}());","map":{"mappings":[{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":353,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":354,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":355,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":356,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":357,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":358,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":359,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":360,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":361,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":362,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":363,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":364,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":365,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":366,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":367,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":368,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":369,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":370,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":371,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":372,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":373,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":374,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":375,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":376,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":377,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":378,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":379,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":380,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":381,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":382,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":383,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":384,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":385,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":386,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":387,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":388,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":389,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":390,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":391,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":392,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":393,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":394,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":395,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":396,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":397,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":398,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":399,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":400,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":401,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":402,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":403,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":404,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":405,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":406,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":407,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":408,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":409,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":410,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":411,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":412,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":413,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":414,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":415,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":416,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":417,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":418,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":419,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":420,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":421,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":422,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":423,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":424,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":425,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":426,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":427,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":428,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":429,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":430,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":431,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":432,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":433,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":434,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":435,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":436,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":437,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":438,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":439,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":440,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":441,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":442,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":443,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":444,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":445,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":446,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":447,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":448,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":449,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":450,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":451,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":452,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":453,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":454,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":455,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":456,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":457,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":458,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":459,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":460,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":461,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":462,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":463,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":464,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":465,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":466,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":467,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":468,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":469,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":470,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":471,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":472,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":473,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":474,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":475,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":476,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":477,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":478,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":479,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":480,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":481,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":482,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":483,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":484,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":485,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":486,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":487,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":488,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":489,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":490,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":491,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":492,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":493,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":494,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":495,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":496,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":497,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":498,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":499,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":500,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":501,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":502,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":503,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":504,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":505,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":506,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":507,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":508,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":509,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":510,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":511,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":512,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":513,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":514,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":515,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":516,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":517,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":518,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":519,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":520,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":521,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":522,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":523,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":524,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":525,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":526,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":527,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":528,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":529,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":530,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":531,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":532,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":533,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":534,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":535,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":536,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":537,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":538,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":539,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":540,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":541,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":542,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":543,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":544,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":545,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":546,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":547,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":548,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":549,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":550,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":551,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":552,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":553,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":554,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":555,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":556,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":557,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":558,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":559,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":560,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":561,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":562,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":563,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":564,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":565,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":566,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":567,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":568,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":569,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":570,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":571,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":572,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":573,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":574,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":575,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":576,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":577,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":578,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":579,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":580,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":581,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":582,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":583,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":584,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":585,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":586,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":587,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":588,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":589,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":590,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":591,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":592,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":593,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":594,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":595,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":596,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":597,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":598,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":599,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":600,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":601,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":602,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":603,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":604,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":605,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":606,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":607,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":608,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":609,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":610,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":611,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":612,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":613,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":614,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":615,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":616,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":617,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":618,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":619,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":620,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":621,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":622,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":623,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":624,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":625,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":626,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":627,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":628,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":629,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":630,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":631,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":632,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":633,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":634,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":635,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":636,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":637,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":638,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":639,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":640,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":641,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":642,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":643,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":644,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":645,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":646,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":647,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":648,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":649,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":650,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":651,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":652,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":653,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":654,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":655,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":656,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":657,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":658,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":659,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":660,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":661,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":662,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":663,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":664,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":665,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":666,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":667,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":668,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":669,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":670,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":671,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":672,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":673,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":674,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":675,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":676,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":677,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":678,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":679,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":680,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":681,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":682,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":683,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":684,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":685,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":686,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":687,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":688,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":689,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":690,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":691,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":692,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":693,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":694,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":695,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":696,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":697,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":698,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":699,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":700,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":701,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":702,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":703,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":704,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":705,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":706,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":707,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":708,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":709,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":710,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":711,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":712,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":713,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":714,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":715,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":716,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":717,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":718,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":719,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":720,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":721,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":722,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":723,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":724,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":725,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":726,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":727,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":728,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":729,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":730,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":731,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":732,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":733,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":734,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":735,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":736,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":737,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":738,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":739,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":740,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":741,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":742,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":743,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":744,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":745,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":746,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":747,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":748,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":749,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":750,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":751,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":752,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":753,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":754,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":755,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":756,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":757,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":758,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":759,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":760,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":761,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":762,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":763,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":764,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":765,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":766,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":767,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":768,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":769,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":770,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":771,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":772,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":773,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":774,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":775,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":776,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":777,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":778,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":779,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":780,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":781,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":782,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":783,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":784,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":785,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":786,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":787,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":788,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":789,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":790,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":791,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":792,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":793,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":794,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":795,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":796,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":797,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":798,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":799,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":800,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":801,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":802,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":803,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":804,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":805,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":806,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":807,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":808,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":809,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":810,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":811,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":812,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":813,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":814,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":815,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":816,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":817,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":818,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":819,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":820,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":821,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":822,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":823,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":824,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":825,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":826,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":827,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":828,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":829,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":830,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":831,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":832,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":833,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":834,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":835,"column":0},"generated":{"line":836,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":836,"column":0},"generated":{"line":837,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":837,"column":0},"generated":{"line":838,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":838,"column":0},"generated":{"line":839,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":839,"column":0},"generated":{"line":840,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":840,"column":0},"generated":{"line":841,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":841,"column":0},"generated":{"line":842,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":842,"column":0},"generated":{"line":843,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":843,"column":0},"generated":{"line":844,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":844,"column":0},"generated":{"line":845,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":845,"column":0},"generated":{"line":846,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":846,"column":0},"generated":{"line":847,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":847,"column":0},"generated":{"line":848,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":848,"column":0},"generated":{"line":849,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":849,"column":0},"generated":{"line":850,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":850,"column":0},"generated":{"line":851,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":851,"column":0},"generated":{"line":852,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":852,"column":0},"generated":{"line":853,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":853,"column":0},"generated":{"line":854,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":854,"column":0},"generated":{"line":855,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":855,"column":0},"generated":{"line":856,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":856,"column":0},"generated":{"line":857,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":857,"column":0},"generated":{"line":858,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":858,"column":0},"generated":{"line":859,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":859,"column":0},"generated":{"line":860,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":860,"column":0},"generated":{"line":861,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":861,"column":0},"generated":{"line":862,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":862,"column":0},"generated":{"line":863,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":863,"column":0},"generated":{"line":864,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":864,"column":0},"generated":{"line":865,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":865,"column":0},"generated":{"line":866,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":866,"column":0},"generated":{"line":867,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":867,"column":0},"generated":{"line":868,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":868,"column":0},"generated":{"line":869,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":869,"column":0},"generated":{"line":870,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":870,"column":0},"generated":{"line":871,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":871,"column":0},"generated":{"line":872,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":872,"column":0},"generated":{"line":873,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":873,"column":0},"generated":{"line":874,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":874,"column":0},"generated":{"line":875,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":875,"column":0},"generated":{"line":876,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":876,"column":0},"generated":{"line":877,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":877,"column":0},"generated":{"line":878,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":878,"column":0},"generated":{"line":879,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":879,"column":0},"generated":{"line":880,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":880,"column":0},"generated":{"line":881,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":881,"column":0},"generated":{"line":882,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":882,"column":0},"generated":{"line":883,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":883,"column":0},"generated":{"line":884,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":884,"column":0},"generated":{"line":885,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":885,"column":0},"generated":{"line":886,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":886,"column":0},"generated":{"line":887,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":887,"column":0},"generated":{"line":888,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":888,"column":0},"generated":{"line":889,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":889,"column":0},"generated":{"line":890,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":890,"column":0},"generated":{"line":891,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":891,"column":0},"generated":{"line":892,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":892,"column":0},"generated":{"line":893,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":893,"column":0},"generated":{"line":894,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":894,"column":0},"generated":{"line":895,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":895,"column":0},"generated":{"line":896,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":896,"column":0},"generated":{"line":897,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":897,"column":0},"generated":{"line":898,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":898,"column":0},"generated":{"line":899,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":899,"column":0},"generated":{"line":900,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":900,"column":0},"generated":{"line":901,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":901,"column":0},"generated":{"line":902,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":902,"column":0},"generated":{"line":903,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":903,"column":0},"generated":{"line":904,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":904,"column":0},"generated":{"line":905,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":905,"column":0},"generated":{"line":906,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":906,"column":0},"generated":{"line":907,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":907,"column":0},"generated":{"line":908,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":908,"column":0},"generated":{"line":909,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":909,"column":0},"generated":{"line":910,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":910,"column":0},"generated":{"line":911,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":911,"column":0},"generated":{"line":912,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":912,"column":0},"generated":{"line":913,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":913,"column":0},"generated":{"line":914,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":914,"column":0},"generated":{"line":915,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":915,"column":0},"generated":{"line":916,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":916,"column":0},"generated":{"line":917,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":917,"column":0},"generated":{"line":918,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":918,"column":0},"generated":{"line":919,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":919,"column":0},"generated":{"line":920,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":920,"column":0},"generated":{"line":921,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":921,"column":0},"generated":{"line":922,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":922,"column":0},"generated":{"line":923,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":923,"column":0},"generated":{"line":924,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":924,"column":0},"generated":{"line":925,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":925,"column":0},"generated":{"line":926,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":926,"column":0},"generated":{"line":927,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":927,"column":0},"generated":{"line":928,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":928,"column":0},"generated":{"line":929,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":929,"column":0},"generated":{"line":930,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":930,"column":0},"generated":{"line":931,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":931,"column":0},"generated":{"line":932,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":932,"column":0},"generated":{"line":933,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":933,"column":0},"generated":{"line":934,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":934,"column":0},"generated":{"line":935,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":935,"column":0},"generated":{"line":936,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":936,"column":0},"generated":{"line":937,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":937,"column":0},"generated":{"line":938,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":938,"column":0},"generated":{"line":939,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":939,"column":0},"generated":{"line":940,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":940,"column":0},"generated":{"line":941,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":941,"column":0},"generated":{"line":942,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":942,"column":0},"generated":{"line":943,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":943,"column":0},"generated":{"line":944,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":944,"column":0},"generated":{"line":945,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":945,"column":0},"generated":{"line":946,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":946,"column":0},"generated":{"line":947,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":947,"column":0},"generated":{"line":948,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":948,"column":0},"generated":{"line":949,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":949,"column":0},"generated":{"line":950,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":950,"column":0},"generated":{"line":951,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":951,"column":0},"generated":{"line":952,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":952,"column":0},"generated":{"line":953,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":953,"column":0},"generated":{"line":954,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":954,"column":0},"generated":{"line":955,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":955,"column":0},"generated":{"line":956,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":956,"column":0},"generated":{"line":957,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":957,"column":0},"generated":{"line":958,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":958,"column":0},"generated":{"line":959,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":959,"column":0},"generated":{"line":960,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":960,"column":0},"generated":{"line":961,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":961,"column":0},"generated":{"line":962,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":962,"column":0},"generated":{"line":963,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":963,"column":0},"generated":{"line":964,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":964,"column":0},"generated":{"line":965,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":965,"column":0},"generated":{"line":966,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":966,"column":0},"generated":{"line":967,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":967,"column":0},"generated":{"line":968,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":968,"column":0},"generated":{"line":969,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":969,"column":0},"generated":{"line":970,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":970,"column":0},"generated":{"line":971,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":971,"column":0},"generated":{"line":972,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":972,"column":0},"generated":{"line":973,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":973,"column":0},"generated":{"line":974,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":974,"column":0},"generated":{"line":975,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":975,"column":0},"generated":{"line":976,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":976,"column":0},"generated":{"line":977,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":977,"column":0},"generated":{"line":978,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":978,"column":0},"generated":{"line":979,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":979,"column":0},"generated":{"line":980,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":980,"column":0},"generated":{"line":981,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":981,"column":0},"generated":{"line":982,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":982,"column":0},"generated":{"line":983,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":983,"column":0},"generated":{"line":984,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":984,"column":0},"generated":{"line":985,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":985,"column":0},"generated":{"line":986,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":986,"column":0},"generated":{"line":987,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":987,"column":0},"generated":{"line":988,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":988,"column":0},"generated":{"line":989,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":989,"column":0},"generated":{"line":990,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":990,"column":0},"generated":{"line":991,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":991,"column":0},"generated":{"line":992,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":992,"column":0},"generated":{"line":993,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":993,"column":0},"generated":{"line":994,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":994,"column":0},"generated":{"line":995,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":995,"column":0},"generated":{"line":996,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":996,"column":0},"generated":{"line":997,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":997,"column":0},"generated":{"line":998,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":998,"column":0},"generated":{"line":999,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":999,"column":0},"generated":{"line":1000,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1000,"column":0},"generated":{"line":1001,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1001,"column":0},"generated":{"line":1002,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1002,"column":0},"generated":{"line":1003,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1003,"column":0},"generated":{"line":1004,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1004,"column":0},"generated":{"line":1005,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1005,"column":0},"generated":{"line":1006,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1006,"column":0},"generated":{"line":1007,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1007,"column":0},"generated":{"line":1008,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1008,"column":0},"generated":{"line":1009,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1009,"column":0},"generated":{"line":1010,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1010,"column":0},"generated":{"line":1011,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1011,"column":0},"generated":{"line":1012,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1012,"column":0},"generated":{"line":1013,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1013,"column":0},"generated":{"line":1014,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1014,"column":0},"generated":{"line":1015,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1015,"column":0},"generated":{"line":1016,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1016,"column":0},"generated":{"line":1017,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1017,"column":0},"generated":{"line":1018,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1018,"column":0},"generated":{"line":1019,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1019,"column":0},"generated":{"line":1020,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1020,"column":0},"generated":{"line":1021,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1021,"column":0},"generated":{"line":1022,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1022,"column":0},"generated":{"line":1023,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1023,"column":0},"generated":{"line":1024,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1024,"column":0},"generated":{"line":1025,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1025,"column":0},"generated":{"line":1026,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1026,"column":0},"generated":{"line":1027,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1027,"column":0},"generated":{"line":1028,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1028,"column":0},"generated":{"line":1029,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1029,"column":0},"generated":{"line":1030,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1030,"column":0},"generated":{"line":1031,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1031,"column":0},"generated":{"line":1032,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1032,"column":0},"generated":{"line":1033,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1033,"column":0},"generated":{"line":1034,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1034,"column":0},"generated":{"line":1035,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1035,"column":0},"generated":{"line":1036,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1036,"column":0},"generated":{"line":1037,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1037,"column":0},"generated":{"line":1038,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1038,"column":0},"generated":{"line":1039,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1039,"column":0},"generated":{"line":1040,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1040,"column":0},"generated":{"line":1041,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1041,"column":0},"generated":{"line":1042,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1042,"column":0},"generated":{"line":1043,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1043,"column":0},"generated":{"line":1044,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1044,"column":0},"generated":{"line":1045,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1045,"column":0},"generated":{"line":1046,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1046,"column":0},"generated":{"line":1047,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1047,"column":0},"generated":{"line":1048,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1048,"column":0},"generated":{"line":1049,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1049,"column":0},"generated":{"line":1050,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1050,"column":0},"generated":{"line":1051,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1051,"column":0},"generated":{"line":1052,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1052,"column":0},"generated":{"line":1053,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1053,"column":0},"generated":{"line":1054,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1054,"column":0},"generated":{"line":1055,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1055,"column":0},"generated":{"line":1056,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1056,"column":0},"generated":{"line":1057,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1057,"column":0},"generated":{"line":1058,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1058,"column":0},"generated":{"line":1059,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1059,"column":0},"generated":{"line":1060,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1060,"column":0},"generated":{"line":1061,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1061,"column":0},"generated":{"line":1062,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1062,"column":0},"generated":{"line":1063,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1063,"column":0},"generated":{"line":1064,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1064,"column":0},"generated":{"line":1065,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1065,"column":0},"generated":{"line":1066,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1066,"column":0},"generated":{"line":1067,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1067,"column":0},"generated":{"line":1068,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1068,"column":0},"generated":{"line":1069,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1069,"column":0},"generated":{"line":1070,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1070,"column":0},"generated":{"line":1071,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1071,"column":0},"generated":{"line":1072,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1072,"column":0},"generated":{"line":1073,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1073,"column":0},"generated":{"line":1074,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1074,"column":0},"generated":{"line":1075,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1075,"column":0},"generated":{"line":1076,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1076,"column":0},"generated":{"line":1077,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1077,"column":0},"generated":{"line":1078,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1078,"column":0},"generated":{"line":1079,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1079,"column":0},"generated":{"line":1080,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1080,"column":0},"generated":{"line":1081,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1081,"column":0},"generated":{"line":1082,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1082,"column":0},"generated":{"line":1083,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1083,"column":0},"generated":{"line":1084,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1084,"column":0},"generated":{"line":1085,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1085,"column":0},"generated":{"line":1086,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1086,"column":0},"generated":{"line":1087,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1087,"column":0},"generated":{"line":1088,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1088,"column":0},"generated":{"line":1089,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1089,"column":0},"generated":{"line":1090,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1090,"column":0},"generated":{"line":1091,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1091,"column":0},"generated":{"line":1092,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1092,"column":0},"generated":{"line":1093,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1093,"column":0},"generated":{"line":1094,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1094,"column":0},"generated":{"line":1095,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1095,"column":0},"generated":{"line":1096,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1096,"column":0},"generated":{"line":1097,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1097,"column":0},"generated":{"line":1098,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1098,"column":0},"generated":{"line":1099,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1099,"column":0},"generated":{"line":1100,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1100,"column":0},"generated":{"line":1101,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1101,"column":0},"generated":{"line":1102,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1102,"column":0},"generated":{"line":1103,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1103,"column":0},"generated":{"line":1104,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1104,"column":0},"generated":{"line":1105,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1105,"column":0},"generated":{"line":1106,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1106,"column":0},"generated":{"line":1107,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1107,"column":0},"generated":{"line":1108,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1108,"column":0},"generated":{"line":1109,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1109,"column":0},"generated":{"line":1110,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1110,"column":0},"generated":{"line":1111,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1111,"column":0},"generated":{"line":1112,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1112,"column":0},"generated":{"line":1113,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1113,"column":0},"generated":{"line":1114,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1114,"column":0},"generated":{"line":1115,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1115,"column":0},"generated":{"line":1116,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1116,"column":0},"generated":{"line":1117,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1117,"column":0},"generated":{"line":1118,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1118,"column":0},"generated":{"line":1119,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1119,"column":0},"generated":{"line":1120,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1120,"column":0},"generated":{"line":1121,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1121,"column":0},"generated":{"line":1122,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1122,"column":0},"generated":{"line":1123,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1123,"column":0},"generated":{"line":1124,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1124,"column":0},"generated":{"line":1125,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1125,"column":0},"generated":{"line":1126,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1126,"column":0},"generated":{"line":1127,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1127,"column":0},"generated":{"line":1128,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1128,"column":0},"generated":{"line":1129,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1129,"column":0},"generated":{"line":1130,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1130,"column":0},"generated":{"line":1131,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1131,"column":0},"generated":{"line":1132,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1132,"column":0},"generated":{"line":1133,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1133,"column":0},"generated":{"line":1134,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1134,"column":0},"generated":{"line":1135,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1135,"column":0},"generated":{"line":1136,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1136,"column":0},"generated":{"line":1137,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1137,"column":0},"generated":{"line":1138,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1138,"column":0},"generated":{"line":1139,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1139,"column":0},"generated":{"line":1140,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1140,"column":0},"generated":{"line":1141,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1141,"column":0},"generated":{"line":1142,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1142,"column":0},"generated":{"line":1143,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1143,"column":0},"generated":{"line":1144,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1144,"column":0},"generated":{"line":1145,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1145,"column":0},"generated":{"line":1146,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1146,"column":0},"generated":{"line":1147,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1147,"column":0},"generated":{"line":1148,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1148,"column":0},"generated":{"line":1149,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1149,"column":0},"generated":{"line":1150,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1150,"column":0},"generated":{"line":1151,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1151,"column":0},"generated":{"line":1152,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1152,"column":0},"generated":{"line":1153,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1153,"column":0},"generated":{"line":1154,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1154,"column":0},"generated":{"line":1155,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1155,"column":0},"generated":{"line":1156,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1156,"column":0},"generated":{"line":1157,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1157,"column":0},"generated":{"line":1158,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1158,"column":0},"generated":{"line":1159,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1159,"column":0},"generated":{"line":1160,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1160,"column":0},"generated":{"line":1161,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1161,"column":0},"generated":{"line":1162,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1162,"column":0},"generated":{"line":1163,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1163,"column":0},"generated":{"line":1164,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1164,"column":0},"generated":{"line":1165,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1165,"column":0},"generated":{"line":1166,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1166,"column":0},"generated":{"line":1167,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1167,"column":0},"generated":{"line":1168,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1168,"column":0},"generated":{"line":1169,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1169,"column":0},"generated":{"line":1170,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1170,"column":0},"generated":{"line":1171,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1171,"column":0},"generated":{"line":1172,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1172,"column":0},"generated":{"line":1173,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1173,"column":0},"generated":{"line":1174,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1174,"column":0},"generated":{"line":1175,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1175,"column":0},"generated":{"line":1176,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1176,"column":0},"generated":{"line":1177,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1177,"column":0},"generated":{"line":1178,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1178,"column":0},"generated":{"line":1179,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1179,"column":0},"generated":{"line":1180,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1180,"column":0},"generated":{"line":1181,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1181,"column":0},"generated":{"line":1182,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1182,"column":0},"generated":{"line":1183,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1183,"column":0},"generated":{"line":1184,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1184,"column":0},"generated":{"line":1185,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1185,"column":0},"generated":{"line":1186,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1186,"column":0},"generated":{"line":1187,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1187,"column":0},"generated":{"line":1188,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1188,"column":0},"generated":{"line":1189,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1189,"column":0},"generated":{"line":1190,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1190,"column":0},"generated":{"line":1191,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1191,"column":0},"generated":{"line":1192,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1192,"column":0},"generated":{"line":1193,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1193,"column":0},"generated":{"line":1194,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1194,"column":0},"generated":{"line":1195,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1195,"column":0},"generated":{"line":1196,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1196,"column":0},"generated":{"line":1197,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1197,"column":0},"generated":{"line":1198,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1198,"column":0},"generated":{"line":1199,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1199,"column":0},"generated":{"line":1200,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1200,"column":0},"generated":{"line":1201,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1201,"column":0},"generated":{"line":1202,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1202,"column":0},"generated":{"line":1203,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1203,"column":0},"generated":{"line":1204,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1204,"column":0},"generated":{"line":1205,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1205,"column":0},"generated":{"line":1206,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1206,"column":0},"generated":{"line":1207,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1207,"column":0},"generated":{"line":1208,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1208,"column":0},"generated":{"line":1209,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1209,"column":0},"generated":{"line":1210,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1210,"column":0},"generated":{"line":1211,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1211,"column":0},"generated":{"line":1212,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1212,"column":0},"generated":{"line":1213,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1213,"column":0},"generated":{"line":1214,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1214,"column":0},"generated":{"line":1215,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1215,"column":0},"generated":{"line":1216,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1216,"column":0},"generated":{"line":1217,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1217,"column":0},"generated":{"line":1218,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1218,"column":0},"generated":{"line":1219,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1219,"column":0},"generated":{"line":1220,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1220,"column":0},"generated":{"line":1221,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1221,"column":0},"generated":{"line":1222,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1222,"column":0},"generated":{"line":1223,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1223,"column":0},"generated":{"line":1224,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1224,"column":0},"generated":{"line":1225,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1225,"column":0},"generated":{"line":1226,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1226,"column":0},"generated":{"line":1227,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1227,"column":0},"generated":{"line":1228,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1228,"column":0},"generated":{"line":1229,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1229,"column":0},"generated":{"line":1230,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1230,"column":0},"generated":{"line":1231,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1231,"column":0},"generated":{"line":1232,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1232,"column":0},"generated":{"line":1233,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1233,"column":0},"generated":{"line":1234,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1234,"column":0},"generated":{"line":1235,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1235,"column":0},"generated":{"line":1236,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1236,"column":0},"generated":{"line":1237,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1237,"column":0},"generated":{"line":1238,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1238,"column":0},"generated":{"line":1239,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1239,"column":0},"generated":{"line":1240,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1240,"column":0},"generated":{"line":1241,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1241,"column":0},"generated":{"line":1242,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1242,"column":0},"generated":{"line":1243,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1243,"column":0},"generated":{"line":1244,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1244,"column":0},"generated":{"line":1245,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1245,"column":0},"generated":{"line":1246,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1246,"column":0},"generated":{"line":1247,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1247,"column":0},"generated":{"line":1248,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1248,"column":0},"generated":{"line":1249,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1249,"column":0},"generated":{"line":1250,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1250,"column":0},"generated":{"line":1251,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1251,"column":0},"generated":{"line":1252,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1252,"column":0},"generated":{"line":1253,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1253,"column":0},"generated":{"line":1254,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1254,"column":0},"generated":{"line":1255,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1255,"column":0},"generated":{"line":1256,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1256,"column":0},"generated":{"line":1257,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1257,"column":0},"generated":{"line":1258,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1258,"column":0},"generated":{"line":1259,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1259,"column":0},"generated":{"line":1260,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1260,"column":0},"generated":{"line":1261,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1261,"column":0},"generated":{"line":1262,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1262,"column":0},"generated":{"line":1263,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1263,"column":0},"generated":{"line":1264,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1264,"column":0},"generated":{"line":1265,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1265,"column":0},"generated":{"line":1266,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1266,"column":0},"generated":{"line":1267,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1267,"column":0},"generated":{"line":1268,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1268,"column":0},"generated":{"line":1269,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1269,"column":0},"generated":{"line":1270,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1270,"column":0},"generated":{"line":1271,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1271,"column":0},"generated":{"line":1272,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1272,"column":0},"generated":{"line":1273,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1273,"column":0},"generated":{"line":1274,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1274,"column":0},"generated":{"line":1275,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1275,"column":0},"generated":{"line":1276,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1276,"column":0},"generated":{"line":1277,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1277,"column":0},"generated":{"line":1278,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1278,"column":0},"generated":{"line":1279,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1279,"column":0},"generated":{"line":1280,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1280,"column":0},"generated":{"line":1281,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1281,"column":0},"generated":{"line":1282,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1282,"column":0},"generated":{"line":1283,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1283,"column":0},"generated":{"line":1284,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1284,"column":0},"generated":{"line":1285,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1285,"column":0},"generated":{"line":1286,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1286,"column":0},"generated":{"line":1287,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1287,"column":0},"generated":{"line":1288,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1288,"column":0},"generated":{"line":1289,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1289,"column":0},"generated":{"line":1290,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1290,"column":0},"generated":{"line":1291,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1291,"column":0},"generated":{"line":1292,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1292,"column":0},"generated":{"line":1293,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1293,"column":0},"generated":{"line":1294,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1294,"column":0},"generated":{"line":1295,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1295,"column":0},"generated":{"line":1296,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1296,"column":0},"generated":{"line":1297,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1297,"column":0},"generated":{"line":1298,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1298,"column":0},"generated":{"line":1299,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1299,"column":0},"generated":{"line":1300,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1300,"column":0},"generated":{"line":1301,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1301,"column":0},"generated":{"line":1302,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1302,"column":0},"generated":{"line":1303,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1303,"column":0},"generated":{"line":1304,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1304,"column":0},"generated":{"line":1305,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1305,"column":0},"generated":{"line":1306,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1306,"column":0},"generated":{"line":1307,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1307,"column":0},"generated":{"line":1308,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1308,"column":0},"generated":{"line":1309,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1309,"column":0},"generated":{"line":1310,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1310,"column":0},"generated":{"line":1311,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1311,"column":0},"generated":{"line":1312,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1312,"column":0},"generated":{"line":1313,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1313,"column":0},"generated":{"line":1314,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1314,"column":0},"generated":{"line":1315,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1315,"column":0},"generated":{"line":1316,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1316,"column":0},"generated":{"line":1317,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1317,"column":0},"generated":{"line":1318,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1318,"column":0},"generated":{"line":1319,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1319,"column":0},"generated":{"line":1320,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1320,"column":0},"generated":{"line":1321,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1321,"column":0},"generated":{"line":1322,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1322,"column":0},"generated":{"line":1323,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1323,"column":0},"generated":{"line":1324,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1324,"column":0},"generated":{"line":1325,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1325,"column":0},"generated":{"line":1326,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1326,"column":0},"generated":{"line":1327,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1327,"column":0},"generated":{"line":1328,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1328,"column":0},"generated":{"line":1329,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1329,"column":0},"generated":{"line":1330,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1330,"column":0},"generated":{"line":1331,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1331,"column":0},"generated":{"line":1332,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1332,"column":0},"generated":{"line":1333,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1333,"column":0},"generated":{"line":1334,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1334,"column":0},"generated":{"line":1335,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1335,"column":0},"generated":{"line":1336,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1336,"column":0},"generated":{"line":1337,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1337,"column":0},"generated":{"line":1338,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1338,"column":0},"generated":{"line":1339,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1339,"column":0},"generated":{"line":1340,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1340,"column":0},"generated":{"line":1341,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1341,"column":0},"generated":{"line":1342,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1342,"column":0},"generated":{"line":1343,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1343,"column":0},"generated":{"line":1344,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1344,"column":0},"generated":{"line":1345,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1345,"column":0},"generated":{"line":1346,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1346,"column":0},"generated":{"line":1347,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1347,"column":0},"generated":{"line":1348,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1348,"column":0},"generated":{"line":1349,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1349,"column":0},"generated":{"line":1350,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1350,"column":0},"generated":{"line":1351,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1351,"column":0},"generated":{"line":1352,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1352,"column":0},"generated":{"line":1353,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1353,"column":0},"generated":{"line":1354,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1354,"column":0},"generated":{"line":1355,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1355,"column":0},"generated":{"line":1356,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1356,"column":0},"generated":{"line":1357,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1357,"column":0},"generated":{"line":1358,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1358,"column":0},"generated":{"line":1359,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1359,"column":0},"generated":{"line":1360,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1360,"column":0},"generated":{"line":1361,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1361,"column":0},"generated":{"line":1362,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1362,"column":0},"generated":{"line":1363,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1363,"column":0},"generated":{"line":1364,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1364,"column":0},"generated":{"line":1365,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1365,"column":0},"generated":{"line":1366,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1366,"column":0},"generated":{"line":1367,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1367,"column":0},"generated":{"line":1368,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1368,"column":0},"generated":{"line":1369,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1369,"column":0},"generated":{"line":1370,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1370,"column":0},"generated":{"line":1371,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1371,"column":0},"generated":{"line":1372,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1372,"column":0},"generated":{"line":1373,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1373,"column":0},"generated":{"line":1374,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1374,"column":0},"generated":{"line":1375,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1375,"column":0},"generated":{"line":1376,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1376,"column":0},"generated":{"line":1377,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1377,"column":0},"generated":{"line":1378,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1378,"column":0},"generated":{"line":1379,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1379,"column":0},"generated":{"line":1380,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1380,"column":0},"generated":{"line":1381,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1381,"column":0},"generated":{"line":1382,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1382,"column":0},"generated":{"line":1383,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1383,"column":0},"generated":{"line":1384,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1384,"column":0},"generated":{"line":1385,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1385,"column":0},"generated":{"line":1386,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1386,"column":0},"generated":{"line":1387,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1387,"column":0},"generated":{"line":1388,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1388,"column":0},"generated":{"line":1389,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1389,"column":0},"generated":{"line":1390,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1390,"column":0},"generated":{"line":1391,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1391,"column":0},"generated":{"line":1392,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1392,"column":0},"generated":{"line":1393,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1393,"column":0},"generated":{"line":1394,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1394,"column":0},"generated":{"line":1395,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1395,"column":0},"generated":{"line":1396,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1396,"column":0},"generated":{"line":1397,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1397,"column":0},"generated":{"line":1398,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1398,"column":0},"generated":{"line":1399,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1399,"column":0},"generated":{"line":1400,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1400,"column":0},"generated":{"line":1401,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1401,"column":0},"generated":{"line":1402,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1402,"column":0},"generated":{"line":1403,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1403,"column":0},"generated":{"line":1404,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1404,"column":0},"generated":{"line":1405,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1405,"column":0},"generated":{"line":1406,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1406,"column":0},"generated":{"line":1407,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1407,"column":0},"generated":{"line":1408,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1408,"column":0},"generated":{"line":1409,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1409,"column":0},"generated":{"line":1410,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1410,"column":0},"generated":{"line":1411,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1411,"column":0},"generated":{"line":1412,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1412,"column":0},"generated":{"line":1413,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1413,"column":0},"generated":{"line":1414,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1414,"column":0},"generated":{"line":1415,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1415,"column":0},"generated":{"line":1416,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1416,"column":0},"generated":{"line":1417,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1417,"column":0},"generated":{"line":1418,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1418,"column":0},"generated":{"line":1419,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1419,"column":0},"generated":{"line":1420,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1420,"column":0},"generated":{"line":1421,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1421,"column":0},"generated":{"line":1422,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1422,"column":0},"generated":{"line":1423,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1423,"column":0},"generated":{"line":1424,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1424,"column":0},"generated":{"line":1425,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1425,"column":0},"generated":{"line":1426,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1426,"column":0},"generated":{"line":1427,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1427,"column":0},"generated":{"line":1428,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1428,"column":0},"generated":{"line":1429,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1429,"column":0},"generated":{"line":1430,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1430,"column":0},"generated":{"line":1431,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1431,"column":0},"generated":{"line":1432,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1432,"column":0},"generated":{"line":1433,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1433,"column":0},"generated":{"line":1434,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1434,"column":0},"generated":{"line":1435,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1435,"column":0},"generated":{"line":1436,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1436,"column":0},"generated":{"line":1437,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1437,"column":0},"generated":{"line":1438,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1438,"column":0},"generated":{"line":1439,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1439,"column":0},"generated":{"line":1440,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1440,"column":0},"generated":{"line":1441,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1441,"column":0},"generated":{"line":1442,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1442,"column":0},"generated":{"line":1443,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1443,"column":0},"generated":{"line":1444,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1444,"column":0},"generated":{"line":1445,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1445,"column":0},"generated":{"line":1446,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1446,"column":0},"generated":{"line":1447,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1447,"column":0},"generated":{"line":1448,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1448,"column":0},"generated":{"line":1449,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1449,"column":0},"generated":{"line":1450,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1450,"column":0},"generated":{"line":1451,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1451,"column":0},"generated":{"line":1452,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1452,"column":0},"generated":{"line":1453,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1453,"column":0},"generated":{"line":1454,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1454,"column":0},"generated":{"line":1455,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1455,"column":0},"generated":{"line":1456,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1456,"column":0},"generated":{"line":1457,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1457,"column":0},"generated":{"line":1458,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1458,"column":0},"generated":{"line":1459,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1459,"column":0},"generated":{"line":1460,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1460,"column":0},"generated":{"line":1461,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1461,"column":0},"generated":{"line":1462,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1462,"column":0},"generated":{"line":1463,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1463,"column":0},"generated":{"line":1464,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1464,"column":0},"generated":{"line":1465,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1465,"column":0},"generated":{"line":1466,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1466,"column":0},"generated":{"line":1467,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1467,"column":0},"generated":{"line":1468,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1468,"column":0},"generated":{"line":1469,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1469,"column":0},"generated":{"line":1470,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1470,"column":0},"generated":{"line":1471,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1471,"column":0},"generated":{"line":1472,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1472,"column":0},"generated":{"line":1473,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1473,"column":0},"generated":{"line":1474,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1474,"column":0},"generated":{"line":1475,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1475,"column":0},"generated":{"line":1476,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1476,"column":0},"generated":{"line":1477,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1477,"column":0},"generated":{"line":1478,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1478,"column":0},"generated":{"line":1479,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1479,"column":0},"generated":{"line":1480,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1480,"column":0},"generated":{"line":1481,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1481,"column":0},"generated":{"line":1482,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1482,"column":0},"generated":{"line":1483,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1483,"column":0},"generated":{"line":1484,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1484,"column":0},"generated":{"line":1485,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1485,"column":0},"generated":{"line":1486,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1486,"column":0},"generated":{"line":1487,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1487,"column":0},"generated":{"line":1488,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1488,"column":0},"generated":{"line":1489,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1489,"column":0},"generated":{"line":1490,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1490,"column":0},"generated":{"line":1491,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1491,"column":0},"generated":{"line":1492,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1492,"column":0},"generated":{"line":1493,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1493,"column":0},"generated":{"line":1494,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1494,"column":0},"generated":{"line":1495,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1495,"column":0},"generated":{"line":1496,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1496,"column":0},"generated":{"line":1497,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1497,"column":0},"generated":{"line":1498,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1498,"column":0},"generated":{"line":1499,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1499,"column":0},"generated":{"line":1500,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1500,"column":0},"generated":{"line":1501,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1501,"column":0},"generated":{"line":1502,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1502,"column":0},"generated":{"line":1503,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1503,"column":0},"generated":{"line":1504,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1504,"column":0},"generated":{"line":1505,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1505,"column":0},"generated":{"line":1506,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1506,"column":0},"generated":{"line":1507,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1507,"column":0},"generated":{"line":1508,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1508,"column":0},"generated":{"line":1509,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1509,"column":0},"generated":{"line":1510,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1510,"column":0},"generated":{"line":1511,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1511,"column":0},"generated":{"line":1512,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1512,"column":0},"generated":{"line":1513,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1513,"column":0},"generated":{"line":1514,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1514,"column":0},"generated":{"line":1515,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1515,"column":0},"generated":{"line":1516,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1516,"column":0},"generated":{"line":1517,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1517,"column":0},"generated":{"line":1518,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1518,"column":0},"generated":{"line":1519,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1519,"column":0},"generated":{"line":1520,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1520,"column":0},"generated":{"line":1521,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1521,"column":0},"generated":{"line":1522,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1522,"column":0},"generated":{"line":1523,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1523,"column":0},"generated":{"line":1524,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1524,"column":0},"generated":{"line":1525,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1525,"column":0},"generated":{"line":1526,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1526,"column":0},"generated":{"line":1527,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1527,"column":0},"generated":{"line":1528,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1528,"column":0},"generated":{"line":1529,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1529,"column":0},"generated":{"line":1530,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1530,"column":0},"generated":{"line":1531,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1531,"column":0},"generated":{"line":1532,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1532,"column":0},"generated":{"line":1533,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1533,"column":0},"generated":{"line":1534,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1534,"column":0},"generated":{"line":1535,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1535,"column":0},"generated":{"line":1536,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1536,"column":0},"generated":{"line":1537,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1537,"column":0},"generated":{"line":1538,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1538,"column":0},"generated":{"line":1539,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1539,"column":0},"generated":{"line":1540,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1540,"column":0},"generated":{"line":1541,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1541,"column":0},"generated":{"line":1542,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1542,"column":0},"generated":{"line":1543,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1543,"column":0},"generated":{"line":1544,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1544,"column":0},"generated":{"line":1545,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1545,"column":0},"generated":{"line":1546,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1546,"column":0},"generated":{"line":1547,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1547,"column":0},"generated":{"line":1548,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1548,"column":0},"generated":{"line":1549,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1549,"column":0},"generated":{"line":1550,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1550,"column":0},"generated":{"line":1551,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1551,"column":0},"generated":{"line":1552,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1552,"column":0},"generated":{"line":1553,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1553,"column":0},"generated":{"line":1554,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1554,"column":0},"generated":{"line":1555,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1555,"column":0},"generated":{"line":1556,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1556,"column":0},"generated":{"line":1557,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1557,"column":0},"generated":{"line":1558,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1558,"column":0},"generated":{"line":1559,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1559,"column":0},"generated":{"line":1560,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1560,"column":0},"generated":{"line":1561,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1561,"column":0},"generated":{"line":1562,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1562,"column":0},"generated":{"line":1563,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1563,"column":0},"generated":{"line":1564,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1564,"column":0},"generated":{"line":1565,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1565,"column":0},"generated":{"line":1566,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1566,"column":0},"generated":{"line":1567,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1567,"column":0},"generated":{"line":1568,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1568,"column":0},"generated":{"line":1569,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1569,"column":0},"generated":{"line":1570,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1570,"column":0},"generated":{"line":1571,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1571,"column":0},"generated":{"line":1572,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1572,"column":0},"generated":{"line":1573,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1573,"column":0},"generated":{"line":1574,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1574,"column":0},"generated":{"line":1575,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1575,"column":0},"generated":{"line":1576,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1576,"column":0},"generated":{"line":1577,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1577,"column":0},"generated":{"line":1578,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1578,"column":0},"generated":{"line":1579,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1579,"column":0},"generated":{"line":1580,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1580,"column":0},"generated":{"line":1581,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1581,"column":0},"generated":{"line":1582,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1582,"column":0},"generated":{"line":1583,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1583,"column":0},"generated":{"line":1584,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1584,"column":0},"generated":{"line":1585,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1585,"column":0},"generated":{"line":1586,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1586,"column":0},"generated":{"line":1587,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1587,"column":0},"generated":{"line":1588,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1588,"column":0},"generated":{"line":1589,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1589,"column":0},"generated":{"line":1590,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1590,"column":0},"generated":{"line":1591,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1591,"column":0},"generated":{"line":1592,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1592,"column":0},"generated":{"line":1593,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1593,"column":0},"generated":{"line":1594,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1594,"column":0},"generated":{"line":1595,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1595,"column":0},"generated":{"line":1596,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1596,"column":0},"generated":{"line":1597,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1597,"column":0},"generated":{"line":1598,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1598,"column":0},"generated":{"line":1599,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1599,"column":0},"generated":{"line":1600,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1600,"column":0},"generated":{"line":1601,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1601,"column":0},"generated":{"line":1602,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1602,"column":0},"generated":{"line":1603,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1603,"column":0},"generated":{"line":1604,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1604,"column":0},"generated":{"line":1605,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1605,"column":0},"generated":{"line":1606,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1606,"column":0},"generated":{"line":1607,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1607,"column":0},"generated":{"line":1608,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1608,"column":0},"generated":{"line":1609,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1609,"column":0},"generated":{"line":1610,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1610,"column":0},"generated":{"line":1611,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1611,"column":0},"generated":{"line":1612,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1612,"column":0},"generated":{"line":1613,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1613,"column":0},"generated":{"line":1614,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1614,"column":0},"generated":{"line":1615,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1615,"column":0},"generated":{"line":1616,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1616,"column":0},"generated":{"line":1617,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1617,"column":0},"generated":{"line":1618,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1618,"column":0},"generated":{"line":1619,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1619,"column":0},"generated":{"line":1620,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1620,"column":0},"generated":{"line":1621,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1621,"column":0},"generated":{"line":1622,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1622,"column":0},"generated":{"line":1623,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1623,"column":0},"generated":{"line":1624,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1624,"column":0},"generated":{"line":1625,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1625,"column":0},"generated":{"line":1626,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1626,"column":0},"generated":{"line":1627,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1627,"column":0},"generated":{"line":1628,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1628,"column":0},"generated":{"line":1629,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1629,"column":0},"generated":{"line":1630,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1630,"column":0},"generated":{"line":1631,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1631,"column":0},"generated":{"line":1632,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1632,"column":0},"generated":{"line":1633,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1633,"column":0},"generated":{"line":1634,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1634,"column":0},"generated":{"line":1635,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1635,"column":0},"generated":{"line":1636,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1636,"column":0},"generated":{"line":1637,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1637,"column":0},"generated":{"line":1638,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1638,"column":0},"generated":{"line":1639,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1639,"column":0},"generated":{"line":1640,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1640,"column":0},"generated":{"line":1641,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1641,"column":0},"generated":{"line":1642,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1642,"column":0},"generated":{"line":1643,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1643,"column":0},"generated":{"line":1644,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1644,"column":0},"generated":{"line":1645,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1645,"column":0},"generated":{"line":1646,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1646,"column":0},"generated":{"line":1647,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1647,"column":0},"generated":{"line":1648,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1648,"column":0},"generated":{"line":1649,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1649,"column":0},"generated":{"line":1650,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1650,"column":0},"generated":{"line":1651,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1651,"column":0},"generated":{"line":1652,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1652,"column":0},"generated":{"line":1653,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1653,"column":0},"generated":{"line":1654,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1654,"column":0},"generated":{"line":1655,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1655,"column":0},"generated":{"line":1656,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1656,"column":0},"generated":{"line":1657,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1657,"column":0},"generated":{"line":1658,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1658,"column":0},"generated":{"line":1659,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1659,"column":0},"generated":{"line":1660,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1660,"column":0},"generated":{"line":1661,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1661,"column":0},"generated":{"line":1662,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1662,"column":0},"generated":{"line":1663,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1663,"column":0},"generated":{"line":1664,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1664,"column":0},"generated":{"line":1665,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1665,"column":0},"generated":{"line":1666,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1666,"column":0},"generated":{"line":1667,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1667,"column":0},"generated":{"line":1668,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1668,"column":0},"generated":{"line":1669,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1669,"column":0},"generated":{"line":1670,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1670,"column":0},"generated":{"line":1671,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1671,"column":0},"generated":{"line":1672,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1672,"column":0},"generated":{"line":1673,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1673,"column":0},"generated":{"line":1674,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1674,"column":0},"generated":{"line":1675,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1675,"column":0},"generated":{"line":1676,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1676,"column":0},"generated":{"line":1677,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1677,"column":0},"generated":{"line":1678,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1678,"column":0},"generated":{"line":1679,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1679,"column":0},"generated":{"line":1680,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1680,"column":0},"generated":{"line":1681,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1681,"column":0},"generated":{"line":1682,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1682,"column":0},"generated":{"line":1683,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1683,"column":0},"generated":{"line":1684,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1684,"column":0},"generated":{"line":1685,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1685,"column":0},"generated":{"line":1686,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1686,"column":0},"generated":{"line":1687,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1687,"column":0},"generated":{"line":1688,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1688,"column":0},"generated":{"line":1689,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1689,"column":0},"generated":{"line":1690,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1690,"column":0},"generated":{"line":1691,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1691,"column":0},"generated":{"line":1692,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1692,"column":0},"generated":{"line":1693,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1693,"column":0},"generated":{"line":1694,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1694,"column":0},"generated":{"line":1695,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1695,"column":0},"generated":{"line":1696,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1696,"column":0},"generated":{"line":1697,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1697,"column":0},"generated":{"line":1698,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1698,"column":0},"generated":{"line":1699,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1699,"column":0},"generated":{"line":1700,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1700,"column":0},"generated":{"line":1701,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1701,"column":0},"generated":{"line":1702,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1702,"column":0},"generated":{"line":1703,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1703,"column":0},"generated":{"line":1704,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1704,"column":0},"generated":{"line":1705,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1705,"column":0},"generated":{"line":1706,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1706,"column":0},"generated":{"line":1707,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1707,"column":0},"generated":{"line":1708,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1708,"column":0},"generated":{"line":1709,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1709,"column":0},"generated":{"line":1710,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1710,"column":0},"generated":{"line":1711,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1711,"column":0},"generated":{"line":1712,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1712,"column":0},"generated":{"line":1713,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1713,"column":0},"generated":{"line":1714,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1714,"column":0},"generated":{"line":1715,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1715,"column":0},"generated":{"line":1716,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1716,"column":0},"generated":{"line":1717,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1717,"column":0},"generated":{"line":1718,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1718,"column":0},"generated":{"line":1719,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1719,"column":0},"generated":{"line":1720,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1720,"column":0},"generated":{"line":1721,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1721,"column":0},"generated":{"line":1722,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1722,"column":0},"generated":{"line":1723,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1723,"column":0},"generated":{"line":1724,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1724,"column":0},"generated":{"line":1725,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1725,"column":0},"generated":{"line":1726,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1726,"column":0},"generated":{"line":1727,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1727,"column":0},"generated":{"line":1728,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1728,"column":0},"generated":{"line":1729,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1729,"column":0},"generated":{"line":1730,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1730,"column":0},"generated":{"line":1731,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1731,"column":0},"generated":{"line":1732,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1732,"column":0},"generated":{"line":1733,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1733,"column":0},"generated":{"line":1734,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1734,"column":0},"generated":{"line":1735,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1735,"column":0},"generated":{"line":1736,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1736,"column":0},"generated":{"line":1737,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1737,"column":0},"generated":{"line":1738,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1738,"column":0},"generated":{"line":1739,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1739,"column":0},"generated":{"line":1740,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1740,"column":0},"generated":{"line":1741,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1741,"column":0},"generated":{"line":1742,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1742,"column":0},"generated":{"line":1743,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1743,"column":0},"generated":{"line":1744,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1744,"column":0},"generated":{"line":1745,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1745,"column":0},"generated":{"line":1746,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1746,"column":0},"generated":{"line":1747,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1747,"column":0},"generated":{"line":1748,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1748,"column":0},"generated":{"line":1749,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1749,"column":0},"generated":{"line":1750,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1750,"column":0},"generated":{"line":1751,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1751,"column":0},"generated":{"line":1752,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1752,"column":0},"generated":{"line":1753,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1753,"column":0},"generated":{"line":1754,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1754,"column":0},"generated":{"line":1755,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1755,"column":0},"generated":{"line":1756,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1756,"column":0},"generated":{"line":1757,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1757,"column":0},"generated":{"line":1758,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1758,"column":0},"generated":{"line":1759,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1759,"column":0},"generated":{"line":1760,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1760,"column":0},"generated":{"line":1761,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1761,"column":0},"generated":{"line":1762,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1762,"column":0},"generated":{"line":1763,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1763,"column":0},"generated":{"line":1764,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1764,"column":0},"generated":{"line":1765,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1765,"column":0},"generated":{"line":1766,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1766,"column":0},"generated":{"line":1767,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1767,"column":0},"generated":{"line":1768,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1768,"column":0},"generated":{"line":1769,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1769,"column":0},"generated":{"line":1770,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1770,"column":0},"generated":{"line":1771,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1771,"column":0},"generated":{"line":1772,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1772,"column":0},"generated":{"line":1773,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1773,"column":0},"generated":{"line":1774,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1774,"column":0},"generated":{"line":1775,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1775,"column":0},"generated":{"line":1776,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1776,"column":0},"generated":{"line":1777,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1777,"column":0},"generated":{"line":1778,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1778,"column":0},"generated":{"line":1779,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1779,"column":0},"generated":{"line":1780,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1780,"column":0},"generated":{"line":1781,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1781,"column":0},"generated":{"line":1782,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1782,"column":0},"generated":{"line":1783,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1783,"column":0},"generated":{"line":1784,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1784,"column":0},"generated":{"line":1785,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1785,"column":0},"generated":{"line":1786,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1786,"column":0},"generated":{"line":1787,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1787,"column":0},"generated":{"line":1788,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1788,"column":0},"generated":{"line":1789,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1789,"column":0},"generated":{"line":1790,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1790,"column":0},"generated":{"line":1791,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1791,"column":0},"generated":{"line":1792,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1792,"column":0},"generated":{"line":1793,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1793,"column":0},"generated":{"line":1794,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1794,"column":0},"generated":{"line":1795,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1795,"column":0},"generated":{"line":1796,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1796,"column":0},"generated":{"line":1797,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1797,"column":0},"generated":{"line":1798,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1798,"column":0},"generated":{"line":1799,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1799,"column":0},"generated":{"line":1800,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1800,"column":0},"generated":{"line":1801,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1801,"column":0},"generated":{"line":1802,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1802,"column":0},"generated":{"line":1803,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1803,"column":0},"generated":{"line":1804,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1804,"column":0},"generated":{"line":1805,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1805,"column":0},"generated":{"line":1806,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1806,"column":0},"generated":{"line":1807,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1807,"column":0},"generated":{"line":1808,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1808,"column":0},"generated":{"line":1809,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1809,"column":0},"generated":{"line":1810,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1810,"column":0},"generated":{"line":1811,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1811,"column":0},"generated":{"line":1812,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1812,"column":0},"generated":{"line":1813,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1813,"column":0},"generated":{"line":1814,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1814,"column":0},"generated":{"line":1815,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1815,"column":0},"generated":{"line":1816,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1816,"column":0},"generated":{"line":1817,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1817,"column":0},"generated":{"line":1818,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1818,"column":0},"generated":{"line":1819,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1819,"column":0},"generated":{"line":1820,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1820,"column":0},"generated":{"line":1821,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1821,"column":0},"generated":{"line":1822,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1822,"column":0},"generated":{"line":1823,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1823,"column":0},"generated":{"line":1824,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1824,"column":0},"generated":{"line":1825,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1825,"column":0},"generated":{"line":1826,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1826,"column":0},"generated":{"line":1827,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1827,"column":0},"generated":{"line":1828,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1828,"column":0},"generated":{"line":1829,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1829,"column":0},"generated":{"line":1830,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1830,"column":0},"generated":{"line":1831,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1831,"column":0},"generated":{"line":1832,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1832,"column":0},"generated":{"line":1833,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1833,"column":0},"generated":{"line":1834,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1834,"column":0},"generated":{"line":1835,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1835,"column":0},"generated":{"line":1836,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1836,"column":0},"generated":{"line":1837,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1837,"column":0},"generated":{"line":1838,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1838,"column":0},"generated":{"line":1839,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1839,"column":0},"generated":{"line":1840,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1840,"column":0},"generated":{"line":1841,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1841,"column":0},"generated":{"line":1842,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1842,"column":0},"generated":{"line":1843,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1843,"column":0},"generated":{"line":1844,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1844,"column":0},"generated":{"line":1845,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1845,"column":0},"generated":{"line":1846,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1846,"column":0},"generated":{"line":1847,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1847,"column":0},"generated":{"line":1848,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1848,"column":0},"generated":{"line":1849,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1849,"column":0},"generated":{"line":1850,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1850,"column":0},"generated":{"line":1851,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1851,"column":0},"generated":{"line":1852,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1852,"column":0},"generated":{"line":1853,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1853,"column":0},"generated":{"line":1854,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1854,"column":0},"generated":{"line":1855,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1855,"column":0},"generated":{"line":1856,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1856,"column":0},"generated":{"line":1857,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1857,"column":0},"generated":{"line":1858,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1858,"column":0},"generated":{"line":1859,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1859,"column":0},"generated":{"line":1860,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1860,"column":0},"generated":{"line":1861,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1861,"column":0},"generated":{"line":1862,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1862,"column":0},"generated":{"line":1863,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1863,"column":0},"generated":{"line":1864,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1864,"column":0},"generated":{"line":1865,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1865,"column":0},"generated":{"line":1866,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1866,"column":0},"generated":{"line":1867,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1867,"column":0},"generated":{"line":1868,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1868,"column":0},"generated":{"line":1869,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1869,"column":0},"generated":{"line":1870,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1870,"column":0},"generated":{"line":1871,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1871,"column":0},"generated":{"line":1872,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1872,"column":0},"generated":{"line":1873,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1873,"column":0},"generated":{"line":1874,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1874,"column":0},"generated":{"line":1875,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1875,"column":0},"generated":{"line":1876,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1876,"column":0},"generated":{"line":1877,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1877,"column":0},"generated":{"line":1878,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1878,"column":0},"generated":{"line":1879,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1879,"column":0},"generated":{"line":1880,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1880,"column":0},"generated":{"line":1881,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1881,"column":0},"generated":{"line":1882,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1882,"column":0},"generated":{"line":1883,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1883,"column":0},"generated":{"line":1884,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1884,"column":0},"generated":{"line":1885,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1885,"column":0},"generated":{"line":1886,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1886,"column":0},"generated":{"line":1887,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1887,"column":0},"generated":{"line":1888,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1888,"column":0},"generated":{"line":1889,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1889,"column":0},"generated":{"line":1890,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1890,"column":0},"generated":{"line":1891,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1891,"column":0},"generated":{"line":1892,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1892,"column":0},"generated":{"line":1893,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1893,"column":0},"generated":{"line":1894,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1894,"column":0},"generated":{"line":1895,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1895,"column":0},"generated":{"line":1896,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1896,"column":0},"generated":{"line":1897,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1897,"column":0},"generated":{"line":1898,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1898,"column":0},"generated":{"line":1899,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1899,"column":0},"generated":{"line":1900,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1900,"column":0},"generated":{"line":1901,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1901,"column":0},"generated":{"line":1902,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1902,"column":0},"generated":{"line":1903,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1903,"column":0},"generated":{"line":1904,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1904,"column":0},"generated":{"line":1905,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1905,"column":0},"generated":{"line":1906,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1906,"column":0},"generated":{"line":1907,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1907,"column":0},"generated":{"line":1908,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1908,"column":0},"generated":{"line":1909,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1909,"column":0},"generated":{"line":1910,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1910,"column":0},"generated":{"line":1911,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1911,"column":0},"generated":{"line":1912,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1912,"column":0},"generated":{"line":1913,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1913,"column":0},"generated":{"line":1914,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1914,"column":0},"generated":{"line":1915,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1915,"column":0},"generated":{"line":1916,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1916,"column":0},"generated":{"line":1917,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1917,"column":0},"generated":{"line":1918,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1918,"column":0},"generated":{"line":1919,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1919,"column":0},"generated":{"line":1920,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1920,"column":0},"generated":{"line":1921,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1921,"column":0},"generated":{"line":1922,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1922,"column":0},"generated":{"line":1923,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1923,"column":0},"generated":{"line":1924,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1924,"column":0},"generated":{"line":1925,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1925,"column":0},"generated":{"line":1926,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1926,"column":0},"generated":{"line":1927,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1927,"column":0},"generated":{"line":1928,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1928,"column":0},"generated":{"line":1929,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1929,"column":0},"generated":{"line":1930,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1930,"column":0},"generated":{"line":1931,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1931,"column":0},"generated":{"line":1932,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1932,"column":0},"generated":{"line":1933,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1933,"column":0},"generated":{"line":1934,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1934,"column":0},"generated":{"line":1935,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1935,"column":0},"generated":{"line":1936,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1936,"column":0},"generated":{"line":1937,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1937,"column":0},"generated":{"line":1938,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1938,"column":0},"generated":{"line":1939,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1939,"column":0},"generated":{"line":1940,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1940,"column":0},"generated":{"line":1941,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1941,"column":0},"generated":{"line":1942,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1942,"column":0},"generated":{"line":1943,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1943,"column":0},"generated":{"line":1944,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1944,"column":0},"generated":{"line":1945,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1945,"column":0},"generated":{"line":1946,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1946,"column":0},"generated":{"line":1947,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1947,"column":0},"generated":{"line":1948,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1948,"column":0},"generated":{"line":1949,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1949,"column":0},"generated":{"line":1950,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1950,"column":0},"generated":{"line":1951,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1951,"column":0},"generated":{"line":1952,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1952,"column":0},"generated":{"line":1953,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1953,"column":0},"generated":{"line":1954,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1954,"column":0},"generated":{"line":1955,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1955,"column":0},"generated":{"line":1956,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1956,"column":0},"generated":{"line":1957,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1957,"column":0},"generated":{"line":1958,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1958,"column":0},"generated":{"line":1959,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1959,"column":0},"generated":{"line":1960,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1960,"column":0},"generated":{"line":1961,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1961,"column":0},"generated":{"line":1962,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1962,"column":0},"generated":{"line":1963,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1963,"column":0},"generated":{"line":1964,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1964,"column":0},"generated":{"line":1965,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1965,"column":0},"generated":{"line":1966,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1966,"column":0},"generated":{"line":1967,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1967,"column":0},"generated":{"line":1968,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1968,"column":0},"generated":{"line":1969,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1969,"column":0},"generated":{"line":1970,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1970,"column":0},"generated":{"line":1971,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1971,"column":0},"generated":{"line":1972,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1972,"column":0},"generated":{"line":1973,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1973,"column":0},"generated":{"line":1974,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1974,"column":0},"generated":{"line":1975,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1975,"column":0},"generated":{"line":1976,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1976,"column":0},"generated":{"line":1977,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1977,"column":0},"generated":{"line":1978,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1978,"column":0},"generated":{"line":1979,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1979,"column":0},"generated":{"line":1980,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1980,"column":0},"generated":{"line":1981,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1981,"column":0},"generated":{"line":1982,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1982,"column":0},"generated":{"line":1983,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1983,"column":0},"generated":{"line":1984,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1984,"column":0},"generated":{"line":1985,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1985,"column":0},"generated":{"line":1986,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1986,"column":0},"generated":{"line":1987,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1987,"column":0},"generated":{"line":1988,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1988,"column":0},"generated":{"line":1989,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1989,"column":0},"generated":{"line":1990,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1990,"column":0},"generated":{"line":1991,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1991,"column":0},"generated":{"line":1992,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1992,"column":0},"generated":{"line":1993,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1993,"column":0},"generated":{"line":1994,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1994,"column":0},"generated":{"line":1995,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1995,"column":0},"generated":{"line":1996,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1996,"column":0},"generated":{"line":1997,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1997,"column":0},"generated":{"line":1998,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1998,"column":0},"generated":{"line":1999,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":1999,"column":0},"generated":{"line":2000,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2000,"column":0},"generated":{"line":2001,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2001,"column":0},"generated":{"line":2002,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2002,"column":0},"generated":{"line":2003,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2003,"column":0},"generated":{"line":2004,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2004,"column":0},"generated":{"line":2005,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2005,"column":0},"generated":{"line":2006,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2006,"column":0},"generated":{"line":2007,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2007,"column":0},"generated":{"line":2008,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2008,"column":0},"generated":{"line":2009,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2009,"column":0},"generated":{"line":2010,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2010,"column":0},"generated":{"line":2011,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2011,"column":0},"generated":{"line":2012,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2012,"column":0},"generated":{"line":2013,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2013,"column":0},"generated":{"line":2014,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2014,"column":0},"generated":{"line":2015,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2015,"column":0},"generated":{"line":2016,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2016,"column":0},"generated":{"line":2017,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2017,"column":0},"generated":{"line":2018,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2018,"column":0},"generated":{"line":2019,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2019,"column":0},"generated":{"line":2020,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2020,"column":0},"generated":{"line":2021,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2021,"column":0},"generated":{"line":2022,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2022,"column":0},"generated":{"line":2023,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2023,"column":0},"generated":{"line":2024,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2024,"column":0},"generated":{"line":2025,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2025,"column":0},"generated":{"line":2026,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2026,"column":0},"generated":{"line":2027,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2027,"column":0},"generated":{"line":2028,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2028,"column":0},"generated":{"line":2029,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2029,"column":0},"generated":{"line":2030,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2030,"column":0},"generated":{"line":2031,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2031,"column":0},"generated":{"line":2032,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2032,"column":0},"generated":{"line":2033,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2033,"column":0},"generated":{"line":2034,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2034,"column":0},"generated":{"line":2035,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2035,"column":0},"generated":{"line":2036,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2036,"column":0},"generated":{"line":2037,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2037,"column":0},"generated":{"line":2038,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2038,"column":0},"generated":{"line":2039,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2039,"column":0},"generated":{"line":2040,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2040,"column":0},"generated":{"line":2041,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2041,"column":0},"generated":{"line":2042,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2042,"column":0},"generated":{"line":2043,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2043,"column":0},"generated":{"line":2044,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2044,"column":0},"generated":{"line":2045,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2045,"column":0},"generated":{"line":2046,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2046,"column":0},"generated":{"line":2047,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2047,"column":0},"generated":{"line":2048,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2048,"column":0},"generated":{"line":2049,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2049,"column":0},"generated":{"line":2050,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2050,"column":0},"generated":{"line":2051,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2051,"column":0},"generated":{"line":2052,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2052,"column":0},"generated":{"line":2053,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2053,"column":0},"generated":{"line":2054,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2054,"column":0},"generated":{"line":2055,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2055,"column":0},"generated":{"line":2056,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2056,"column":0},"generated":{"line":2057,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2057,"column":0},"generated":{"line":2058,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2058,"column":0},"generated":{"line":2059,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2059,"column":0},"generated":{"line":2060,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2060,"column":0},"generated":{"line":2061,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2061,"column":0},"generated":{"line":2062,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2062,"column":0},"generated":{"line":2063,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2063,"column":0},"generated":{"line":2064,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2064,"column":0},"generated":{"line":2065,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2065,"column":0},"generated":{"line":2066,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2066,"column":0},"generated":{"line":2067,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2067,"column":0},"generated":{"line":2068,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2068,"column":0},"generated":{"line":2069,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2069,"column":0},"generated":{"line":2070,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2070,"column":0},"generated":{"line":2071,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2071,"column":0},"generated":{"line":2072,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2072,"column":0},"generated":{"line":2073,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2073,"column":0},"generated":{"line":2074,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2074,"column":0},"generated":{"line":2075,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2075,"column":0},"generated":{"line":2076,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2076,"column":0},"generated":{"line":2077,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2077,"column":0},"generated":{"line":2078,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2078,"column":0},"generated":{"line":2079,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2079,"column":0},"generated":{"line":2080,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2080,"column":0},"generated":{"line":2081,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2081,"column":0},"generated":{"line":2082,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2082,"column":0},"generated":{"line":2083,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2083,"column":0},"generated":{"line":2084,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2084,"column":0},"generated":{"line":2085,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2085,"column":0},"generated":{"line":2086,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2086,"column":0},"generated":{"line":2087,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2087,"column":0},"generated":{"line":2088,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2088,"column":0},"generated":{"line":2089,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2089,"column":0},"generated":{"line":2090,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2090,"column":0},"generated":{"line":2091,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2091,"column":0},"generated":{"line":2092,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2092,"column":0},"generated":{"line":2093,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2093,"column":0},"generated":{"line":2094,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2094,"column":0},"generated":{"line":2095,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2095,"column":0},"generated":{"line":2096,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2096,"column":0},"generated":{"line":2097,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2097,"column":0},"generated":{"line":2098,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2098,"column":0},"generated":{"line":2099,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2099,"column":0},"generated":{"line":2100,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2100,"column":0},"generated":{"line":2101,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2101,"column":0},"generated":{"line":2102,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2102,"column":0},"generated":{"line":2103,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2103,"column":0},"generated":{"line":2104,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2104,"column":0},"generated":{"line":2105,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2105,"column":0},"generated":{"line":2106,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2106,"column":0},"generated":{"line":2107,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2107,"column":0},"generated":{"line":2108,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2108,"column":0},"generated":{"line":2109,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2109,"column":0},"generated":{"line":2110,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2110,"column":0},"generated":{"line":2111,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2111,"column":0},"generated":{"line":2112,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2112,"column":0},"generated":{"line":2113,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2113,"column":0},"generated":{"line":2114,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2114,"column":0},"generated":{"line":2115,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2115,"column":0},"generated":{"line":2116,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2116,"column":0},"generated":{"line":2117,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2117,"column":0},"generated":{"line":2118,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2118,"column":0},"generated":{"line":2119,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2119,"column":0},"generated":{"line":2120,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2120,"column":0},"generated":{"line":2121,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2121,"column":0},"generated":{"line":2122,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2122,"column":0},"generated":{"line":2123,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2123,"column":0},"generated":{"line":2124,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2124,"column":0},"generated":{"line":2125,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2125,"column":0},"generated":{"line":2126,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2126,"column":0},"generated":{"line":2127,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2127,"column":0},"generated":{"line":2128,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2128,"column":0},"generated":{"line":2129,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2129,"column":0},"generated":{"line":2130,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2130,"column":0},"generated":{"line":2131,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2131,"column":0},"generated":{"line":2132,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2132,"column":0},"generated":{"line":2133,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2133,"column":0},"generated":{"line":2134,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2134,"column":0},"generated":{"line":2135,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2135,"column":0},"generated":{"line":2136,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2136,"column":0},"generated":{"line":2137,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2137,"column":0},"generated":{"line":2138,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2138,"column":0},"generated":{"line":2139,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2139,"column":0},"generated":{"line":2140,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2140,"column":0},"generated":{"line":2141,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2141,"column":0},"generated":{"line":2142,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2142,"column":0},"generated":{"line":2143,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2143,"column":0},"generated":{"line":2144,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2144,"column":0},"generated":{"line":2145,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2145,"column":0},"generated":{"line":2146,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2146,"column":0},"generated":{"line":2147,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2147,"column":0},"generated":{"line":2148,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2148,"column":0},"generated":{"line":2149,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2149,"column":0},"generated":{"line":2150,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2150,"column":0},"generated":{"line":2151,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2151,"column":0},"generated":{"line":2152,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2152,"column":0},"generated":{"line":2153,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2153,"column":0},"generated":{"line":2154,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2154,"column":0},"generated":{"line":2155,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2155,"column":0},"generated":{"line":2156,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2156,"column":0},"generated":{"line":2157,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2157,"column":0},"generated":{"line":2158,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2158,"column":0},"generated":{"line":2159,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2159,"column":0},"generated":{"line":2160,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2160,"column":0},"generated":{"line":2161,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2161,"column":0},"generated":{"line":2162,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2162,"column":0},"generated":{"line":2163,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2163,"column":0},"generated":{"line":2164,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2164,"column":0},"generated":{"line":2165,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2165,"column":0},"generated":{"line":2166,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2166,"column":0},"generated":{"line":2167,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2167,"column":0},"generated":{"line":2168,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2168,"column":0},"generated":{"line":2169,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2169,"column":0},"generated":{"line":2170,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2170,"column":0},"generated":{"line":2171,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2171,"column":0},"generated":{"line":2172,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2172,"column":0},"generated":{"line":2173,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2173,"column":0},"generated":{"line":2174,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2174,"column":0},"generated":{"line":2175,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2175,"column":0},"generated":{"line":2176,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2176,"column":0},"generated":{"line":2177,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2177,"column":0},"generated":{"line":2178,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2178,"column":0},"generated":{"line":2179,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2179,"column":0},"generated":{"line":2180,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2180,"column":0},"generated":{"line":2181,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2181,"column":0},"generated":{"line":2182,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2182,"column":0},"generated":{"line":2183,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2183,"column":0},"generated":{"line":2184,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2184,"column":0},"generated":{"line":2185,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2185,"column":0},"generated":{"line":2186,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2186,"column":0},"generated":{"line":2187,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2187,"column":0},"generated":{"line":2188,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2188,"column":0},"generated":{"line":2189,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2189,"column":0},"generated":{"line":2190,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2190,"column":0},"generated":{"line":2191,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2191,"column":0},"generated":{"line":2192,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2192,"column":0},"generated":{"line":2193,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2193,"column":0},"generated":{"line":2194,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2194,"column":0},"generated":{"line":2195,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2195,"column":0},"generated":{"line":2196,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2196,"column":0},"generated":{"line":2197,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2197,"column":0},"generated":{"line":2198,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2198,"column":0},"generated":{"line":2199,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2199,"column":0},"generated":{"line":2200,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2200,"column":0},"generated":{"line":2201,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2201,"column":0},"generated":{"line":2202,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2202,"column":0},"generated":{"line":2203,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2203,"column":0},"generated":{"line":2204,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2204,"column":0},"generated":{"line":2205,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2205,"column":0},"generated":{"line":2206,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2206,"column":0},"generated":{"line":2207,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2207,"column":0},"generated":{"line":2208,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2208,"column":0},"generated":{"line":2209,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2209,"column":0},"generated":{"line":2210,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2210,"column":0},"generated":{"line":2211,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2211,"column":0},"generated":{"line":2212,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2212,"column":0},"generated":{"line":2213,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2213,"column":0},"generated":{"line":2214,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2214,"column":0},"generated":{"line":2215,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2215,"column":0},"generated":{"line":2216,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2216,"column":0},"generated":{"line":2217,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2217,"column":0},"generated":{"line":2218,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2218,"column":0},"generated":{"line":2219,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2219,"column":0},"generated":{"line":2220,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2220,"column":0},"generated":{"line":2221,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2221,"column":0},"generated":{"line":2222,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2222,"column":0},"generated":{"line":2223,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2223,"column":0},"generated":{"line":2224,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2224,"column":0},"generated":{"line":2225,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2225,"column":0},"generated":{"line":2226,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2226,"column":0},"generated":{"line":2227,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2227,"column":0},"generated":{"line":2228,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2228,"column":0},"generated":{"line":2229,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2229,"column":0},"generated":{"line":2230,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2230,"column":0},"generated":{"line":2231,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2231,"column":0},"generated":{"line":2232,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2232,"column":0},"generated":{"line":2233,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2233,"column":0},"generated":{"line":2234,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2234,"column":0},"generated":{"line":2235,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2235,"column":0},"generated":{"line":2236,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2236,"column":0},"generated":{"line":2237,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2237,"column":0},"generated":{"line":2238,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2238,"column":0},"generated":{"line":2239,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2239,"column":0},"generated":{"line":2240,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2240,"column":0},"generated":{"line":2241,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2241,"column":0},"generated":{"line":2242,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2242,"column":0},"generated":{"line":2243,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2243,"column":0},"generated":{"line":2244,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2244,"column":0},"generated":{"line":2245,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2245,"column":0},"generated":{"line":2246,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2246,"column":0},"generated":{"line":2247,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2247,"column":0},"generated":{"line":2248,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2248,"column":0},"generated":{"line":2249,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2249,"column":0},"generated":{"line":2250,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2250,"column":0},"generated":{"line":2251,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2251,"column":0},"generated":{"line":2252,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2252,"column":0},"generated":{"line":2253,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2253,"column":0},"generated":{"line":2254,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2254,"column":0},"generated":{"line":2255,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2255,"column":0},"generated":{"line":2256,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2256,"column":0},"generated":{"line":2257,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2257,"column":0},"generated":{"line":2258,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2258,"column":0},"generated":{"line":2259,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2259,"column":0},"generated":{"line":2260,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2260,"column":0},"generated":{"line":2261,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2261,"column":0},"generated":{"line":2262,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2262,"column":0},"generated":{"line":2263,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2263,"column":0},"generated":{"line":2264,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2264,"column":0},"generated":{"line":2265,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2265,"column":0},"generated":{"line":2266,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2266,"column":0},"generated":{"line":2267,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2267,"column":0},"generated":{"line":2268,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2268,"column":0},"generated":{"line":2269,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2269,"column":0},"generated":{"line":2270,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2270,"column":0},"generated":{"line":2271,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2271,"column":0},"generated":{"line":2272,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2272,"column":0},"generated":{"line":2273,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2273,"column":0},"generated":{"line":2274,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2274,"column":0},"generated":{"line":2275,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2275,"column":0},"generated":{"line":2276,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2276,"column":0},"generated":{"line":2277,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2277,"column":0},"generated":{"line":2278,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2278,"column":0},"generated":{"line":2279,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2279,"column":0},"generated":{"line":2280,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2280,"column":0},"generated":{"line":2281,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2281,"column":0},"generated":{"line":2282,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2282,"column":0},"generated":{"line":2283,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2283,"column":0},"generated":{"line":2284,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2284,"column":0},"generated":{"line":2285,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2285,"column":0},"generated":{"line":2286,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2286,"column":0},"generated":{"line":2287,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2287,"column":0},"generated":{"line":2288,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2288,"column":0},"generated":{"line":2289,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2289,"column":0},"generated":{"line":2290,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2290,"column":0},"generated":{"line":2291,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2291,"column":0},"generated":{"line":2292,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2292,"column":0},"generated":{"line":2293,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2293,"column":0},"generated":{"line":2294,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2294,"column":0},"generated":{"line":2295,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2295,"column":0},"generated":{"line":2296,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2296,"column":0},"generated":{"line":2297,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2297,"column":0},"generated":{"line":2298,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2298,"column":0},"generated":{"line":2299,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2299,"column":0},"generated":{"line":2300,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2300,"column":0},"generated":{"line":2301,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2301,"column":0},"generated":{"line":2302,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2302,"column":0},"generated":{"line":2303,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2303,"column":0},"generated":{"line":2304,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2304,"column":0},"generated":{"line":2305,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2305,"column":0},"generated":{"line":2306,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2306,"column":0},"generated":{"line":2307,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2307,"column":0},"generated":{"line":2308,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2308,"column":0},"generated":{"line":2309,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2309,"column":0},"generated":{"line":2310,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2310,"column":0},"generated":{"line":2311,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2311,"column":0},"generated":{"line":2312,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2312,"column":0},"generated":{"line":2313,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2313,"column":0},"generated":{"line":2314,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2314,"column":0},"generated":{"line":2315,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2315,"column":0},"generated":{"line":2316,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2316,"column":0},"generated":{"line":2317,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2317,"column":0},"generated":{"line":2318,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2318,"column":0},"generated":{"line":2319,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2319,"column":0},"generated":{"line":2320,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2320,"column":0},"generated":{"line":2321,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2321,"column":0},"generated":{"line":2322,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2322,"column":0},"generated":{"line":2323,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2323,"column":0},"generated":{"line":2324,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2324,"column":0},"generated":{"line":2325,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2325,"column":0},"generated":{"line":2326,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2326,"column":0},"generated":{"line":2327,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2327,"column":0},"generated":{"line":2328,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2328,"column":0},"generated":{"line":2329,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2329,"column":0},"generated":{"line":2330,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2330,"column":0},"generated":{"line":2331,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2331,"column":0},"generated":{"line":2332,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2332,"column":0},"generated":{"line":2333,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2333,"column":0},"generated":{"line":2334,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2334,"column":0},"generated":{"line":2335,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2335,"column":0},"generated":{"line":2336,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2336,"column":0},"generated":{"line":2337,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2337,"column":0},"generated":{"line":2338,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2338,"column":0},"generated":{"line":2339,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2339,"column":0},"generated":{"line":2340,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2340,"column":0},"generated":{"line":2341,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2341,"column":0},"generated":{"line":2342,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2342,"column":0},"generated":{"line":2343,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2343,"column":0},"generated":{"line":2344,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2344,"column":0},"generated":{"line":2345,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2345,"column":0},"generated":{"line":2346,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2346,"column":0},"generated":{"line":2347,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2347,"column":0},"generated":{"line":2348,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2348,"column":0},"generated":{"line":2349,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2349,"column":0},"generated":{"line":2350,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2350,"column":0},"generated":{"line":2351,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2351,"column":0},"generated":{"line":2352,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2352,"column":0},"generated":{"line":2353,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2353,"column":0},"generated":{"line":2354,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2354,"column":0},"generated":{"line":2355,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2355,"column":0},"generated":{"line":2356,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2356,"column":0},"generated":{"line":2357,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2357,"column":0},"generated":{"line":2358,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2358,"column":0},"generated":{"line":2359,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2359,"column":0},"generated":{"line":2360,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2360,"column":0},"generated":{"line":2361,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2361,"column":0},"generated":{"line":2362,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2362,"column":0},"generated":{"line":2363,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2363,"column":0},"generated":{"line":2364,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2364,"column":0},"generated":{"line":2365,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2365,"column":0},"generated":{"line":2366,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2366,"column":0},"generated":{"line":2367,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2367,"column":0},"generated":{"line":2368,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2368,"column":0},"generated":{"line":2369,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2369,"column":0},"generated":{"line":2370,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2370,"column":0},"generated":{"line":2371,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2371,"column":0},"generated":{"line":2372,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2372,"column":0},"generated":{"line":2373,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2373,"column":0},"generated":{"line":2374,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2374,"column":0},"generated":{"line":2375,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2375,"column":0},"generated":{"line":2376,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2376,"column":0},"generated":{"line":2377,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2377,"column":0},"generated":{"line":2378,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2378,"column":0},"generated":{"line":2379,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2379,"column":0},"generated":{"line":2380,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2380,"column":0},"generated":{"line":2381,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2381,"column":0},"generated":{"line":2382,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2382,"column":0},"generated":{"line":2383,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2383,"column":0},"generated":{"line":2384,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2384,"column":0},"generated":{"line":2385,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2385,"column":0},"generated":{"line":2386,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2386,"column":0},"generated":{"line":2387,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2387,"column":0},"generated":{"line":2388,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2388,"column":0},"generated":{"line":2389,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2389,"column":0},"generated":{"line":2390,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2390,"column":0},"generated":{"line":2391,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2391,"column":0},"generated":{"line":2392,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2392,"column":0},"generated":{"line":2393,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2393,"column":0},"generated":{"line":2394,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2394,"column":0},"generated":{"line":2395,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2395,"column":0},"generated":{"line":2396,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2396,"column":0},"generated":{"line":2397,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2397,"column":0},"generated":{"line":2398,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2398,"column":0},"generated":{"line":2399,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2399,"column":0},"generated":{"line":2400,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2400,"column":0},"generated":{"line":2401,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2401,"column":0},"generated":{"line":2402,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2402,"column":0},"generated":{"line":2403,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2403,"column":0},"generated":{"line":2404,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2404,"column":0},"generated":{"line":2405,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2405,"column":0},"generated":{"line":2406,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2406,"column":0},"generated":{"line":2407,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2407,"column":0},"generated":{"line":2408,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2408,"column":0},"generated":{"line":2409,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2409,"column":0},"generated":{"line":2410,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2410,"column":0},"generated":{"line":2411,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2411,"column":0},"generated":{"line":2412,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2412,"column":0},"generated":{"line":2413,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2413,"column":0},"generated":{"line":2414,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2414,"column":0},"generated":{"line":2415,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2415,"column":0},"generated":{"line":2416,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2416,"column":0},"generated":{"line":2417,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2417,"column":0},"generated":{"line":2418,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2418,"column":0},"generated":{"line":2419,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2419,"column":0},"generated":{"line":2420,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2420,"column":0},"generated":{"line":2421,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2421,"column":0},"generated":{"line":2422,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2422,"column":0},"generated":{"line":2423,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2423,"column":0},"generated":{"line":2424,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2424,"column":0},"generated":{"line":2425,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2425,"column":0},"generated":{"line":2426,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2426,"column":0},"generated":{"line":2427,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2427,"column":0},"generated":{"line":2428,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2428,"column":0},"generated":{"line":2429,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2429,"column":0},"generated":{"line":2430,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2430,"column":0},"generated":{"line":2431,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2431,"column":0},"generated":{"line":2432,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2432,"column":0},"generated":{"line":2433,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2433,"column":0},"generated":{"line":2434,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2434,"column":0},"generated":{"line":2435,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2435,"column":0},"generated":{"line":2436,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2436,"column":0},"generated":{"line":2437,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2437,"column":0},"generated":{"line":2438,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2438,"column":0},"generated":{"line":2439,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2439,"column":0},"generated":{"line":2440,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2440,"column":0},"generated":{"line":2441,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2441,"column":0},"generated":{"line":2442,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2442,"column":0},"generated":{"line":2443,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2443,"column":0},"generated":{"line":2444,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2444,"column":0},"generated":{"line":2445,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2445,"column":0},"generated":{"line":2446,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2446,"column":0},"generated":{"line":2447,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2447,"column":0},"generated":{"line":2448,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2448,"column":0},"generated":{"line":2449,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2449,"column":0},"generated":{"line":2450,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2450,"column":0},"generated":{"line":2451,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2451,"column":0},"generated":{"line":2452,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2452,"column":0},"generated":{"line":2453,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2453,"column":0},"generated":{"line":2454,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2454,"column":0},"generated":{"line":2455,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2455,"column":0},"generated":{"line":2456,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2456,"column":0},"generated":{"line":2457,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2457,"column":0},"generated":{"line":2458,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2458,"column":0},"generated":{"line":2459,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2459,"column":0},"generated":{"line":2460,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2460,"column":0},"generated":{"line":2461,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2461,"column":0},"generated":{"line":2462,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2462,"column":0},"generated":{"line":2463,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2463,"column":0},"generated":{"line":2464,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2464,"column":0},"generated":{"line":2465,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2465,"column":0},"generated":{"line":2466,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2466,"column":0},"generated":{"line":2467,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2467,"column":0},"generated":{"line":2468,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2468,"column":0},"generated":{"line":2469,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2469,"column":0},"generated":{"line":2470,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2470,"column":0},"generated":{"line":2471,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2471,"column":0},"generated":{"line":2472,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2472,"column":0},"generated":{"line":2473,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2473,"column":0},"generated":{"line":2474,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2474,"column":0},"generated":{"line":2475,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2475,"column":0},"generated":{"line":2476,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2476,"column":0},"generated":{"line":2477,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2477,"column":0},"generated":{"line":2478,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2478,"column":0},"generated":{"line":2479,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2479,"column":0},"generated":{"line":2480,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2480,"column":0},"generated":{"line":2481,"column":0}},{"source":"../node_modules/js-beautify/js/lib/beautify.js","original":{"line":2481,"column":0},"generated":{"line":2482,"column":0}}],"sources":{"../node_modules/js-beautify/js/lib/beautify.js":"/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n\n JS Beautifier\n---------------\n\n\n  Written by Einar Lielmanis, <einar@jsbeautifier.org>\n      http://jsbeautifier.org/\n\n  Originally converted to javascript by Vital, <vital76@gmail.com>\n  \"End braces on own line\" added by Chris J. Shull, <chrisjshull@gmail.com>\n  Parsing improvements for brace-less statements by Liam Newman <bitwiseman@gmail.com>\n\n\n  Usage:\n    js_beautify(js_source_text);\n    js_beautify(js_source_text, options);\n\n  The options are:\n    indent_size (default 4)          - indentation size,\n    indent_char (default space)      - character to indent with,\n    preserve_newlines (default true) - whether existing line breaks should be preserved,\n    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk,\n\n    jslint_happy (default false) - if true, then jslint-stricter mode is enforced.\n\n            jslint_happy        !jslint_happy\n            ---------------------------------\n            function ()         function()\n\n            switch () {         switch() {\n            case 1:               case 1:\n              break;                break;\n            }                   }\n\n    space_after_anon_function (default false) - should the space before an anonymous function's parens be added, \"function()\" vs \"function ()\",\n          NOTE: This option is overriden by jslint_happy (i.e. if jslint_happy is true, space_after_anon_function is true by design)\n\n    brace_style (default \"collapse\") - \"collapse\" | \"expand\" | \"end-expand\" | \"none\" | any of the former + \",preserve-inline\"\n            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.\n            preserve-inline will try to preserve inline blocks of curly braces\n\n    space_before_conditional (default true) - should the space before conditional statement be added, \"if(true)\" vs \"if (true)\",\n\n    unescape_strings (default false) - should printable characters in strings encoded in \\xNN notation be unescaped, \"example\" vs \"\\x65\\x78\\x61\\x6d\\x70\\x6c\\x65\"\n\n    wrap_line_length (default unlimited) - lines should wrap at next opportunity after this number of characters.\n          NOTE: This is not a hard limit. Lines will continue until a point where a newline would\n                be preserved if it were present.\n\n    end_with_newline (default false)  - end output with a newline\n\n\n    e.g\n\n    js_beautify(js_source_text, {\n      'indent_size': 1,\n      'indent_char': '\\t'\n    });\n\n*/\n\n// Object.values polyfill found here:\n// http://tokenposts.blogspot.com.au/2012/04/javascript-objectkeys-browser.html\nif (!Object.values) {\n    Object.values = function(o) {\n        if (o !== Object(o)) {\n            throw new TypeError('Object.values called on a non-object');\n        }\n        var k = [],\n            p;\n        for (p in o) {\n            if (Object.prototype.hasOwnProperty.call(o, p)) {\n                k.push(o[p]);\n            }\n        }\n        return k;\n    };\n}\n\n(function() {\n\n    function mergeOpts(allOptions, targetType) {\n        var finalOpts = {};\n        var name;\n\n        for (name in allOptions) {\n            if (name !== targetType) {\n                finalOpts[name] = allOptions[name];\n            }\n        }\n\n        //merge in the per type settings for the targetType\n        if (targetType in allOptions) {\n            for (name in allOptions[targetType]) {\n                finalOpts[name] = allOptions[targetType][name];\n            }\n        }\n        return finalOpts;\n    }\n\n    function js_beautify(js_source_text, options) {\n\n        var acorn = {};\n        (function(exports) {\n            /* jshint curly: false */\n            // This section of code is taken from acorn.\n            //\n            // Acorn was written by Marijn Haverbeke and released under an MIT\n            // license. The Unicode regexps (for identifiers and whitespace) were\n            // taken from [Esprima](http://esprima.org) by Ariya Hidayat.\n            //\n            // Git repositories for Acorn are available at\n            //\n            //     http://marijnhaverbeke.nl/git/acorn\n            //     https://github.com/marijnh/acorn.git\n\n            // ## Character categories\n\n            // Big ugly regular expressions that match characters in the\n            // whitespace, identifier, and identifier-start categories. These\n            // are only applied when a character is found to actually have a\n            // code point above 128.\n\n            var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/; // jshint ignore:line\n            var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n            var nonASCIIidentifierChars = \"\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n            var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n            var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\n            // Whether a single character denotes a newline.\n\n            exports.newline = /[\\n\\r\\u2028\\u2029]/;\n\n            // Matches a whole line break (where CRLF is considered a single\n            // line break). Used to count lines.\n\n            // in javascript, these two differ\n            // in python they are the same, different methods are called on them\n            exports.lineBreak = new RegExp('\\r\\n|' + exports.newline.source);\n            exports.allLineBreaks = new RegExp(exports.lineBreak.source, 'g');\n\n\n            // Test whether a given character code starts an identifier.\n\n            exports.isIdentifierStart = function(code) {\n                // permit $ (36) and @ (64). @ is used in ES7 decorators.\n                if (code < 65) return code === 36 || code === 64;\n                // 65 through 91 are uppercase letters.\n                if (code < 91) return true;\n                // permit _ (95).\n                if (code < 97) return code === 95;\n                // 97 through 123 are lowercase letters.\n                if (code < 123) return true;\n                return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n            };\n\n            // Test whether a given character is part of an identifier.\n\n            exports.isIdentifierChar = function(code) {\n                if (code < 48) return code === 36;\n                if (code < 58) return true;\n                if (code < 65) return false;\n                if (code < 91) return true;\n                if (code < 97) return code === 95;\n                if (code < 123) return true;\n                return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n            };\n        })(acorn);\n        /* jshint curly: true */\n\n        function in_array(what, arr) {\n            for (var i = 0; i < arr.length; i += 1) {\n                if (arr[i] === what) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        function trim(s) {\n            return s.replace(/^\\s+|\\s+$/g, '');\n        }\n\n        function ltrim(s) {\n            return s.replace(/^\\s+/g, '');\n        }\n\n        // function rtrim(s) {\n        //     return s.replace(/\\s+$/g, '');\n        // }\n\n        function sanitizeOperatorPosition(opPosition) {\n            opPosition = opPosition || OPERATOR_POSITION.before_newline;\n\n            var validPositionValues = Object.values(OPERATOR_POSITION);\n\n            if (!in_array(opPosition, validPositionValues)) {\n                throw new Error(\"Invalid Option Value: The option 'operator_position' must be one of the following values\\n\" +\n                    validPositionValues +\n                    \"\\nYou passed in: '\" + opPosition + \"'\");\n            }\n\n            return opPosition;\n        }\n\n        var OPERATOR_POSITION = {\n            before_newline: 'before-newline',\n            after_newline: 'after-newline',\n            preserve_newline: 'preserve-newline',\n        };\n\n        var OPERATOR_POSITION_BEFORE_OR_PRESERVE = [OPERATOR_POSITION.before_newline, OPERATOR_POSITION.preserve_newline];\n\n        var MODE = {\n            BlockStatement: 'BlockStatement', // 'BLOCK'\n            Statement: 'Statement', // 'STATEMENT'\n            ObjectLiteral: 'ObjectLiteral', // 'OBJECT',\n            ArrayLiteral: 'ArrayLiteral', //'[EXPRESSION]',\n            ForInitializer: 'ForInitializer', //'(FOR-EXPRESSION)',\n            Conditional: 'Conditional', //'(COND-EXPRESSION)',\n            Expression: 'Expression' //'(EXPRESSION)'\n        };\n\n        function Beautifier(js_source_text, options) {\n            \"use strict\";\n            var output;\n            var tokens = [],\n                token_pos;\n            var Tokenizer;\n            var current_token;\n            var last_type, last_last_text, indent_string;\n            var flags, previous_flags, flag_store;\n            var prefix;\n\n            var handlers, opt;\n            var baseIndentString = '';\n\n            handlers = {\n                'TK_START_EXPR': handle_start_expr,\n                'TK_END_EXPR': handle_end_expr,\n                'TK_START_BLOCK': handle_start_block,\n                'TK_END_BLOCK': handle_end_block,\n                'TK_WORD': handle_word,\n                'TK_RESERVED': handle_word,\n                'TK_SEMICOLON': handle_semicolon,\n                'TK_STRING': handle_string,\n                'TK_EQUALS': handle_equals,\n                'TK_OPERATOR': handle_operator,\n                'TK_COMMA': handle_comma,\n                'TK_BLOCK_COMMENT': handle_block_comment,\n                'TK_COMMENT': handle_comment,\n                'TK_DOT': handle_dot,\n                'TK_UNKNOWN': handle_unknown,\n                'TK_EOF': handle_eof\n            };\n\n            function create_flags(flags_base, mode) {\n                var next_indent_level = 0;\n                if (flags_base) {\n                    next_indent_level = flags_base.indentation_level;\n                    if (!output.just_added_newline() &&\n                        flags_base.line_indent_level > next_indent_level) {\n                        next_indent_level = flags_base.line_indent_level;\n                    }\n                }\n\n                var next_flags = {\n                    mode: mode,\n                    parent: flags_base,\n                    last_text: flags_base ? flags_base.last_text : '', // last token text\n                    last_word: flags_base ? flags_base.last_word : '', // last 'TK_WORD' passed\n                    declaration_statement: false,\n                    declaration_assignment: false,\n                    multiline_frame: false,\n                    inline_frame: false,\n                    if_block: false,\n                    else_block: false,\n                    do_block: false,\n                    do_while: false,\n                    import_block: false,\n                    in_case_statement: false, // switch(..){ INSIDE HERE }\n                    in_case: false, // we're on the exact line with \"case 0:\"\n                    case_body: false, // the indented case-action block\n                    indentation_level: next_indent_level,\n                    line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,\n                    start_line_index: output.get_line_number(),\n                    ternary_depth: 0\n                };\n                return next_flags;\n            }\n\n            // Some interpreters have unexpected results with foo = baz || bar;\n            options = options ? options : {};\n\n            // Allow the setting of language/file-type specific options\n            // with inheritance of overall settings\n            options = mergeOpts(options, 'js');\n\n            opt = {};\n\n            // compatibility, re\n            if (options.brace_style === \"expand-strict\") { //graceful handling of deprecated option\n                options.brace_style = \"expand\";\n            } else if (options.brace_style === \"collapse-preserve-inline\") { //graceful handling of deprecated option\n                options.brace_style = \"collapse,preserve-inline\";\n            } else if (options.braces_on_own_line !== undefined) { //graceful handling of deprecated option\n                options.brace_style = options.braces_on_own_line ? \"expand\" : \"collapse\";\n            } else if (!options.brace_style) //Nothing exists to set it\n            {\n                options.brace_style = \"collapse\";\n            }\n\n\n            var brace_style_split = options.brace_style.split(/[^a-zA-Z0-9_\\-]+/);\n            opt.brace_style = brace_style_split[0];\n            opt.brace_preserve_inline = brace_style_split[1] ? brace_style_split[1] : false;\n\n            opt.indent_size = options.indent_size ? parseInt(options.indent_size, 10) : 4;\n            opt.indent_char = options.indent_char ? options.indent_char : ' ';\n            opt.eol = options.eol ? options.eol : 'auto';\n            opt.preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;\n            opt.break_chained_methods = (options.break_chained_methods === undefined) ? false : options.break_chained_methods;\n            opt.max_preserve_newlines = (options.max_preserve_newlines === undefined) ? 0 : parseInt(options.max_preserve_newlines, 10);\n            opt.space_in_paren = (options.space_in_paren === undefined) ? false : options.space_in_paren;\n            opt.space_in_empty_paren = (options.space_in_empty_paren === undefined) ? false : options.space_in_empty_paren;\n            opt.jslint_happy = (options.jslint_happy === undefined) ? false : options.jslint_happy;\n            opt.space_after_anon_function = (options.space_after_anon_function === undefined) ? false : options.space_after_anon_function;\n            opt.keep_array_indentation = (options.keep_array_indentation === undefined) ? false : options.keep_array_indentation;\n            opt.space_before_conditional = (options.space_before_conditional === undefined) ? true : options.space_before_conditional;\n            opt.unescape_strings = (options.unescape_strings === undefined) ? false : options.unescape_strings;\n            opt.wrap_line_length = (options.wrap_line_length === undefined) ? 0 : parseInt(options.wrap_line_length, 10);\n            opt.e4x = (options.e4x === undefined) ? false : options.e4x;\n            opt.end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;\n            opt.comma_first = (options.comma_first === undefined) ? false : options.comma_first;\n            opt.operator_position = sanitizeOperatorPosition(options.operator_position);\n\n            // For testing of beautify ignore:start directive\n            opt.test_output_raw = (options.test_output_raw === undefined) ? false : options.test_output_raw;\n\n            // force opt.space_after_anon_function to true if opt.jslint_happy\n            if (opt.jslint_happy) {\n                opt.space_after_anon_function = true;\n            }\n\n            if (options.indent_with_tabs) {\n                opt.indent_char = '\\t';\n                opt.indent_size = 1;\n            }\n\n            if (opt.eol === 'auto') {\n                opt.eol = '\\n';\n                if (js_source_text && acorn.lineBreak.test(js_source_text || '')) {\n                    opt.eol = js_source_text.match(acorn.lineBreak)[0];\n                }\n            }\n\n            opt.eol = opt.eol.replace(/\\\\r/, '\\r').replace(/\\\\n/, '\\n');\n\n            //----------------------------------\n            indent_string = '';\n            while (opt.indent_size > 0) {\n                indent_string += opt.indent_char;\n                opt.indent_size -= 1;\n            }\n\n            var preindent_index = 0;\n            if (js_source_text && js_source_text.length) {\n                while ((js_source_text.charAt(preindent_index) === ' ' ||\n                        js_source_text.charAt(preindent_index) === '\\t')) {\n                    baseIndentString += js_source_text.charAt(preindent_index);\n                    preindent_index += 1;\n                }\n                js_source_text = js_source_text.substring(preindent_index);\n            }\n\n            last_type = 'TK_START_BLOCK'; // last token type\n            last_last_text = ''; // pre-last token text\n            output = new Output(indent_string, baseIndentString);\n\n            // If testing the ignore directive, start with output disable set to true\n            output.raw = opt.test_output_raw;\n\n\n            // Stack of parsing/formatting states, including MODE.\n            // We tokenize, parse, and output in an almost purely a forward-only stream of token input\n            // and formatted output.  This makes the beautifier less accurate than full parsers\n            // but also far more tolerant of syntax errors.\n            //\n            // For example, the default mode is MODE.BlockStatement. If we see a '{' we push a new frame of type\n            // MODE.BlockStatement on the the stack, even though it could be object literal.  If we later\n            // encounter a \":\", we'll switch to to MODE.ObjectLiteral.  If we then see a \";\",\n            // most full parsers would die, but the beautifier gracefully falls back to\n            // MODE.BlockStatement and continues on.\n            flag_store = [];\n            set_mode(MODE.BlockStatement);\n\n            this.beautify = function() {\n\n                /*jshint onevar:true */\n                var sweet_code;\n                Tokenizer = new tokenizer(js_source_text, opt, indent_string);\n                tokens = Tokenizer.tokenize();\n                token_pos = 0;\n\n                current_token = get_token();\n                while (current_token) {\n                    handlers[current_token.type]();\n\n                    last_last_text = flags.last_text;\n                    last_type = current_token.type;\n                    flags.last_text = current_token.text;\n\n                    token_pos += 1;\n                    current_token = get_token();\n                }\n\n                sweet_code = output.get_code();\n                if (opt.end_with_newline) {\n                    sweet_code += '\\n';\n                }\n\n                if (opt.eol !== '\\n') {\n                    sweet_code = sweet_code.replace(/[\\n]/g, opt.eol);\n                }\n\n                return sweet_code;\n            };\n\n            function handle_whitespace_and_comments(local_token, preserve_statement_flags) {\n                var newlines = local_token.newlines;\n                var keep_whitespace = opt.keep_array_indentation && is_array(flags.mode);\n                var temp_token = current_token;\n\n                for (var h = 0; h < local_token.comments_before.length; h++) {\n                    // The cleanest handling of inline comments is to treat them as though they aren't there.\n                    // Just continue formatting and the behavior should be logical.\n                    // Also ignore unknown tokens.  Again, this should result in better behavior.\n                    current_token = local_token.comments_before[h];\n                    handle_whitespace_and_comments(current_token, preserve_statement_flags);\n                    handlers[current_token.type](preserve_statement_flags);\n                }\n                current_token = temp_token;\n\n                if (keep_whitespace) {\n                    for (var i = 0; i < newlines; i += 1) {\n                        print_newline(i > 0, preserve_statement_flags);\n                    }\n                } else {\n                    if (opt.max_preserve_newlines && newlines > opt.max_preserve_newlines) {\n                        newlines = opt.max_preserve_newlines;\n                    }\n\n                    if (opt.preserve_newlines) {\n                        if (local_token.newlines > 1) {\n                            print_newline(false, preserve_statement_flags);\n                            for (var j = 1; j < newlines; j += 1) {\n                                print_newline(true, preserve_statement_flags);\n                            }\n                        }\n                    }\n                }\n\n            }\n\n            // we could use just string.split, but\n            // IE doesn't like returning empty strings\n            function split_linebreaks(s) {\n                //return s.split(/\\x0d\\x0a|\\x0a/);\n\n                s = s.replace(acorn.allLineBreaks, '\\n');\n                var out = [],\n                    idx = s.indexOf(\"\\n\");\n                while (idx !== -1) {\n                    out.push(s.substring(0, idx));\n                    s = s.substring(idx + 1);\n                    idx = s.indexOf(\"\\n\");\n                }\n                if (s.length) {\n                    out.push(s);\n                }\n                return out;\n            }\n\n            var newline_restricted_tokens = ['break', 'continue', 'return', 'throw'];\n\n            function allow_wrap_or_preserved_newline(force_linewrap) {\n                force_linewrap = (force_linewrap === undefined) ? false : force_linewrap;\n\n                // Never wrap the first token on a line\n                if (output.just_added_newline()) {\n                    return;\n                }\n\n                var shouldPreserveOrForce = (opt.preserve_newlines && current_token.wanted_newline) || force_linewrap;\n                var operatorLogicApplies = in_array(flags.last_text, Tokenizer.positionable_operators) || in_array(current_token.text, Tokenizer.positionable_operators);\n\n                if (operatorLogicApplies) {\n                    var shouldPrintOperatorNewline = (\n                            in_array(flags.last_text, Tokenizer.positionable_operators) &&\n                            in_array(opt.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)\n                        ) ||\n                        in_array(current_token.text, Tokenizer.positionable_operators);\n                    shouldPreserveOrForce = shouldPreserveOrForce && shouldPrintOperatorNewline;\n                }\n\n                if (shouldPreserveOrForce) {\n                    print_newline(false, true);\n                } else if (opt.wrap_line_length) {\n                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, newline_restricted_tokens)) {\n                        // These tokens should never have a newline inserted\n                        // between them and the following expression.\n                        return;\n                    }\n                    var proposed_line_length = output.current_line.get_character_count() + current_token.text.length +\n                        (output.space_before_token ? 1 : 0);\n                    if (proposed_line_length >= opt.wrap_line_length) {\n                        print_newline(false, true);\n                    }\n                }\n            }\n\n            function print_newline(force_newline, preserve_statement_flags) {\n                if (!preserve_statement_flags) {\n                    if (flags.last_text !== ';' && flags.last_text !== ',' && flags.last_text !== '=' && last_type !== 'TK_OPERATOR') {\n                        var next_token = get_token(1);\n                        while (flags.mode === MODE.Statement &&\n                            !(flags.if_block && next_token && next_token.type === 'TK_RESERVED' && next_token.text === 'else') &&\n                            !flags.do_block) {\n                            restore_mode();\n                        }\n                    }\n                }\n\n                if (output.add_new_line(force_newline)) {\n                    flags.multiline_frame = true;\n                }\n            }\n\n            function print_token_line_indentation() {\n                if (output.just_added_newline()) {\n                    if (opt.keep_array_indentation && is_array(flags.mode) && current_token.wanted_newline) {\n                        output.current_line.push(current_token.whitespace_before);\n                        output.space_before_token = false;\n                    } else if (output.set_indent(flags.indentation_level)) {\n                        flags.line_indent_level = flags.indentation_level;\n                    }\n                }\n            }\n\n            function print_token(printable_token) {\n                if (output.raw) {\n                    output.add_raw_token(current_token);\n                    return;\n                }\n\n                if (opt.comma_first && last_type === 'TK_COMMA' &&\n                    output.just_added_newline()) {\n                    if (output.previous_line.last() === ',') {\n                        var popped = output.previous_line.pop();\n                        // if the comma was already at the start of the line,\n                        // pull back onto that line and reprint the indentation\n                        if (output.previous_line.is_empty()) {\n                            output.previous_line.push(popped);\n                            output.trim(true);\n                            output.current_line.pop();\n                            output.trim();\n                        }\n\n                        // add the comma in front of the next token\n                        print_token_line_indentation();\n                        output.add_token(',');\n                        output.space_before_token = true;\n                    }\n                }\n\n                printable_token = printable_token || current_token.text;\n                print_token_line_indentation();\n                output.add_token(printable_token);\n            }\n\n            function indent() {\n                flags.indentation_level += 1;\n            }\n\n            function deindent() {\n                if (flags.indentation_level > 0 &&\n                    ((!flags.parent) || flags.indentation_level > flags.parent.indentation_level)) {\n                    flags.indentation_level -= 1;\n\n                }\n            }\n\n            function set_mode(mode) {\n                if (flags) {\n                    flag_store.push(flags);\n                    previous_flags = flags;\n                } else {\n                    previous_flags = create_flags(null, mode);\n                }\n\n                flags = create_flags(previous_flags, mode);\n            }\n\n            function is_array(mode) {\n                return mode === MODE.ArrayLiteral;\n            }\n\n            function is_expression(mode) {\n                return in_array(mode, [MODE.Expression, MODE.ForInitializer, MODE.Conditional]);\n            }\n\n            function restore_mode() {\n                if (flag_store.length > 0) {\n                    previous_flags = flags;\n                    flags = flag_store.pop();\n                    if (previous_flags.mode === MODE.Statement) {\n                        output.remove_redundant_indentation(previous_flags);\n                    }\n                }\n            }\n\n            function start_of_object_property() {\n                return flags.parent.mode === MODE.ObjectLiteral && flags.mode === MODE.Statement && (\n                    (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set'])));\n            }\n\n            function start_of_statement() {\n                if (\n                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') ||\n                    (last_type === 'TK_RESERVED' && flags.last_text === 'do') ||\n                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['return', 'throw']) && !current_token.wanted_newline) ||\n                    (last_type === 'TK_RESERVED' && flags.last_text === 'else' &&\n                        !(current_token.type === 'TK_RESERVED' && current_token.text === 'if' && !current_token.comments_before.length)) ||\n                    (last_type === 'TK_END_EXPR' && (previous_flags.mode === MODE.ForInitializer || previous_flags.mode === MODE.Conditional)) ||\n                    (last_type === 'TK_WORD' && flags.mode === MODE.BlockStatement &&\n                        !flags.in_case &&\n                        !(current_token.text === '--' || current_token.text === '++') &&\n                        last_last_text !== 'function' &&\n                        current_token.type !== 'TK_WORD' && current_token.type !== 'TK_RESERVED') ||\n                    (flags.mode === MODE.ObjectLiteral && (\n                        (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set']))))\n                ) {\n\n                    set_mode(MODE.Statement);\n                    indent();\n\n                    handle_whitespace_and_comments(current_token, true);\n\n                    // Issue #276:\n                    // If starting a new statement with [if, for, while, do], push to a new line.\n                    // if (a) if (b) if(c) d(); else e(); else f();\n                    if (!start_of_object_property()) {\n                        allow_wrap_or_preserved_newline(\n                            current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['do', 'for', 'if', 'while']));\n                    }\n\n                    return true;\n                }\n                return false;\n            }\n\n            function all_lines_start_with(lines, c) {\n                for (var i = 0; i < lines.length; i++) {\n                    var line = trim(lines[i]);\n                    if (line.charAt(0) !== c) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n\n            function each_line_matches_indent(lines, indent) {\n                var i = 0,\n                    len = lines.length,\n                    line;\n                for (; i < len; i++) {\n                    line = lines[i];\n                    // allow empty lines to pass through\n                    if (line && line.indexOf(indent) !== 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n\n            function is_special_word(word) {\n                return in_array(word, ['case', 'return', 'do', 'if', 'throw', 'else']);\n            }\n\n            function get_token(offset) {\n                var index = token_pos + (offset || 0);\n                return (index < 0 || index >= tokens.length) ? null : tokens[index];\n            }\n\n            function handle_start_expr() {\n                // The conditional starts the statement if appropriate.\n                if (!start_of_statement()) {\n                    handle_whitespace_and_comments(current_token);\n                }\n\n                var next_mode = MODE.Expression;\n                if (current_token.text === '[') {\n\n                    if (last_type === 'TK_WORD' || flags.last_text === ')') {\n                        // this is array index specifier, break immediately\n                        // a[x], fn()[x]\n                        if (last_type === 'TK_RESERVED' && in_array(flags.last_text, Tokenizer.line_starters)) {\n                            output.space_before_token = true;\n                        }\n                        set_mode(next_mode);\n                        print_token();\n                        indent();\n                        if (opt.space_in_paren) {\n                            output.space_before_token = true;\n                        }\n                        return;\n                    }\n\n                    next_mode = MODE.ArrayLiteral;\n                    if (is_array(flags.mode)) {\n                        if (flags.last_text === '[' ||\n                            (flags.last_text === ',' && (last_last_text === ']' || last_last_text === '}'))) {\n                            // ], [ goes to new line\n                            // }, [ goes to new line\n                            if (!opt.keep_array_indentation) {\n                                print_newline();\n                            }\n                        }\n                    }\n\n                } else {\n                    if (last_type === 'TK_RESERVED' && flags.last_text === 'for') {\n                        next_mode = MODE.ForInitializer;\n                    } else if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['if', 'while'])) {\n                        next_mode = MODE.Conditional;\n                    } else {\n                        // next_mode = MODE.Expression;\n                    }\n                }\n\n                if (flags.last_text === ';' || last_type === 'TK_START_BLOCK') {\n                    print_newline();\n                } else if (last_type === 'TK_END_EXPR' || last_type === 'TK_START_EXPR' || last_type === 'TK_END_BLOCK' || flags.last_text === '.') {\n                    // TODO: Consider whether forcing this is required.  Review failing tests when removed.\n                    allow_wrap_or_preserved_newline(current_token.wanted_newline);\n                    // do nothing on (( and )( and ][ and ]( and .(\n                } else if (!(last_type === 'TK_RESERVED' && current_token.text === '(') && last_type !== 'TK_WORD' && last_type !== 'TK_OPERATOR') {\n                    output.space_before_token = true;\n                } else if ((last_type === 'TK_RESERVED' && (flags.last_word === 'function' || flags.last_word === 'typeof')) ||\n                    (flags.last_text === '*' &&\n                        (in_array(last_last_text, ['function', 'yield']) ||\n                            (flags.mode === MODE.ObjectLiteral && in_array(last_last_text, ['{', ',']))))) {\n                    // function() vs function ()\n                    // yield*() vs yield* ()\n                    // function*() vs function* ()\n                    if (opt.space_after_anon_function) {\n                        output.space_before_token = true;\n                    }\n                } else if (last_type === 'TK_RESERVED' && (in_array(flags.last_text, Tokenizer.line_starters) || flags.last_text === 'catch')) {\n                    if (opt.space_before_conditional) {\n                        output.space_before_token = true;\n                    }\n                }\n\n                // Should be a space between await and an IIFE\n                if (current_token.text === '(' && last_type === 'TK_RESERVED' && flags.last_word === 'await') {\n                    output.space_before_token = true;\n                }\n\n                // Support of this kind of newline preservation.\n                // a = (b &&\n                //     (c || d));\n                if (current_token.text === '(') {\n                    if (last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {\n                        if (!start_of_object_property()) {\n                            allow_wrap_or_preserved_newline();\n                        }\n                    }\n                }\n\n                // Support preserving wrapped arrow function expressions\n                // a.b('c',\n                //     () => d.e\n                // )\n                if (current_token.text === '(' && last_type !== 'TK_WORD' && last_type !== 'TK_RESERVED') {\n                    allow_wrap_or_preserved_newline();\n                }\n\n                set_mode(next_mode);\n                print_token();\n                if (opt.space_in_paren) {\n                    output.space_before_token = true;\n                }\n\n                // In all cases, if we newline while inside an expression it should be indented.\n                indent();\n            }\n\n            function handle_end_expr() {\n                // statements inside expressions are not valid syntax, but...\n                // statements must all be closed when their container closes\n                while (flags.mode === MODE.Statement) {\n                    restore_mode();\n                }\n\n                handle_whitespace_and_comments(current_token);\n\n                if (flags.multiline_frame) {\n                    allow_wrap_or_preserved_newline(current_token.text === ']' && is_array(flags.mode) && !opt.keep_array_indentation);\n                }\n\n                if (opt.space_in_paren) {\n                    if (last_type === 'TK_START_EXPR' && !opt.space_in_empty_paren) {\n                        // () [] no inner space in empty parens like these, ever, ref #320\n                        output.trim();\n                        output.space_before_token = false;\n                    } else {\n                        output.space_before_token = true;\n                    }\n                }\n                if (current_token.text === ']' && opt.keep_array_indentation) {\n                    print_token();\n                    restore_mode();\n                } else {\n                    restore_mode();\n                    print_token();\n                }\n                output.remove_redundant_indentation(previous_flags);\n\n                // do {} while () // no statement required after\n                if (flags.do_while && previous_flags.mode === MODE.Conditional) {\n                    previous_flags.mode = MODE.Expression;\n                    flags.do_block = false;\n                    flags.do_while = false;\n\n                }\n            }\n\n            function handle_start_block() {\n                handle_whitespace_and_comments(current_token);\n\n                // Check if this is should be treated as a ObjectLiteral\n                var next_token = get_token(1);\n                var second_token = get_token(2);\n                if (second_token && (\n                        (in_array(second_token.text, [':', ',']) && in_array(next_token.type, ['TK_STRING', 'TK_WORD', 'TK_RESERVED'])) ||\n                        (in_array(next_token.text, ['get', 'set', '...']) && in_array(second_token.type, ['TK_WORD', 'TK_RESERVED']))\n                    )) {\n                    // We don't support TypeScript,but we didn't break it for a very long time.\n                    // We'll try to keep not breaking it.\n                    if (!in_array(last_last_text, ['class', 'interface'])) {\n                        set_mode(MODE.ObjectLiteral);\n                    } else {\n                        set_mode(MODE.BlockStatement);\n                    }\n                } else if (last_type === 'TK_OPERATOR' && flags.last_text === '=>') {\n                    // arrow function: (param1, paramN) => { statements }\n                    set_mode(MODE.BlockStatement);\n                } else if (in_array(last_type, ['TK_EQUALS', 'TK_START_EXPR', 'TK_COMMA', 'TK_OPERATOR']) ||\n                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['return', 'throw', 'import', 'default']))\n                ) {\n                    // Detecting shorthand function syntax is difficult by scanning forward,\n                    //     so check the surrounding context.\n                    // If the block is being returned, imported, export default, passed as arg,\n                    //     assigned with = or assigned in a nested object, treat as an ObjectLiteral.\n                    set_mode(MODE.ObjectLiteral);\n                } else {\n                    set_mode(MODE.BlockStatement);\n                }\n\n                var empty_braces = !next_token.comments_before.length && next_token.text === '}';\n                var empty_anonymous_function = empty_braces && flags.last_word === 'function' &&\n                    last_type === 'TK_END_EXPR';\n\n                if (opt.brace_preserve_inline) // check for inline, set inline_frame if so\n                {\n                    // search forward for a newline wanted inside this block\n                    var index = 0;\n                    var check_token = null;\n                    flags.inline_frame = true;\n                    do {\n                        index += 1;\n                        check_token = get_token(index);\n                        if (check_token.wanted_newline) {\n                            flags.inline_frame = false;\n                            break;\n                        }\n                    } while (check_token.type !== 'TK_EOF' &&\n                        !(check_token.type === 'TK_END_BLOCK' && check_token.opened === current_token));\n                }\n\n                if ((opt.brace_style === \"expand\" ||\n                        (opt.brace_style === \"none\" && current_token.wanted_newline)) &&\n                    !flags.inline_frame) {\n                    if (last_type !== 'TK_OPERATOR' &&\n                        (empty_anonymous_function ||\n                            last_type === 'TK_EQUALS' ||\n                            (last_type === 'TK_RESERVED' && is_special_word(flags.last_text) && flags.last_text !== 'else'))) {\n                        output.space_before_token = true;\n                    } else {\n                        print_newline(false, true);\n                    }\n                } else { // collapse || inline_frame\n                    if (is_array(previous_flags.mode) && (last_type === 'TK_START_EXPR' || last_type === 'TK_COMMA')) {\n                        if (last_type === 'TK_COMMA' || opt.space_in_paren) {\n                            output.space_before_token = true;\n                        }\n\n                        if (last_type === 'TK_COMMA' || (last_type === 'TK_START_EXPR' && flags.inline_frame)) {\n                            allow_wrap_or_preserved_newline();\n                            previous_flags.multiline_frame = previous_flags.multiline_frame || flags.multiline_frame;\n                            flags.multiline_frame = false;\n                        }\n                    }\n                    if (last_type !== 'TK_OPERATOR' && last_type !== 'TK_START_EXPR') {\n                        if (last_type === 'TK_START_BLOCK' && !flags.inline_frame) {\n                            print_newline();\n                        } else {\n                            output.space_before_token = true;\n                        }\n                    }\n                }\n                print_token();\n                indent();\n            }\n\n            function handle_end_block() {\n                // statements must all be closed when their container closes\n                handle_whitespace_and_comments(current_token);\n\n                while (flags.mode === MODE.Statement) {\n                    restore_mode();\n                }\n\n                var empty_braces = last_type === 'TK_START_BLOCK';\n\n                if (flags.inline_frame && !empty_braces) { // try inline_frame (only set if opt.braces-preserve-inline) first\n                    output.space_before_token = true;\n                } else if (opt.brace_style === \"expand\") {\n                    if (!empty_braces) {\n                        print_newline();\n                    }\n                } else {\n                    // skip {}\n                    if (!empty_braces) {\n                        if (is_array(flags.mode) && opt.keep_array_indentation) {\n                            // we REALLY need a newline here, but newliner would skip that\n                            opt.keep_array_indentation = false;\n                            print_newline();\n                            opt.keep_array_indentation = true;\n\n                        } else {\n                            print_newline();\n                        }\n                    }\n                }\n                restore_mode();\n                print_token();\n            }\n\n            function handle_word() {\n                if (current_token.type === 'TK_RESERVED') {\n                    if (in_array(current_token.text, ['set', 'get']) && flags.mode !== MODE.ObjectLiteral) {\n                        current_token.type = 'TK_WORD';\n                    } else if (in_array(current_token.text, ['as', 'from']) && !flags.import_block) {\n                        current_token.type = 'TK_WORD';\n                    } else if (flags.mode === MODE.ObjectLiteral) {\n                        var next_token = get_token(1);\n                        if (next_token.text === ':') {\n                            current_token.type = 'TK_WORD';\n                        }\n                    }\n                }\n\n                if (start_of_statement()) {\n                    // The conditional starts the statement if appropriate.\n                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') {\n                        flags.declaration_statement = true;\n                    }\n                } else if (current_token.wanted_newline && !is_expression(flags.mode) &&\n                    (last_type !== 'TK_OPERATOR' || (flags.last_text === '--' || flags.last_text === '++')) &&\n                    last_type !== 'TK_EQUALS' &&\n                    (opt.preserve_newlines || !(last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const', 'set', 'get'])))) {\n                    handle_whitespace_and_comments(current_token);\n                    print_newline();\n                } else {\n                    handle_whitespace_and_comments(current_token);\n                }\n\n                if (flags.do_block && !flags.do_while) {\n                    if (current_token.type === 'TK_RESERVED' && current_token.text === 'while') {\n                        // do {} ## while ()\n                        output.space_before_token = true;\n                        print_token();\n                        output.space_before_token = true;\n                        flags.do_while = true;\n                        return;\n                    } else {\n                        // do {} should always have while as the next word.\n                        // if we don't see the expected while, recover\n                        print_newline();\n                        flags.do_block = false;\n                    }\n                }\n\n                // if may be followed by else, or not\n                // Bare/inline ifs are tricky\n                // Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();\n                if (flags.if_block) {\n                    if (!flags.else_block && (current_token.type === 'TK_RESERVED' && current_token.text === 'else')) {\n                        flags.else_block = true;\n                    } else {\n                        while (flags.mode === MODE.Statement) {\n                            restore_mode();\n                        }\n                        flags.if_block = false;\n                        flags.else_block = false;\n                    }\n                }\n\n                if (current_token.type === 'TK_RESERVED' && (current_token.text === 'case' || (current_token.text === 'default' && flags.in_case_statement))) {\n                    print_newline();\n                    if (flags.case_body || opt.jslint_happy) {\n                        // switch cases following one another\n                        deindent();\n                        flags.case_body = false;\n                    }\n                    print_token();\n                    flags.in_case = true;\n                    flags.in_case_statement = true;\n                    return;\n                }\n\n                if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {\n                    if (!start_of_object_property()) {\n                        allow_wrap_or_preserved_newline();\n                    }\n                }\n\n                if (current_token.type === 'TK_RESERVED' && current_token.text === 'function') {\n                    if (in_array(flags.last_text, ['}', ';']) ||\n                        (output.just_added_newline() && !(in_array(flags.last_text, ['(', '[', '{', ':', '=', ',']) || last_type === 'TK_OPERATOR'))) {\n                        // make sure there is a nice clean space of at least one blank line\n                        // before a new function definition\n                        if (!output.just_added_blankline() && !current_token.comments_before.length) {\n                            print_newline();\n                            print_newline(true);\n                        }\n                    }\n                    if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD') {\n                        if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set', 'new', 'return', 'export', 'async'])) {\n                            output.space_before_token = true;\n                        } else if (last_type === 'TK_RESERVED' && flags.last_text === 'default' && last_last_text === 'export') {\n                            output.space_before_token = true;\n                        } else {\n                            print_newline();\n                        }\n                    } else if (last_type === 'TK_OPERATOR' || flags.last_text === '=') {\n                        // foo = function\n                        output.space_before_token = true;\n                    } else if (!flags.multiline_frame && (is_expression(flags.mode) || is_array(flags.mode))) {\n                        // (function\n                    } else {\n                        print_newline();\n                    }\n\n                    print_token();\n                    flags.last_word = current_token.text;\n                    return;\n                }\n\n                prefix = 'NONE';\n\n                if (last_type === 'TK_END_BLOCK') {\n\n                    if (previous_flags.inline_frame) {\n                        prefix = 'SPACE';\n                    } else if (!(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally', 'from']))) {\n                        prefix = 'NEWLINE';\n                    } else {\n                        if (opt.brace_style === \"expand\" ||\n                            opt.brace_style === \"end-expand\" ||\n                            (opt.brace_style === \"none\" && current_token.wanted_newline)) {\n                            prefix = 'NEWLINE';\n                        } else {\n                            prefix = 'SPACE';\n                            output.space_before_token = true;\n                        }\n                    }\n                } else if (last_type === 'TK_SEMICOLON' && flags.mode === MODE.BlockStatement) {\n                    // TODO: Should this be for STATEMENT as well?\n                    prefix = 'NEWLINE';\n                } else if (last_type === 'TK_SEMICOLON' && is_expression(flags.mode)) {\n                    prefix = 'SPACE';\n                } else if (last_type === 'TK_STRING') {\n                    prefix = 'NEWLINE';\n                } else if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' ||\n                    (flags.last_text === '*' &&\n                        (in_array(last_last_text, ['function', 'yield']) ||\n                            (flags.mode === MODE.ObjectLiteral && in_array(last_last_text, ['{', ',']))))) {\n                    prefix = 'SPACE';\n                } else if (last_type === 'TK_START_BLOCK') {\n                    if (flags.inline_frame) {\n                        prefix = 'SPACE';\n                    } else {\n                        prefix = 'NEWLINE';\n                    }\n                } else if (last_type === 'TK_END_EXPR') {\n                    output.space_before_token = true;\n                    prefix = 'NEWLINE';\n                }\n\n                if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {\n                    if (flags.inline_frame || flags.last_text === 'else' || flags.last_text === 'export') {\n                        prefix = 'SPACE';\n                    } else {\n                        prefix = 'NEWLINE';\n                    }\n\n                }\n\n                if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally'])) {\n                    if ((!(last_type === 'TK_END_BLOCK' && previous_flags.mode === MODE.BlockStatement) ||\n                            opt.brace_style === \"expand\" ||\n                            opt.brace_style === \"end-expand\" ||\n                            (opt.brace_style === \"none\" && current_token.wanted_newline)) &&\n                        !flags.inline_frame) {\n                        print_newline();\n                    } else {\n                        output.trim(true);\n                        var line = output.current_line;\n                        // If we trimmed and there's something other than a close block before us\n                        // put a newline back in.  Handles '} // comment' scenario.\n                        if (line.last() !== '}') {\n                            print_newline();\n                        }\n                        output.space_before_token = true;\n                    }\n                } else if (prefix === 'NEWLINE') {\n                    if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {\n                        // no newline between 'return nnn'\n                        output.space_before_token = true;\n                    } else if (last_type !== 'TK_END_EXPR') {\n                        if ((last_type !== 'TK_START_EXPR' || !(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['var', 'let', 'const']))) && flags.last_text !== ':') {\n                            // no need to force newline on 'var': for (var x = 0...)\n                            if (current_token.type === 'TK_RESERVED' && current_token.text === 'if' && flags.last_text === 'else') {\n                                // no newline for } else if {\n                                output.space_before_token = true;\n                            } else {\n                                print_newline();\n                            }\n                        }\n                    } else if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {\n                        print_newline();\n                    }\n                } else if (flags.multiline_frame && is_array(flags.mode) && flags.last_text === ',' && last_last_text === '}') {\n                    print_newline(); // }, in lists get a newline treatment\n                } else if (prefix === 'SPACE') {\n                    output.space_before_token = true;\n                }\n                print_token();\n                flags.last_word = current_token.text;\n\n                if (current_token.type === 'TK_RESERVED') {\n                    if (current_token.text === 'do') {\n                        flags.do_block = true;\n                    } else if (current_token.text === 'if') {\n                        flags.if_block = true;\n                    } else if (current_token.text === 'import') {\n                        flags.import_block = true;\n                    } else if (flags.import_block && current_token.type === 'TK_RESERVED' && current_token.text === 'from') {\n                        flags.import_block = false;\n                    }\n                }\n            }\n\n            function handle_semicolon() {\n                if (start_of_statement()) {\n                    // The conditional starts the statement if appropriate.\n                    // Semicolon can be the start (and end) of a statement\n                    output.space_before_token = false;\n                } else {\n                    handle_whitespace_and_comments(current_token);\n                }\n\n                var next_token = get_token(1);\n                while (flags.mode === MODE.Statement &&\n                    !(flags.if_block && next_token && next_token.type === 'TK_RESERVED' && next_token.text === 'else') &&\n                    !flags.do_block) {\n                    restore_mode();\n                }\n\n                // hacky but effective for the moment\n                if (flags.import_block) {\n                    flags.import_block = false;\n                }\n                print_token();\n            }\n\n            function handle_string() {\n                if (start_of_statement()) {\n                    // The conditional starts the statement if appropriate.\n                    // One difference - strings want at least a space before\n                    output.space_before_token = true;\n                } else {\n                    handle_whitespace_and_comments(current_token);\n                    if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' || flags.inline_frame) {\n                        output.space_before_token = true;\n                    } else if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {\n                        if (!start_of_object_property()) {\n                            allow_wrap_or_preserved_newline();\n                        }\n                    } else {\n                        print_newline();\n                    }\n                }\n                print_token();\n            }\n\n            function handle_equals() {\n                if (start_of_statement()) {\n                    // The conditional starts the statement if appropriate.\n                } else {\n                    handle_whitespace_and_comments(current_token);\n                }\n\n                if (flags.declaration_statement) {\n                    // just got an '=' in a var-line, different formatting/line-breaking, etc will now be done\n                    flags.declaration_assignment = true;\n                }\n                output.space_before_token = true;\n                print_token();\n                output.space_before_token = true;\n            }\n\n            function handle_comma() {\n                handle_whitespace_and_comments(current_token, true);\n\n                print_token();\n                output.space_before_token = true;\n                if (flags.declaration_statement) {\n                    if (is_expression(flags.parent.mode)) {\n                        // do not break on comma, for(var a = 1, b = 2)\n                        flags.declaration_assignment = false;\n                    }\n\n                    if (flags.declaration_assignment) {\n                        flags.declaration_assignment = false;\n                        print_newline(false, true);\n                    } else if (opt.comma_first) {\n                        // for comma-first, we want to allow a newline before the comma\n                        // to turn into a newline after the comma, which we will fixup later\n                        allow_wrap_or_preserved_newline();\n                    }\n                } else if (flags.mode === MODE.ObjectLiteral ||\n                    (flags.mode === MODE.Statement && flags.parent.mode === MODE.ObjectLiteral)) {\n                    if (flags.mode === MODE.Statement) {\n                        restore_mode();\n                    }\n\n                    if (!flags.inline_frame) {\n                        print_newline();\n                    }\n                } else if (opt.comma_first) {\n                    // EXPR or DO_BLOCK\n                    // for comma-first, we want to allow a newline before the comma\n                    // to turn into a newline after the comma, which we will fixup later\n                    allow_wrap_or_preserved_newline();\n                }\n            }\n\n            function handle_operator() {\n                var isGeneratorAsterisk = current_token.text === '*' &&\n                    ((last_type === 'TK_RESERVED' && in_array(flags.last_text, ['function', 'yield'])) ||\n                        (in_array(last_type, ['TK_START_BLOCK', 'TK_COMMA', 'TK_END_BLOCK', 'TK_SEMICOLON']))\n                    );\n                var isUnary = in_array(current_token.text, ['-', '+']) && (\n                    in_array(last_type, ['TK_START_BLOCK', 'TK_START_EXPR', 'TK_EQUALS', 'TK_OPERATOR']) ||\n                    in_array(flags.last_text, Tokenizer.line_starters) ||\n                    flags.last_text === ','\n                );\n\n                if (start_of_statement()) {\n                    // The conditional starts the statement if appropriate.\n                } else {\n                    var preserve_statement_flags = !isGeneratorAsterisk;\n                    handle_whitespace_and_comments(current_token, preserve_statement_flags);\n                }\n\n                if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {\n                    // \"return\" had a special handling in TK_WORD. Now we need to return the favor\n                    output.space_before_token = true;\n                    print_token();\n                    return;\n                }\n\n                // hack for actionscript's import .*;\n                if (current_token.text === '*' && last_type === 'TK_DOT') {\n                    print_token();\n                    return;\n                }\n\n                if (current_token.text === '::') {\n                    // no spaces around exotic namespacing syntax operator\n                    print_token();\n                    return;\n                }\n\n                // Allow line wrapping between operators when operator_position is\n                //   set to before or preserve\n                if (last_type === 'TK_OPERATOR' && in_array(opt.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)) {\n                    allow_wrap_or_preserved_newline();\n                }\n\n                if (current_token.text === ':' && flags.in_case) {\n                    flags.case_body = true;\n                    indent();\n                    print_token();\n                    print_newline();\n                    flags.in_case = false;\n                    return;\n                }\n\n                var space_before = true;\n                var space_after = true;\n                var in_ternary = false;\n                if (current_token.text === ':') {\n                    if (flags.ternary_depth === 0) {\n                        // Colon is invalid javascript outside of ternary and object, but do our best to guess what was meant.\n                        space_before = false;\n                    } else {\n                        flags.ternary_depth -= 1;\n                        in_ternary = true;\n                    }\n                } else if (current_token.text === '?') {\n                    flags.ternary_depth += 1;\n                }\n\n                // let's handle the operator_position option prior to any conflicting logic\n                if (!isUnary && !isGeneratorAsterisk && opt.preserve_newlines && in_array(current_token.text, Tokenizer.positionable_operators)) {\n                    var isColon = current_token.text === ':';\n                    var isTernaryColon = (isColon && in_ternary);\n                    var isOtherColon = (isColon && !in_ternary);\n\n                    switch (opt.operator_position) {\n                        case OPERATOR_POSITION.before_newline:\n                            // if the current token is : and it's not a ternary statement then we set space_before to false\n                            output.space_before_token = !isOtherColon;\n\n                            print_token();\n\n                            if (!isColon || isTernaryColon) {\n                                allow_wrap_or_preserved_newline();\n                            }\n\n                            output.space_before_token = true;\n                            return;\n\n                        case OPERATOR_POSITION.after_newline:\n                            // if the current token is anything but colon, or (via deduction) it's a colon and in a ternary statement,\n                            //   then print a newline.\n\n                            output.space_before_token = true;\n\n                            if (!isColon || isTernaryColon) {\n                                if (get_token(1).wanted_newline) {\n                                    print_newline(false, true);\n                                } else {\n                                    allow_wrap_or_preserved_newline();\n                                }\n                            } else {\n                                output.space_before_token = false;\n                            }\n\n                            print_token();\n\n                            output.space_before_token = true;\n                            return;\n\n                        case OPERATOR_POSITION.preserve_newline:\n                            if (!isOtherColon) {\n                                allow_wrap_or_preserved_newline();\n                            }\n\n                            // if we just added a newline, or the current token is : and it's not a ternary statement,\n                            //   then we set space_before to false\n                            space_before = !(output.just_added_newline() || isOtherColon);\n\n                            output.space_before_token = space_before;\n                            print_token();\n                            output.space_before_token = true;\n                            return;\n                    }\n                }\n\n                if (isGeneratorAsterisk) {\n                    allow_wrap_or_preserved_newline();\n                    space_before = false;\n                    var next_token = get_token(1);\n                    space_after = next_token && in_array(next_token.type, ['TK_WORD', 'TK_RESERVED']);\n                } else if (current_token.text === '...') {\n                    allow_wrap_or_preserved_newline();\n                    space_before = last_type === 'TK_START_BLOCK';\n                    space_after = false;\n                } else if (in_array(current_token.text, ['--', '++', '!', '~']) || isUnary) {\n                    // unary operators (and binary +/- pretending to be unary) special cases\n\n                    space_before = false;\n                    space_after = false;\n\n                    // http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1\n                    // if there is a newline between -- or ++ and anything else we should preserve it.\n                    if (current_token.wanted_newline && (current_token.text === '--' || current_token.text === '++')) {\n                        print_newline(false, true);\n                    }\n\n                    if (flags.last_text === ';' && is_expression(flags.mode)) {\n                        // for (;; ++i)\n                        //        ^^^\n                        space_before = true;\n                    }\n\n                    if (last_type === 'TK_RESERVED') {\n                        space_before = true;\n                    } else if (last_type === 'TK_END_EXPR') {\n                        space_before = !(flags.last_text === ']' && (current_token.text === '--' || current_token.text === '++'));\n                    } else if (last_type === 'TK_OPERATOR') {\n                        // a++ + ++b;\n                        // a - -b\n                        space_before = in_array(current_token.text, ['--', '-', '++', '+']) && in_array(flags.last_text, ['--', '-', '++', '+']);\n                        // + and - are not unary when preceeded by -- or ++ operator\n                        // a-- + b\n                        // a * +b\n                        // a - -b\n                        if (in_array(current_token.text, ['+', '-']) && in_array(flags.last_text, ['--', '++'])) {\n                            space_after = true;\n                        }\n                    }\n\n\n                    if (((flags.mode === MODE.BlockStatement && !flags.inline_frame) || flags.mode === MODE.Statement) &&\n                        (flags.last_text === '{' || flags.last_text === ';')) {\n                        // { foo; --i }\n                        // foo(); --bar;\n                        print_newline();\n                    }\n                }\n\n                output.space_before_token = output.space_before_token || space_before;\n                print_token();\n                output.space_before_token = space_after;\n            }\n\n            function handle_block_comment(preserve_statement_flags) {\n                if (output.raw) {\n                    output.add_raw_token(current_token);\n                    if (current_token.directives && current_token.directives.preserve === 'end') {\n                        // If we're testing the raw output behavior, do not allow a directive to turn it off.\n                        output.raw = opt.test_output_raw;\n                    }\n                    return;\n                }\n\n                if (current_token.directives) {\n                    print_newline(false, preserve_statement_flags);\n                    print_token();\n                    if (current_token.directives.preserve === 'start') {\n                        output.raw = true;\n                    }\n                    print_newline(false, true);\n                    return;\n                }\n\n                // inline block\n                if (!acorn.newline.test(current_token.text) && !current_token.wanted_newline) {\n                    output.space_before_token = true;\n                    print_token();\n                    output.space_before_token = true;\n                    return;\n                }\n\n                var lines = split_linebreaks(current_token.text);\n                var j; // iterator for this case\n                var javadoc = false;\n                var starless = false;\n                var lastIndent = current_token.whitespace_before;\n                var lastIndentLength = lastIndent.length;\n\n                // block comment starts with a new line\n                print_newline(false, preserve_statement_flags);\n                if (lines.length > 1) {\n                    javadoc = all_lines_start_with(lines.slice(1), '*');\n                    starless = each_line_matches_indent(lines.slice(1), lastIndent);\n                }\n\n                // first line always indented\n                print_token(lines[0]);\n                for (j = 1; j < lines.length; j++) {\n                    print_newline(false, true);\n                    if (javadoc) {\n                        // javadoc: reformat and re-indent\n                        print_token(' ' + ltrim(lines[j]));\n                    } else if (starless && lines[j].length > lastIndentLength) {\n                        // starless: re-indent non-empty content, avoiding trim\n                        print_token(lines[j].substring(lastIndentLength));\n                    } else {\n                        // normal comments output raw\n                        output.add_token(lines[j]);\n                    }\n                }\n\n                // for comments of more than one line, make sure there's a new line after\n                print_newline(false, preserve_statement_flags);\n            }\n\n            function handle_comment(preserve_statement_flags) {\n                if (current_token.wanted_newline) {\n                    print_newline(false, preserve_statement_flags);\n                } else {\n                    output.trim(true);\n                }\n\n                output.space_before_token = true;\n                print_token();\n                print_newline(false, preserve_statement_flags);\n            }\n\n            function handle_dot() {\n                if (start_of_statement()) {\n                    // The conditional starts the statement if appropriate.\n                } else {\n                    handle_whitespace_and_comments(current_token, true);\n                }\n\n                if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {\n                    output.space_before_token = true;\n                } else {\n                    // allow preserved newlines before dots in general\n                    // force newlines on dots after close paren when break_chained - for bar().baz()\n                    allow_wrap_or_preserved_newline(flags.last_text === ')' && opt.break_chained_methods);\n                }\n\n                print_token();\n            }\n\n            function handle_unknown(preserve_statement_flags) {\n                print_token();\n\n                if (current_token.text[current_token.text.length - 1] === '\\n') {\n                    print_newline(false, preserve_statement_flags);\n                }\n            }\n\n            function handle_eof() {\n                // Unwind any open statements\n                while (flags.mode === MODE.Statement) {\n                    restore_mode();\n                }\n                handle_whitespace_and_comments(current_token);\n            }\n        }\n\n\n        function OutputLine(parent) {\n            var _character_count = 0;\n            // use indent_count as a marker for lines that have preserved indentation\n            var _indent_count = -1;\n\n            var _items = [];\n            var _empty = true;\n\n            this.set_indent = function(level) {\n                _character_count = parent.baseIndentLength + level * parent.indent_length;\n                _indent_count = level;\n            };\n\n            this.get_character_count = function() {\n                return _character_count;\n            };\n\n            this.is_empty = function() {\n                return _empty;\n            };\n\n            this.last = function() {\n                if (!this._empty) {\n                    return _items[_items.length - 1];\n                } else {\n                    return null;\n                }\n            };\n\n            this.push = function(input) {\n                _items.push(input);\n                _character_count += input.length;\n                _empty = false;\n            };\n\n            this.pop = function() {\n                var item = null;\n                if (!_empty) {\n                    item = _items.pop();\n                    _character_count -= item.length;\n                    _empty = _items.length === 0;\n                }\n                return item;\n            };\n\n            this.remove_indent = function() {\n                if (_indent_count > 0) {\n                    _indent_count -= 1;\n                    _character_count -= parent.indent_length;\n                }\n            };\n\n            this.trim = function() {\n                while (this.last() === ' ') {\n                    _items.pop();\n                    _character_count -= 1;\n                }\n                _empty = _items.length === 0;\n            };\n\n            this.toString = function() {\n                var result = '';\n                if (!this._empty) {\n                    if (_indent_count >= 0) {\n                        result = parent.indent_cache[_indent_count];\n                    }\n                    result += _items.join('');\n                }\n                return result;\n            };\n        }\n\n        function Output(indent_string, baseIndentString) {\n            baseIndentString = baseIndentString || '';\n            this.indent_cache = [baseIndentString];\n            this.baseIndentLength = baseIndentString.length;\n            this.indent_length = indent_string.length;\n            this.raw = false;\n\n            var lines = [];\n            this.baseIndentString = baseIndentString;\n            this.indent_string = indent_string;\n            this.previous_line = null;\n            this.current_line = null;\n            this.space_before_token = false;\n\n            this.add_outputline = function() {\n                this.previous_line = this.current_line;\n                this.current_line = new OutputLine(this);\n                lines.push(this.current_line);\n            };\n\n            // initialize\n            this.add_outputline();\n\n\n            this.get_line_number = function() {\n                return lines.length;\n            };\n\n            // Using object instead of string to allow for later expansion of info about each line\n            this.add_new_line = function(force_newline) {\n                if (this.get_line_number() === 1 && this.just_added_newline()) {\n                    return false; // no newline on start of file\n                }\n\n                if (force_newline || !this.just_added_newline()) {\n                    if (!this.raw) {\n                        this.add_outputline();\n                    }\n                    return true;\n                }\n\n                return false;\n            };\n\n            this.get_code = function() {\n                var sweet_code = lines.join('\\n').replace(/[\\r\\n\\t ]+$/, '');\n                return sweet_code;\n            };\n\n            this.set_indent = function(level) {\n                // Never indent your first output indent at the start of the file\n                if (lines.length > 1) {\n                    while (level >= this.indent_cache.length) {\n                        this.indent_cache.push(this.indent_cache[this.indent_cache.length - 1] + this.indent_string);\n                    }\n\n                    this.current_line.set_indent(level);\n                    return true;\n                }\n                this.current_line.set_indent(0);\n                return false;\n            };\n\n            this.add_raw_token = function(token) {\n                for (var x = 0; x < token.newlines; x++) {\n                    this.add_outputline();\n                }\n                this.current_line.push(token.whitespace_before);\n                this.current_line.push(token.text);\n                this.space_before_token = false;\n            };\n\n            this.add_token = function(printable_token) {\n                this.add_space_before_token();\n                this.current_line.push(printable_token);\n            };\n\n            this.add_space_before_token = function() {\n                if (this.space_before_token && !this.just_added_newline()) {\n                    this.current_line.push(' ');\n                }\n                this.space_before_token = false;\n            };\n\n            this.remove_redundant_indentation = function(frame) {\n                // This implementation is effective but has some issues:\n                //     - can cause line wrap to happen too soon due to indent removal\n                //           after wrap points are calculated\n                // These issues are minor compared to ugly indentation.\n\n                if (frame.multiline_frame ||\n                    frame.mode === MODE.ForInitializer ||\n                    frame.mode === MODE.Conditional) {\n                    return;\n                }\n\n                // remove one indent from each line inside this section\n                var index = frame.start_line_index;\n\n                var output_length = lines.length;\n                while (index < output_length) {\n                    lines[index].remove_indent();\n                    index++;\n                }\n            };\n\n            this.trim = function(eat_newlines) {\n                eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;\n\n                this.current_line.trim(indent_string, baseIndentString);\n\n                while (eat_newlines && lines.length > 1 &&\n                    this.current_line.is_empty()) {\n                    lines.pop();\n                    this.current_line = lines[lines.length - 1];\n                    this.current_line.trim();\n                }\n\n                this.previous_line = lines.length > 1 ? lines[lines.length - 2] : null;\n            };\n\n            this.just_added_newline = function() {\n                return this.current_line.is_empty();\n            };\n\n            this.just_added_blankline = function() {\n                if (this.just_added_newline()) {\n                    if (lines.length === 1) {\n                        return true; // start of the file and newline = blank\n                    }\n\n                    var line = lines[lines.length - 2];\n                    return line.is_empty();\n                }\n                return false;\n            };\n        }\n\n        var InputScanner = function(input) {\n            var _input = input;\n            var _input_length = _input.length;\n            var _position = 0;\n\n            this.back = function() {\n                _position -= 1;\n            };\n\n            this.hasNext = function() {\n                return _position < _input_length;\n            };\n\n            this.next = function() {\n                var val = null;\n                if (this.hasNext()) {\n                    val = _input.charAt(_position);\n                    _position += 1;\n                }\n                return val;\n            };\n\n            this.peek = function(index) {\n                var val = null;\n                index = index || 0;\n                index += _position;\n                if (index >= 0 && index < _input_length) {\n                    val = _input.charAt(index);\n                }\n                return val;\n            };\n\n            this.peekCharCode = function(index) {\n                var val = 0;\n                index = index || 0;\n                index += _position;\n                if (index >= 0 && index < _input_length) {\n                    val = _input.charCodeAt(index);\n                }\n                return val;\n            };\n\n            this.test = function(pattern, index) {\n                index = index || 0;\n                pattern.lastIndex = _position + index;\n                return pattern.test(_input);\n            };\n\n            this.testChar = function(pattern, index) {\n                var val = this.peek(index);\n                return val !== null && pattern.test(val);\n            };\n\n            this.match = function(pattern) {\n                pattern.lastIndex = _position;\n                var pattern_match = pattern.exec(_input);\n                if (pattern_match && pattern_match.index === _position) {\n                    _position += pattern_match[0].length;\n                } else {\n                    pattern_match = null;\n                }\n                return pattern_match;\n            };\n        };\n\n        var Token = function(type, text, newlines, whitespace_before, parent) {\n            this.type = type;\n            this.text = text;\n\n            // comments_before are\n            // comments that have a new line before them\n            // and may or may not have a newline after\n            // this is a set of comments before\n            this.comments_before = /* inline comment*/ [];\n\n\n            this.comments_after = []; // no new line before and newline after\n            this.newlines = newlines || 0;\n            this.wanted_newline = newlines > 0;\n            this.whitespace_before = whitespace_before || '';\n            this.parent = parent || null;\n            this.opened = null;\n            this.directives = null;\n        };\n\n        function tokenizer(input_string, opts) {\n\n            var whitespace = \"\\n\\r\\t \".split('');\n            var digit = /[0-9]/;\n            var digit_bin = /[01]/;\n            var digit_oct = /[01234567]/;\n            var digit_hex = /[0123456789abcdefABCDEF]/;\n\n            this.positionable_operators = '!= !== % & && * ** + - / : < << <= == === > >= >> >>> ? ^ | ||'.split(' ');\n            var punct = this.positionable_operators.concat(\n                // non-positionable operators - these do not follow operator position settings\n                '! %= &= *= **= ++ += , -- -= /= :: <<= = => >>= >>>= ^= |= ~ ...'.split(' '));\n\n            // words which should always start on new line.\n            this.line_starters = 'continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export'.split(',');\n            var reserved_words = this.line_starters.concat(['do', 'in', 'of', 'else', 'get', 'set', 'new', 'catch', 'finally', 'typeof', 'yield', 'async', 'await', 'from', 'as']);\n\n            //  /* ... */ comment ends with nearest */ or end of file\n            var block_comment_pattern = /([\\s\\S]*?)((?:\\*\\/)|$)/g;\n\n            // comment ends just before nearest linefeed or end of file\n            var comment_pattern = /([^\\n\\r\\u2028\\u2029]*)/g;\n\n            var directives_block_pattern = /\\/\\* beautify( \\w+[:]\\w+)+ \\*\\//g;\n            var directive_pattern = / (\\w+)[:](\\w+)/g;\n            var directives_end_ignore_pattern = /([\\s\\S]*?)((?:\\/\\*\\sbeautify\\signore:end\\s\\*\\/)|$)/g;\n\n            var template_pattern = /((<\\?php|<\\?=)[\\s\\S]*?\\?>)|(<%[\\s\\S]*?%>)/g;\n\n            var n_newlines, whitespace_before_token, in_html_comment, tokens;\n            var input;\n\n            this.tokenize = function() {\n                input = new InputScanner(input_string);\n                in_html_comment = false;\n                tokens = [];\n\n                var next, last;\n                var token_values;\n                var open = null;\n                var open_stack = [];\n                var comments = [];\n\n                while (!(last && last.type === 'TK_EOF')) {\n                    token_values = tokenize_next();\n                    next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);\n                    while (next.type === 'TK_COMMENT' || next.type === 'TK_BLOCK_COMMENT' || next.type === 'TK_UNKNOWN') {\n                        if (next.type === 'TK_BLOCK_COMMENT') {\n                            next.directives = token_values[2];\n                        }\n                        comments.push(next);\n                        token_values = tokenize_next();\n                        next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);\n                    }\n\n                    if (comments.length) {\n                        next.comments_before = comments;\n                        comments = [];\n                    }\n\n                    if (next.type === 'TK_START_BLOCK' || next.type === 'TK_START_EXPR') {\n                        next.parent = last;\n                        open_stack.push(open);\n                        open = next;\n                    } else if ((next.type === 'TK_END_BLOCK' || next.type === 'TK_END_EXPR') &&\n                        (open && (\n                            (next.text === ']' && open.text === '[') ||\n                            (next.text === ')' && open.text === '(') ||\n                            (next.text === '}' && open.text === '{')))) {\n                        next.parent = open.parent;\n                        next.opened = open;\n\n                        open = open_stack.pop();\n                    }\n\n                    tokens.push(next);\n                    last = next;\n                }\n\n                return tokens;\n            };\n\n            function get_directives(text) {\n                if (!text.match(directives_block_pattern)) {\n                    return null;\n                }\n\n                var directives = {};\n                directive_pattern.lastIndex = 0;\n                var directive_match = directive_pattern.exec(text);\n\n                while (directive_match) {\n                    directives[directive_match[1]] = directive_match[2];\n                    directive_match = directive_pattern.exec(text);\n                }\n\n                return directives;\n            }\n\n            function tokenize_next() {\n                var resulting_string;\n                var whitespace_on_this_line = [];\n\n                n_newlines = 0;\n                whitespace_before_token = '';\n\n                var c = input.next();\n\n                if (c === null) {\n                    return ['', 'TK_EOF'];\n                }\n\n                var last_token;\n                if (tokens.length) {\n                    last_token = tokens[tokens.length - 1];\n                } else {\n                    // For the sake of tokenizing we can pretend that there was on open brace to start\n                    last_token = new Token('TK_START_BLOCK', '{');\n                }\n\n                while (in_array(c, whitespace)) {\n\n                    if (acorn.newline.test(c)) {\n                        if (!(c === '\\n' && input.peek(-2) === '\\r')) {\n                            n_newlines += 1;\n                            whitespace_on_this_line = [];\n                        }\n                    } else {\n                        whitespace_on_this_line.push(c);\n                    }\n\n                    c = input.next();\n\n                    if (c === null) {\n                        return ['', 'TK_EOF'];\n                    }\n                }\n\n                if (whitespace_on_this_line.length) {\n                    whitespace_before_token = whitespace_on_this_line.join('');\n                }\n\n                if (digit.test(c) || (c === '.' && input.testChar(digit))) {\n                    var allow_decimal = true;\n                    var allow_e = true;\n                    var local_digit = digit;\n\n                    if (c === '0' && input.testChar(/[XxOoBb]/)) {\n                        // switch to hex/oct/bin number, no decimal or e, just hex/oct/bin digits\n                        allow_decimal = false;\n                        allow_e = false;\n                        if (input.testChar(/[Bb]/)) {\n                            local_digit = digit_bin;\n                        } else if (input.testChar(/[Oo]/)) {\n                            local_digit = digit_oct;\n                        } else {\n                            local_digit = digit_hex;\n                        }\n                        c += input.next();\n                    } else if (c === '.') {\n                        // Already have a decimal for this literal, don't allow another\n                        allow_decimal = false;\n                    } else {\n                        // we know this first loop will run.  It keeps the logic simpler.\n                        c = '';\n                        input.back();\n                    }\n\n                    // Add the digits\n                    while (input.testChar(local_digit)) {\n                        c += input.next();\n\n                        if (allow_decimal && input.peek() === '.') {\n                            c += input.next();\n                            allow_decimal = false;\n                        }\n\n                        // a = 1.e-7 is valid, so we test for . then e in one loop\n                        if (allow_e && input.testChar(/[Ee]/)) {\n                            c += input.next();\n\n                            if (input.testChar(/[+-]/)) {\n                                c += input.next();\n                            }\n\n                            allow_e = false;\n                            allow_decimal = false;\n                        }\n                    }\n\n                    return [c, 'TK_WORD'];\n                }\n\n                if (acorn.isIdentifierStart(input.peekCharCode(-1))) {\n                    if (input.hasNext()) {\n                        while (acorn.isIdentifierChar(input.peekCharCode())) {\n                            c += input.next();\n                            if (!input.hasNext()) {\n                                break;\n                            }\n                        }\n                    }\n\n                    if (!(last_token.type === 'TK_DOT' ||\n                            (last_token.type === 'TK_RESERVED' && in_array(last_token.text, ['set', 'get']))) &&\n                        in_array(c, reserved_words)) {\n                        if (c === 'in' || c === 'of') { // hack for 'in' and 'of' operators\n                            return [c, 'TK_OPERATOR'];\n                        }\n                        return [c, 'TK_RESERVED'];\n                    }\n\n                    return [c, 'TK_WORD'];\n                }\n\n                if (c === '(' || c === '[') {\n                    return [c, 'TK_START_EXPR'];\n                }\n\n                if (c === ')' || c === ']') {\n                    return [c, 'TK_END_EXPR'];\n                }\n\n                if (c === '{') {\n                    return [c, 'TK_START_BLOCK'];\n                }\n\n                if (c === '}') {\n                    return [c, 'TK_END_BLOCK'];\n                }\n\n                if (c === ';') {\n                    return [c, 'TK_SEMICOLON'];\n                }\n\n                if (c === '/') {\n                    var comment = '';\n                    var comment_match;\n                    // peek for comment /* ... */\n                    if (input.peek() === '*') {\n                        input.next();\n                        comment_match = input.match(block_comment_pattern);\n                        comment = '/*' + comment_match[0];\n                        var directives = get_directives(comment);\n                        if (directives && directives.ignore === 'start') {\n                            comment_match = input.match(directives_end_ignore_pattern);\n                            comment += comment_match[0];\n                        }\n                        comment = comment.replace(acorn.allLineBreaks, '\\n');\n                        return [comment, 'TK_BLOCK_COMMENT', directives];\n                    }\n                    // peek for comment // ...\n                    if (input.peek() === '/') {\n                        input.next();\n                        comment_match = input.match(comment_pattern);\n                        comment = '//' + comment_match[0];\n                        return [comment, 'TK_COMMENT'];\n                    }\n\n                }\n\n                var startXmlRegExp = /<()([-a-zA-Z:0-9_.]+|{[\\s\\S]+?}|!\\[CDATA\\[[\\s\\S]*?\\]\\])(\\s+{[\\s\\S]+?}|\\s+[-a-zA-Z:0-9_.]+|\\s+[-a-zA-Z:0-9_.]+\\s*=\\s*('[^']*'|\"[^\"]*\"|{[\\s\\S]+?}))*\\s*(\\/?)\\s*>/g;\n\n                if (c === '`' || c === \"'\" || c === '\"' || // string\n                    (\n                        (c === '/') || // regexp\n                        (opts.e4x && c === \"<\" && input.test(startXmlRegExp, -1)) // xml\n                    ) && ( // regex and xml can only appear in specific locations during parsing\n                        (last_token.type === 'TK_RESERVED' && in_array(last_token.text, ['return', 'case', 'throw', 'else', 'do', 'typeof', 'yield'])) ||\n                        (last_token.type === 'TK_END_EXPR' && last_token.text === ')' &&\n                            last_token.parent && last_token.parent.type === 'TK_RESERVED' && in_array(last_token.parent.text, ['if', 'while', 'for'])) ||\n                        (in_array(last_token.type, ['TK_COMMENT', 'TK_START_EXPR', 'TK_START_BLOCK',\n                            'TK_END_BLOCK', 'TK_OPERATOR', 'TK_EQUALS', 'TK_EOF', 'TK_SEMICOLON', 'TK_COMMA'\n                        ]))\n                    )) {\n\n                    var sep = c,\n                        esc = false,\n                        has_char_escapes = false;\n\n                    resulting_string = c;\n\n                    if (sep === '/') {\n                        //\n                        // handle regexp\n                        //\n                        var in_char_class = false;\n                        while (input.hasNext() &&\n                            ((esc || in_char_class || input.peek() !== sep) &&\n                                !input.testChar(acorn.newline))) {\n                            resulting_string += input.peek();\n                            if (!esc) {\n                                esc = input.peek() === '\\\\';\n                                if (input.peek() === '[') {\n                                    in_char_class = true;\n                                } else if (input.peek() === ']') {\n                                    in_char_class = false;\n                                }\n                            } else {\n                                esc = false;\n                            }\n                            input.next();\n                        }\n                    } else if (opts.e4x && sep === '<') {\n                        //\n                        // handle e4x xml literals\n                        //\n\n                        var xmlRegExp = /[\\s\\S]*?<(\\/?)([-a-zA-Z:0-9_.]+|{[\\s\\S]+?}|!\\[CDATA\\[[\\s\\S]*?\\]\\])(\\s+{[\\s\\S]+?}|\\s+[-a-zA-Z:0-9_.]+|\\s+[-a-zA-Z:0-9_.]+\\s*=\\s*('[^']*'|\"[^\"]*\"|{[\\s\\S]+?}))*\\s*(\\/?)\\s*>/g;\n                        input.back();\n                        var xmlStr = '';\n                        var match = input.match(startXmlRegExp);\n                        if (match) {\n                            // Trim root tag to attempt to\n                            var rootTag = match[2].replace(/^{\\s+/, '{').replace(/\\s+}$/, '}');\n                            var isCurlyRoot = rootTag.indexOf('{') === 0;\n                            var depth = 0;\n                            while (match) {\n                                var isEndTag = !!match[1];\n                                var tagName = match[2];\n                                var isSingletonTag = (!!match[match.length - 1]) || (tagName.slice(0, 8) === \"![CDATA[\");\n                                if (!isSingletonTag &&\n                                    (tagName === rootTag || (isCurlyRoot && tagName.replace(/^{\\s+/, '{').replace(/\\s+}$/, '}')))) {\n                                    if (isEndTag) {\n                                        --depth;\n                                    } else {\n                                        ++depth;\n                                    }\n                                }\n                                xmlStr += match[0];\n                                if (depth <= 0) {\n                                    break;\n                                }\n                                match = input.match(xmlRegExp);\n                            }\n                            // if we didn't close correctly, keep unformatted.\n                            if (!match) {\n                                xmlStr += input.match(/[\\s\\S]*/g)[0];\n                            }\n                            xmlStr = xmlStr.replace(acorn.allLineBreaks, '\\n');\n                            return [xmlStr, \"TK_STRING\"];\n                        }\n                    } else {\n                        //\n                        // handle string\n                        //\n                        var parse_string = function(delimiter, allow_unescaped_newlines, start_sub) {\n                            // Template strings can travers lines without escape characters.\n                            // Other strings cannot\n                            var current_char;\n                            while (input.hasNext()) {\n                                current_char = input.peek();\n                                if (!(esc || (current_char !== delimiter &&\n                                        (allow_unescaped_newlines || !acorn.newline.test(current_char))))) {\n                                    break;\n                                }\n\n                                // Handle \\r\\n linebreaks after escapes or in template strings\n                                if ((esc || allow_unescaped_newlines) && acorn.newline.test(current_char)) {\n                                    if (current_char === '\\r' && input.peek(1) === '\\n') {\n                                        input.next();\n                                        current_char = input.peek();\n                                    }\n                                    resulting_string += '\\n';\n                                } else {\n                                    resulting_string += current_char;\n                                }\n\n                                if (esc) {\n                                    if (current_char === 'x' || current_char === 'u') {\n                                        has_char_escapes = true;\n                                    }\n                                    esc = false;\n                                } else {\n                                    esc = current_char === '\\\\';\n                                }\n\n                                input.next();\n\n                                if (start_sub && resulting_string.indexOf(start_sub, resulting_string.length - start_sub.length) !== -1) {\n                                    if (delimiter === '`') {\n                                        parse_string('}', allow_unescaped_newlines, '`');\n                                    } else {\n                                        parse_string('`', allow_unescaped_newlines, '${');\n                                    }\n\n                                    if (input.hasNext()) {\n                                        resulting_string += input.next();\n                                    }\n                                }\n                            }\n                        };\n\n                        if (sep === '`') {\n                            parse_string('`', true, '${');\n                        } else {\n                            parse_string(sep);\n                        }\n                    }\n\n                    if (has_char_escapes && opts.unescape_strings) {\n                        resulting_string = unescape_string(resulting_string);\n                    }\n\n                    if (input.peek() === sep) {\n                        resulting_string += sep;\n                        input.next();\n\n                        if (sep === '/') {\n                            // regexps may have modifiers /regexp/MOD , so fetch those, too\n                            // Only [gim] are valid, but if the user puts in garbage, do what we can to take it.\n                            while (input.hasNext() && acorn.isIdentifierStart(input.peekCharCode())) {\n                                resulting_string += input.next();\n                            }\n                        }\n                    }\n                    return [resulting_string, 'TK_STRING'];\n                }\n\n                if (c === '#') {\n\n                    if (tokens.length === 0 && input.peek() === '!') {\n                        // shebang\n                        resulting_string = c;\n                        while (input.hasNext() && c !== '\\n') {\n                            c = input.next();\n                            resulting_string += c;\n                        }\n                        return [trim(resulting_string) + '\\n', 'TK_UNKNOWN'];\n                    }\n\n\n\n                    // Spidermonkey-specific sharp variables for circular references\n                    // https://developer.mozilla.org/En/Sharp_variables_in_JavaScript\n                    // http://mxr.mozilla.org/mozilla-central/source/js/src/jsscan.cpp around line 1935\n                    var sharp = '#';\n                    if (input.hasNext() && input.testChar(digit)) {\n                        do {\n                            c = input.next();\n                            sharp += c;\n                        } while (input.hasNext() && c !== '#' && c !== '=');\n                        if (c === '#') {\n                            //\n                        } else if (input.peek() === '[' && input.peek(1) === ']') {\n                            sharp += '[]';\n                            input.next();\n                            input.next();\n                        } else if (input.peek() === '{' && input.peek(1) === '}') {\n                            sharp += '{}';\n                            input.next();\n                            input.next();\n                        }\n                        return [sharp, 'TK_WORD'];\n                    }\n                }\n\n                if (c === '<' && (input.peek() === '?' || input.peek() === '%')) {\n                    input.back();\n                    var template_match = input.match(template_pattern);\n                    if (template_match) {\n                        c = template_match[0];\n                        c = c.replace(acorn.allLineBreaks, '\\n');\n                        return [c, 'TK_STRING'];\n                    }\n                }\n\n                if (c === '<' && input.match(/\\!--/g)) {\n                    c = '<!--';\n                    while (input.hasNext() && !input.testChar(acorn.newline)) {\n                        c += input.next();\n                    }\n                    in_html_comment = true;\n                    return [c, 'TK_COMMENT'];\n                }\n\n                if (c === '-' && in_html_comment && input.match(/->/g)) {\n                    in_html_comment = false;\n                    return ['-->', 'TK_COMMENT'];\n                }\n\n                if (c === '.') {\n                    if (input.peek() === '.' && input.peek(1) === '.') {\n                        c += input.next() + input.next();\n                        return [c, 'TK_OPERATOR'];\n                    }\n                    return [c, 'TK_DOT'];\n                }\n\n                if (in_array(c, punct)) {\n                    while (input.hasNext() && in_array(c + input.peek(), punct)) {\n                        c += input.next();\n                        if (!input.hasNext()) {\n                            break;\n                        }\n                    }\n\n                    if (c === ',') {\n                        return [c, 'TK_COMMA'];\n                    } else if (c === '=') {\n                        return [c, 'TK_EQUALS'];\n                    } else {\n                        return [c, 'TK_OPERATOR'];\n                    }\n                }\n\n                return [c, 'TK_UNKNOWN'];\n            }\n\n\n            function unescape_string(s) {\n                // You think that a regex would work for this\n                // return s.replace(/\\\\x([0-9a-f]{2})/gi, function(match, val) {\n                //         return String.fromCharCode(parseInt(val, 16));\n                //     })\n                // However, dealing with '\\xff', '\\\\xff', '\\\\\\xff' makes this more fun.\n                var out = '',\n                    escaped = 0;\n\n                var input_scan = new InputScanner(s);\n                var matched = null;\n\n                while (input_scan.hasNext()) {\n                    // Keep any whitespace, non-slash characters\n                    // also keep slash pairs.\n                    matched = input_scan.match(/([\\s]|[^\\\\]|\\\\\\\\)+/g);\n\n                    if (matched) {\n                        out += matched[0];\n                    }\n\n                    if (input_scan.peek() === '\\\\') {\n                        input_scan.next();\n                        if (input_scan.peek() === 'x') {\n                            matched = input_scan.match(/x([0-9A-Fa-f]{2})/g);\n                        } else if (input_scan.peek() === 'u') {\n                            matched = input_scan.match(/u([0-9A-Fa-f]{4})/g);\n                        } else {\n                            out += '\\\\';\n                            if (input_scan.hasNext()) {\n                                out += input_scan.next();\n                            }\n                            continue;\n                        }\n\n                        // If there's some error decoding, return the original string\n                        if (!matched) {\n                            return s;\n                        }\n\n                        escaped = parseInt(matched[1], 16);\n\n                        if (escaped > 0x7e && escaped <= 0xff && matched[0].indexOf('x') === 0) {\n                            // we bail out on \\x7f..\\xff,\n                            // leaving whole string escaped,\n                            // as it's probably completely binary\n                            return s;\n                        } else if (escaped >= 0x00 && escaped < 0x20) {\n                            // leave 0x00...0x1f escaped\n                            out += '\\\\' + matched[0];\n                            continue;\n                        } else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {\n                            // single-quote, apostrophe, backslash - escape these\n                            out += '\\\\' + String.fromCharCode(escaped);\n                        } else {\n                            out += String.fromCharCode(escaped);\n                        }\n                    }\n                }\n\n                return out;\n            }\n        }\n\n        var beautifier = new Beautifier(js_source_text, options);\n        return beautifier.beautify();\n\n    }\n\n    if (typeof define === \"function\" && define.amd) {\n        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )\n        define([], function() {\n            return { js_beautify: js_beautify };\n        });\n    } else if (typeof exports !== \"undefined\") {\n        // Add support for CommonJS. Just put this file somewhere on your require.paths\n        // and you will be able to `var js_beautify = require(\"beautify\").js_beautify`.\n        exports.js_beautify = js_beautify;\n    } else if (typeof window !== \"undefined\") {\n        // If we're running a web page and don't have either of the above, add our one global\n        window.js_beautify = js_beautify;\n    } else if (typeof global !== \"undefined\") {\n        // If we don't even have window, try global.\n        global.js_beautify = js_beautify;\n    }\n\n}());"},"lineCount":2482}},"hash":"f78a9253e9e92413406f903485b834ee","cacheData":{"env":{}}}